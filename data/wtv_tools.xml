<?xml version="1.0" encoding="utf-8"?>
<SPXML-INLINE-FORM>

<tools>

	<lds_address TYPE="string" EXPR-INIT="Application.ServerHostname"/>
	<get_server_protocol PROPERTY="1" EXPR="
			if ( System.IsWebClient )
			{
				return UrlSchema( System.WebClientUrl );
			}
			if ( AppConfig.GetOptProperty( 'LDS-HTTPS' ) == '1' || AppConfig.GetOptProperty( 'ALT-PORT-HTTPS' ) == '1' )
			{
				return 'https';
			}
			return 'http';
	"/>

	<object_license TYPE="variant"/>

	<encode_course_folder PROPERTY="1" PARAM="sCodeParam" EXPR="
			return ( sCodeParam == qti_tools.get_valid_filename( sCodeParam ) ? sCodeParam : 'base64' + tools.get_hash_server( sCodeParam, 'base64' ) );
	"/>
	<decode_course_folder PROPERTY="1" PARAM="sCodeParam" EXPR="
			return ( StrBegins( sCodeParam, 'base64' ) ? Base64Decode( StrRightRangePos( sCodeParam, 6 ) ) : sCodeParam );
	"/>

	<load_course PROPERTY="1" wsDesc="{'author':'manu','level':2,'desc':'load_course','private':true}" ALLOW-CALL-FROM-CLIENT="1" PARAM="fileUrl" PARAM="sFileCharsetParam" PARAM="docCourseParam" EXPR="
		try
		{
			if ( sFileCharsetParam == null || sFileCharsetParam == '' || sFileCharsetParam == undefined )
				throw 'no_param';
		}
		catch ( err )
		{
			sFileCharsetParam = 'utf-8';
		}
		try
		{
			if ( docCourseParam == '' || docCourseParam == undefined )
				throw 'no_param';
		}
		catch ( err )
		{
			docCourseParam = null;
		}

		docCourse = docCourseParam == null ? OpenNewDoc( 'x-local://wtv/wtv_course.xmd' ) : docCourseParam;
		courseDoc = docCourse.TopElem;

		function open_doc_with_charset( sUrl, sParams, sCharset )
		{
			switch ( sCharset )
			{
				case 'windows-1251':
					sFileText = LoadUrlText( sUrl );
					//sFileText = DecodeCharset( sFileText, 'windows-1251' );
					return OpenDocFromStr( sFileText, sParams ).TopElem;
					break;

				default:
					return OpenDoc( sUrl, sParams ).TopElem;
					break;
			}
		}

		oRes = ({ 'error': 0, 'error_text': '', 'course': courseDoc });

		try
		{
			fileUrlLover = StrLowerCase( fileUrl );
			switch ( UrlPathSuffix( fileUrlLover ) )
			{
				case '.zip':
					oRes.error = 1;
					oRes.error_text = ms_tools.get_const('11t9krprzz');
					oRes.course = null;
					break;

				case '.crs':
					teFile = open_doc_with_charset( fileUrl, 'format=win.ini; form=wtv_aicc_crs.xmd', sFileCharsetParam );

					courseDoc.code = teFile.course.course_id;
					courseDoc.name = teFile.course.course_title;
					courseDoc.version = teFile.course.version;
					courseDoc.import_type = 'aicc';
					if ( docCourseParam == null || ! courseDoc.desc.HasValue )
						courseDoc.desc = teFile.course_description;

					_basic_url_flag = false;
					teFile = open_doc_with_charset( ReplaceUrlPathSuffix( fileUrl, '.crs', '.cst' ), 'format=csv; header-line=1; form=wtv_aicc_cst.xmd', sFileCharsetParam );
//alert(teFile.Xml)
					for ( line in teFile )
					{
						_block_lower = StrLowerCase( line.block );
						if ( line.block != '' &amp;&amp; _block_lower != 'root' )
						{
							part = courseDoc.parts.ObtainChildByKey( line.block );
							part.type = 'folder';
							part.is_mandatory = false;
						}

						for ( _member in line.member )
							if ( _member != '' )
							{
								part = courseDoc.parts.ObtainChildByKey( _member );
								part.parent_part_code = _block_lower != 'root' ? line.block : '';
							}
					}

					_cur_basic_url = '/webtutor/' + tools.encode_course_folder( courseDoc.code ) + '/';
					_start_basic_url_flag = true;
					teFile = open_doc_with_charset( ReplaceUrlPathSuffix( fileUrl, '.crs', '.au' ), 'format=csv; header-line=1; form=wtv_aicc_au.xmd', sFileCharsetParam );
					for ( line in teFile )
					{
						part = courseDoc.parts.GetChildByKey( line.system_id );
						if ( part.type == '' )
							part.type = line.type;
						part.max_score = line.max_score;
						part.mastery_score = line.mastery_score;
						part.url = Trim( line.file_name );
						if ( ! StrBegins( part.url, '/' ) )
							_basic_url_flag = true;
						else if ( ! StrBegins( part.url, _cur_basic_url, true ) )
								_start_basic_url_flag = false;
					}

					if ( _basic_url_flag )
					{
						courseDoc.base_url = _cur_basic_url;
					}
					else if ( _start_basic_url_flag )
						{
							courseDoc.base_url = _cur_basic_url;
							for ( _part in courseDoc.parts )
								_part.url = StrReplace( StrLowerCase( _part.url ), StrLowerCase( _cur_basic_url ), '' );
						}

					teFile = open_doc_with_charset( ReplaceUrlPathSuffix( fileUrl, '.crs', '.des' ), 'format=csv; header-line=1; form=wtv_aicc_des.xmd', sFileCharsetParam );
					for ( line in teFile )
					{
						_system_id_first = StrLowerCase( line.system_id ).slice( 0, 1 );
						if ( _system_id_first == 'a' || _system_id_first == 'b' )
						{
							part = courseDoc.parts.GetChildByKey( line.system_id );
							part.name = line.title;
							if ( docCourseParam == null || ! part.desc.HasValue )
								part.desc = line.description;
						}
					}
					break;

				default:
				{
					strDoc = LoadUrlData( fileUrl );

					if ( ! LdsIsServer )
					{
						startIndex = strDoc.indexOf( '&lt;?xml' );
						endIndex = strDoc.indexOf( '?&gt;' );
						searchResult = strDoc.indexOf( 'encoding', startIndex, endIndex );

						if ( searchResult &lt; 0 )
						{
							_dlgDoc = OpenDoc( 'x-local://wtv/wtv_dlg_select_enconing.xml' );
							ActiveScreen.ModalDlg( _dlgDoc );
							if ( _dlgDoc.TopElem.encoding_type.HasValue )
								strDoc = StrReplace( strDoc, '?&gt;', ' encoding=&quot;' + _dlgDoc.TopElem.encoding_type + '&quot;?&gt;' );
						}
						else
						{
							encoding_windows = strDoc.indexOf( 'windows-1251', searchResult, endIndex );
							encoding_utf = strDoc.indexOf( 'utf-8', searchResult, endIndex );
							if ( encoding_windows &lt; 0 &amp;&amp; encoding_utf &lt; 0 &amp;&amp; !Screen.MsgBox( ms_tools.get_const('kks0ul6gx7'), ms_tools.get_const('c_question'), 'question', 'yes,no' ) )
								Cancel();
						}
					}

					function obtain_course_modules( teCourseParam, arrAusParam )
					{
						for ( fldPartElem in teCourseParam.parts )
						{
							if ( fldPartElem.type == 'lesson' )
							{
								catCourseModule = ArrayOptFirstElem( XQuery( 'for $elem in course_modules where $elem/eid = ' + XQueryLiteral( fldPartElem.code ) + ' return $elem/Fields(\'id\')' ) );
								if ( catCourseModule == undefined )
								{
									docCourseModule = OpenNewDoc( 'x-local://wtv/wtv_course_module.xmd' );
									docCourseModule.BindToDb( DefaultDb );
								}
								else
								{
									docCourseModule = OpenDoc( UrlFromDocID( catCourseModule.id ) );
								}
								docCourseModule.TopElem.AssignElem( fldPartElem );
								docCourseModule.TopElem.eid = fldPartElem.code;
								docCourseModule.TopElem.import_type = 'cmi5';
								if ( arrAusParam != undefined )
								{
									fldAu = ArrayOptFindByKey( arrAusParam, fldPartElem.code.Value, 'id' );
									if ( fldAu != undefined )
									{
										docCourseModule.TopElem.cmi5.moveon = fldAu.moveOn;
										docCourseModule.TopElem.cmi5.launchmethod = fldAu.launchMethod;
									}
								}
								docCourseModule.Save();

								fldPartElem.course_module_id = docCourseModule.DocID;
							}
						}
					}

					if ( UrlFileName( fileUrlLover ) == 'cmi5.xml' )
					{
						strForm = OpenDocFromStr( strDoc, 'form=x-local://wtv/wtv_form_cmi5_manifest.xmd' ).courseStructure;

						function getLangstringTitle( fldSourseParam )
						{
							var iCount = ArrayCount( fldSourseParam.langstring );
							var sRes = '';
							if ( iCount == 0 )
							{
								return '';
							}
							else if ( iCount == 1 )
							{
								return ArrayFirstElem( fldSourseParam.langstring ).Value;
							}
							else
							{
								for ( fldLangstringElem in fldSourseParam.langstring )
								{
									sRes += ( sRes == '' ? '' : '; ' ) + fldLangstringElem.lang.Value.split( '-' )[ 0 ] + ':' + fldLangstringElem.Value;
								}
							}
							return sRes;
						}

						var arrAus = [];
						function itemRecursion( fldSourceParam, sParentCodeParam )
						{
							for ( fldUaElem in fldSourceParam.au )
							{
								fldPartChild = courseDoc.parts.ObtainChildByKey( fldUaElem.id );
								fldPartChild.parent_part_code = sParentCodeParam;
								fldPartChild.type = 'lesson';
								fldPartChild.name = getLangstringTitle( fldUaElem.title );
								fldPartChild.desc = getLangstringTitle( fldUaElem.description );
								fldPartChild.url = fldUaElem.url;
								rMasteryScore = OptReal( fldUaElem.masteryScore );
								if ( rMasteryScore != undefined )
									fldPartChild.mastery_score_relative = rMasteryScore;
								arrAus.push( fldUaElem );
							}

							for ( fldBlockElem in fldSourceParam.block )
							{
								fldPartChild = courseDoc.parts.ObtainChildByKey( fldBlockElem.id );
								fldPartChild.parent_part_code = sParentCodeParam;
								fldPartChild.type = 'folder';
								fldPartChild.name = getLangstringTitle( fldBlockElem.title );
								fldPartChild.desc = getLangstringTitle( fldBlockElem.description );
								fldPartChild.is_mandatory = false;

								itemRecursion( fldBlockElem, fldPartChild.code.Value );
							}
						}

						//courseDoc.code = 'CMI5_' + tools.random_string( 4 );
						courseDoc.code = strForm.course.id;
						courseDoc.import_type = 'cmi5';
						courseDoc.name = getLangstringTitle( strForm.course.title );
						courseDoc.desc = getLangstringTitle( strForm.course.description );
						//courseDoc.base_url = '/webtutor/' + courseDoc.code + '/';
						courseDoc.base_url = '/webtutor/' + tools.encode_course_folder( courseDoc.code ) + '/';

						itemRecursion( strForm, '' );

						obtain_course_modules( courseDoc, arrAus );
					}
					else if ( UrlFileName( fileUrlLover ) == 'tincan.xml')
					{
						strForm = OpenDocFromStr( strDoc, 'form=x-local://wtv/wtv_form_tincan_manifest.xmd' ).tincan;

						//courseDoc.code = 'TINCAN_' + tools.random_string( 6 );
						courseDoc.import_type = 'cmi5';
						//courseDoc.base_url = '/webtutor/' + courseDoc.code + '/';

						for ( fldActivityElem in strForm.activities )
						{
							if ( fldActivityElem.type == 'http://adlnet.gov/expapi/activities/course' )
							{
								courseDoc.code = fldActivityElem.id;
								courseDoc.base_url = '/webtutor/' + tools.encode_course_folder( courseDoc.code ) + '/';
								courseDoc.name = fldActivityElem.name;
								courseDoc.desc = fldActivityElem.description;

								fldPartChild = courseDoc.parts.ObtainChildByKey( fldActivityElem.id );
								fldPartChild.parent_part_code = '';
								fldPartChild.type = 'lesson';
								fldPartChild.name = fldActivityElem.name;
								fldPartChild.desc = fldActivityElem.description;
								fldPartChild.url = fldActivityElem.launch;
							}
						}

						obtain_course_modules( courseDoc );
					}
					else
					{
						strForm = OpenDocFromStr( strDoc, 'form=x-local://wtv/wtv_form_scorm_manifest.xmd' ).manifest;
						fldOrigManifest = OpenDocFromStr( strDoc ).TopElem;

						if ( fldOrigManifest.Name != 'manifest' )
							throw ms_tools.get_const('nevernyyformat');

						function itemRecursion( _base, _id )
						{
							for ( _item in _base )
							{
								if ( _item.Name == 'item' )
								{
									_i = _item.OptAttrValue( 'identifier' );
									_ident = _item.OptAttrValue( 'identifierref' );

									_child = courseDoc.parts.ObtainChildByKey( _i );
									_child.name = _item.title;
									_child.parent_part_code = _id;

									if ( _ident == '' )
									{
										_child.type = 'folder';
										_child.is_mandatory = false;
									}
									else
									{
										_resourse = strForm.resources.GetChildByKey( _ident );
										_child.url = UrlDecode( _resourse.Child( 'xml:base' ) ) + StrReplace( UrlDecode( _resourse.href ), '\\', '/' );
									}

									_params = _item.OptAttrValue( 'parameters' );
									if ( _params != undefined )
									{
										try
										{
											_paran_obj = UrlQuery( UrlDecode( _params ) );
											for ( _param_name in _paran_obj )
											{
												_param_value = _paran_obj.GetProperty( _param_name );
												switch ( StrLowerCase( _param_name ) )
												{
													case 'height':
														_child.win_height = _param_value;
														break;

													case 'width':
														_child.win_width = _param_value;
														break;

													case 'scrolling':
														_child.disp_scrolling = ( _param_value == '1' || _param_value == 'yes' ? true : false );
														break;
												}
											}
										}
										catch ( ff )
										{
										}

										if ( StrBegins( _params, '?' ) || StrBegins( _params, '&amp;' ) )
											_params = StrRightRangePos( _params, 1 );
										if ( StrEnds( _child.url, '?' ) || StrEnds( _child.url, '&amp;' ) )
											_child.url += _params;
										else if ( StrContains( _child.url, '?' ) )
											_child.url += ( StrContains( _child.url, '?' ) ? '&amp;' : '?' ) + _params;
									}

									sAttr = _item.OptAttrValue( 'isvisible' )
									if ( sAttr != undefined )
										_child.is_visible = StrLowerCase( sAttr ) != 'false';

									if ( _item.ChildExists( 'adlcp:masteryscore' ) &amp;&amp; _item.Child( 'adlcp:masteryscore' ) != '' )
										_child.mastery_score = _item.Child( 'adlcp:masteryscore' ).Value;
									if ( _item.ChildExists( 'adlcp:maxtimeallowed' ) )
										_child.max_time_allowed = _item.Child( 'adlcp:maxtimeallowed' ).Value;
									if ( _item.ChildExists( 'adlcp:timelimitaction' ) )
										_child.time_limit_action = _item.Child( 'adlcp:timelimitaction' ).Value;

									itemRecursion( _item, _i );
								}
							}
						}

						try
						{
							_default = fldOrigManifest.organizations.OptAttrValue( 'default' );
							if ( _default == '' )
								throw 'default in imple';

							_org = fldOrigManifest.organizations.GetChildByAttrValue( 'identifier', _default );
						}
						catch ( hg )
						{
							_org = fldOrigManifest.organizations.organization;
						}

						courseDoc.code = _org.OptAttrValue( 'identifier' );
						courseDoc.import_type = 'scorm';
						if ( _org.ChildExists( 'title' ) )
							courseDoc.name = _org.title;
						else
							courseDoc.name = StrReplace( ms_tools.get_const('gynk9f1y5r'), '{PARAM1}', courseDoc.code );
						courseDoc.base_url = '/webtutor/' + tools.encode_course_folder( courseDoc.code ) + '/';

						flag = true;
						counter = 0;
						for ( _item in _org )
							if ( _item.Name == 'item' )
							{
								counter++;
								if ( _item.OptAttrValue( 'identifierref' ) != '' || counter &gt; 1 )
									flag = false;
							}

						itemRecursion( ( flag ? _org.item : _org ), '' );
					}
					break;
				}
			}
		}
		catch ( err )
		{
			oRes.error = 500;
			oRes.error_text = '' + err;
			oRes.course = null;
		}
		return oRes;
	"/>

	<copy_manifest_resources PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="fileUrl" PARAM="baseUrl" EXPR="
		StartModalTask();
		oRes = ({ 'error': 0, 'error_text': '' });
		try
		{
			manifestDoc = OpenDoc( fileUrl,'form=x-local://wtv/wtv_form_scorm_manifest.xmd' ).manifest;

			_break_flag = false;
			_file_path = UrlParent( fileUrl );
			_resource_len = ArrayCount( manifestDoc.resources );
			_common_base_url = UrlAppendPath( 'x-local://wt/web/', baseUrl );

			for ( _resourse in manifestDoc.resources )
			{
				_resourse_index = _resourse.ChildIndex;
				_file_len = ArrayCount( _resourse.file );
				for ( _file in _resourse.file )
					try
					{
						ModalTaskMsg( 'Resource ' + ( _resourse_index + 1 ) + ' of ' + _resource_len + '. File ' + ( _file.ChildIndex - 3 ) + ' of ' + _file_len + ':\n' + _file.href );

						_xml_base = StrReplace( UrlDecode( _resourse.Child( 'xml:base' ) ), '\\', '/' );
						_file_href = StrReplace( UrlDecode( _file.href ), '\\', '/' );
						_source_url = UrlAppendPath( UrlAppendPath( _file_path, _xml_base ), _file_href );
						_dest_url = UrlAppendPath( UrlAppendPath( _common_base_url, _xml_base ), _file_href );
						try
						{
							tools.copy_url( _dest_url, _source_url );
						}
						catch ( err )
						{
							if ( UrlPathSuffix( _dest_url ) == '.xml' )
								tools.copy_url_temp_suffix( _dest_url, _source_url );
							else
								throw err;
						}
					}
					catch ( sds )
					{
						if ( LdsIsServer )
						{
							oRes.error++;
							oRes.error_text += sds + '\n';
						}
						else
						{
							if ( ! ActiveScreen.MsgBox( sds + '\n\nBase=&quot;' + _resourse.Child( 'xml:base' ) + '&quot;\nHref=&quot;' + _file.href + '&quot;\nUrlDecode=&quot;' + _source_url + '&quot;\n\n' + ms_tools.get_const('gcsko1uqf5'), ms_tools.get_const('c_error'), 'error', 'yes,no' ) )
							{
								_break_flag = true;
								break;
							}
						}
					}

				if ( _break_flag )
					break;
			}

			ModalTaskMsg( ms_tools.get_const('3l9chkzhyw') + '\n' + fileUrl );
			tools.copy_url( UrlAppendPath( _common_base_url, UrlFileName( fileUrl ) ), fileUrl );
		}
		catch ( sd )
		{
			oRes.error++;
			oRes.error_text += sd;
			alert( sd );
		}
		FinishModalTask();
		return oRes;
	"/>

	<open_course_package_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sUrlPARAM" EXPR="
			if ( ! LdsIsServer )
			{
				if ( ! System.IsWebClient )
				{
					sTempUrl = 'x-local://trash/temp/' + tools.random_string( 10 ) + '.zip';
					tools.copy_url( sTempUrl, sUrlPARAM );
					sUrlPARAM = sTempUrl;
				}
				return CallServerMethod( 'tools', 'open_course_package_server', [ RValue( sUrlPARAM ) ] );
			}

			oRes = ({ 'error': 0, 'error_text': '', 'file_import': '', 'temp_url': RValue( sUrlPARAM ), 'course': null });

			if ( (tools.sys_db_capability & tools.UNI_CAP_AZURE) == 0 )
			{
				sTempZipDirUrl = ObtainTempFile();
				ObtainDirectory( sTempZipDirUrl );
			}
			else
			{
				sTempZipDirUrl = 'file:///' + tools.spxml_unibridge.Object.provider.GetTempPath() + '/' + tools.random_string( 10 );
			}

			try
			{
				bRes = tools.zip_extract( sUrlPARAM, sTempZipDirUrl );
			}
			catch(err)
			{
				oRes.error = 1;
				oRes.error_text = 'ZIP Error: ' + err;
				return oRes;
			}

			sFileImport = '';
			sFileImportSuffix = '';
			arrUrls = ReadDirectory( sTempZipDirUrl );
			for ( sUrlElem in arrUrls )
			{
				if ( IsDirectory( sUrlElem ) )
					continue;

				sUrlLower = StrLowerCase( sUrlElem );
				sFileImportSuffix = UrlPathSuffix( sUrlLower );
				sFileImportName = UrlFileName( sUrlLower );
				if ( sFileImportName == 'imsmanifest.xml' || sFileImportName == 'cmi5.xml' || sFileImportName == 'tincan.xml' )
				{
					sFileImport = sUrlElem;
					break;
				}
				else if ( sFileImportSuffix == '.crs' )
				{
					sFileImport = sUrlElem;
					break;
				}
			}

			if ( sFileImport == '' )
			{
				oRes.error = 1;
				oRes.error_text = 'No import file in package.';
				return oRes;
			}

			oResCourse = tools.load_course( sFileImport );
			if ( oResCourse.error == 0 )
			{
				oRes.course = oResCourse.course;
			}
			else
			{
				oRes.error = oResCourse.error;
				oRes.error_text = oResCourse.error_text;
			}

			oRes.file_import = sFileImport;
			return oRes;
	"/>

	<copy_url_temp_suffix PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sDestUrlPARAM" PARAM="sSourceUrlPARAM" EXPR="
			if ( LdsIsServer )
			{
				try
				{
					DeleteFile( UrlToFilePath( sDestUrlPARAM ) );
				}
				catch( err )
				{
				}
				MoveFile( UrlToFilePath( sDestUrlPARAM ), UrlToFilePath( sSourceUrlPARAM ) );
			}
			else
			{
				sUrlPathSuffix = UrlPathSuffix( sDestUrlPARAM );
				sTempDestUrl = ReplaceUrlPathSuffix( sDestUrlPARAM, sUrlPathSuffix, sUrlPathSuffix + '_temp' );
				CopyUrl( sTempDestUrl, sSourceUrlPARAM );
				CallServerMethod( 'tools', 'copy_url_temp_suffix', [ RValue( sDestUrlPARAM ), RValue( sTempDestUrl ) ] );
			}
	"/>




	<update_forum_entry PROPERTY="1" PARAM="doc" PARAM="iNewForumIDParam" PARAM="iParentForumEntryIDParam" EXPR="
		try
		{
			iParentForumEntryIDParam;
		}
		catch ( err )
		{
			iParentForumEntryIDParam = doc.forum_entry.parent_forum_entry_id.Value;
		}
		while ( iParentForumEntryIDParam != null )
			try
			{
				doc = OpenDoc( UrlFromDocID( iParentForumEntryIDParam ) );
				iParentForumEntryIDParam = doc.forum_entry.parent_forum_entry_id.Value;
			}
			catch ( err )
			{
				break;
			}
		if ( doc == null )
			return 0;


		xarrForumEntryChilds = tools.xquery( 'for $elem in forum_entrys where IsHierChild( $elem/id, ' + doc.DocID + ' ) order by $elem/Hier() return $elem/id, $elem/forum_id, $elem/create_date' );
		iCounter = ArrayCount( xarrForumEntryChilds );
		doc.TopElem.child_num = iCounter;
		if ( iCounter != 0 )
			doc.TopElem.last_create_date = ArrayMax( xarrForumEntryChilds, 'create_date' ).create_date;
		doc.Save();

		try
		{
			if ( iNewForumIDParam == '' )
				throw 'not_param';
		}
		catch ( err )
		{
			iNewForumIDParam = null;
		}
		if ( iNewForumIDParam != null )
			for ( catForumEntryElem in xarrForumEntryChilds )
				if ( catForumEntryElem.forum_id != iNewForumIDParam )
				{
					docForumEntry = OpenDoc( UrlFromDocID( catForumEntryElem.id ) );
					docForumEntry.TopElem.forum_id = iNewForumIDParam;
					docForumEntry.Save();
				}

		return iCounter;
	"/>


	<update_document_comment_entry PROPERTY="1" PARAM="doc" PARAM="iNewPortalDocIDParam" EXPR="
		while ( doc.document_comment_entry.parent_document_entry_id.HasValue )
			try
			{
				doc = OpenDoc( UrlFromDocID( doc.document_comment_entry.parent_document_entry_id ) );
			}
			catch ( err )
			{
				break;
			}

		xarrDocumentCommentEntryChilds = tools.xquery( 'for $elem in document_comment_entrys where IsHierChild( $elem/id, ' + doc.DocID + ' ) order by $elem/Hier(), $elem/create_date descending return $elem/id, $elem/portal_doc_id, $elem/create_date' );
		iCounter = ArrayCount( xarrDocumentCommentEntryChilds );
		doc.TopElem.child_num = iCounter;
		if ( iCounter != 0 )
			doc.TopElem.last_create_date = ArrayFirstElem( xarrDocumentCommentEntryChilds, 'create_date' ).create_date;
		doc.Save();

		try
		{
			if ( iNewPortalDocIDParam == '' )
				throw 'not_param';
		}
		catch ( err )
		{
			iNewPortalDocIDParam = null;
		}
		if ( iNewPortalDocIDParam != null )
			for ( catDocumentCommentEntryElem in xarrDocumentCommentEntryChilds )
				if ( catDocumentCommentEntryElem.portal_doc_id != iNewPortalDocIDParam )
				{
					docDocumentCommentEntry = OpenDoc( UrlFromDocID( catDocumentCommentEntryElem.id ) );
					docDocumentCommentEntry.TopElem.portal_doc_id = iNewPortalDocIDParam;
					docDocumentCommentEntry.Save();
				}

		return iCounter;
	"/>


	<add_report PROPERTY="1" PARAM="iActionRepotrIDParam" PARAM="sTextParam" PARAM="docActionRepotrParam" EXPR="
			iActionRepotrIDParam = OptInt( iActionRepotrIDParam );
			if ( iActionRepotrIDParam == undefined )
				return null;

			try
			{
				docActionRepotrParam;
			}
			catch ( err )
			{
				docActionRepotrParam = OpenDoc( UrlFromDocID( iActionRepotrIDParam ) );
			}
			docActionRepotrParam.TopElem.report_text += ( docActionRepotrParam.TopElem.report_text.HasValue &amp;&amp; ! StrEnds( docActionRepotrParam.TopElem.report_text, '\n' ) ? '\n' : '' ) + Date() + ' ' + Trim( sTextParam ) + '\n';
			docActionRepotrParam.Save();
			return docActionRepotrParam;
	"/>



	<!--  RGS ver  -->
	<upload_data PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="iExchangeSeverIDParam" PARAM="dtLimitParam" PARAM="iExchangeObjectIDParam" EXPR="
			sExchangeType = '';
			try
			{
				iExchangeObjectIDParam = Int( iExchangeObjectIDParam );
				dtLimitParam = null;
				sExchangeType = 'object';
			}
			catch ( err )
			{
				iExchangeObjectIDParam = null;
				try
				{
					dtLimitParam = Date( dtLimitParam );
					sExchangeType = 'full';
				}
				catch ( err2 )
				{
					dtLimitParam = null;
				}
			}
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'upload_data', [ RValue( iExchangeSeverIDParam ), RValue( dtLimitParam ), RValue( iExchangeObjectIDParam ) ] );

			var oRes = ({ 'error': 0, 'error_text': '', 'data_file_url': '' });
			var bSendRes = true;
			var dtStartDate = Date();
			try
			{
				docExchangeSever = OpenDoc( UrlFromDocID( iExchangeSeverIDParam ) );
				teExchangeSever = docExchangeSever.TopElem;

				iPackageID = Random( 1, 4000000000 );
				docActionReport = OpenNewDoc( 'x-local://wtv/wtv_action_report.xmd' );
				docActionReport.BindToDb( DefaultDb );
				docActionReport.TopElem.create_date = Date();
				docActionReport.TopElem.type = 'result';
				docActionReport.TopElem.exchange_server_id = iExchangeSeverIDParam;
				iReportID = docActionReport.DocID;

				sReport = 'Package ID: ' + iPackageID + '.\n';
				sReport += 'Start sending: ' + dtStartDate + '.\n';
				sReport += 'Server name: ' +teExchangeSever.name + '.\n';
				sReport += 'Server code: ' + teExchangeSever.code + '.\n';
				sReport += 'Send protocol: ' + teExchangeSever.upload.exchange_protocol + '.\n';
				if ( teExchangeSever.upload.exchange_protocol == 'smtp' )
				{
					sReport += 'Email: ' + teExchangeSever.upload.smtp_mail_address + '.\n';
					sReport += 'Url SMTP server: ' + teExchangeSever.upload.smtp_server_url + '.\n';
				}
				else
				{
					sReport += 'Url HTTP server: ' + teExchangeSever.upload.http_server_url + '.\n';
					sReport += 'Use BASIC authentication: ' + teExchangeSever.upload.use_basic_authenticate + '.\n';
					sReport += 'Exchange WebSoft - WebSoft: ' + teExchangeSever.upload.is_wt_to_wt + '.\n';
				}
				sReport += 'Data type: ' + teExchangeSever.upload.exchange_type.ForeignElem.name + '.\n';
				sReport += 'Send all data type: ' + ( teExchangeSever.upload.exchange_objects_type == 'all' ) + '.\n';
				sReport += 'Limit date: ' + ( dtLimitParam == null ? 'all data type' : dtLimitParam ) + '.\n';
				if ( sExchangeType != '' )
					sReport += 'Limit type: ' + sExchangeType + '.\n';
				docActionReport = tools.add_report( iReportID, sReport, docActionReport );

				sCreatePackCode = 'get_data_package_' + tools.random_string( 10 );
				oPackRes = tools.create_data_package( iExchangeSeverIDParam, iReportID, iPackageID, dtLimitParam, iExchangeObjectIDParam, sCreatePackCode );
				aFiles = new Array();
				if( DataType( oPackRes ) == 'string' )
				{
					aFiles.push( oPackRes );
				}
				else
				{
					aFiles = oPackRes.GetOptProperty( 'files', [] );
				}
				for( _file in aFiles )
				{
					if ( StrContains( _file, '#false#' ) )
						throw StrReplace( _file, '#false#', '' );

					if ( teExchangeSever.upload.exchange_protocol == 'smtp' )
					{
						tools.send_file_to_server( 'data [' + teExchangeSever.code + ']' + ( sExchangeType == '' ? '' : ' - ' + sExchangeType ), 'ID: ' + iPackageID, _file, iExchangeSeverIDParam, iReportID );
					}
					else
					{
						dtStartDate=Date();
						docActionReport = OpenDoc( UrlFromDocID( Int( iReportID ) ) );
						tools.add_report( iReportID, ('Package is ready: ' + dtStartDate + '. Posting to server.\n'), docActionReport );
						bSendRes = tools.post_file_to_server( _file, iExchangeSeverIDParam, iReportID );
					}
				}

				docActionReport = OpenDoc( UrlFromDocID( Int( iReportID ) ) );
				docActionReport.TopElem.completed = bSendRes;
				docActionReport.Save();
			}
			catch ( err )
			{
				docActionReport = tools.add_report( iReportID, err );
				docActionReport.TopElem.completed = false;
				docActionReport.Save();
				oRes.error = 500;
				oRes.error_text = '' + err;
			}
			return oRes;
	"/>


	<download_data PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="iExchangeSeverIDParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'download_data', [ RValue( iExchangeSeverIDParam ) ] );

			oRes = ({ 'error': 0, 'error_text': '', 'data_file_url': '' });

			function process_download_package( oResp )
			{
				iPackageID = Random( 1, 4000000000 );
				sDownloadPackageUrl = 'x-local://' + DefaultDb + '/download_data/download_' + tools.date_str() + '_' + iPackageID + '.zip';
				oResp.SaveToFile( sDownloadPackageUrl );
				oRes.data_file_url = sDownloadPackageUrl;

				docActionReport.TopElem.data_file_url = sDownloadPackageUrl;
				docActionReport = tools.add_report( iReportID, 'Save data: OK.', docActionReport );

				bRes = tools.package_process( sDownloadPackageUrl, 'objects', teExchangeSever, iReportID, iExchangeSeverIDParam ) != null;
				if( ! bRes )
					throw 'Package process failed.';
			}

			iSleepTimeOut = 60000;
			try
			{
				docExchangeSever = OpenDoc( UrlFromDocID( iExchangeSeverIDParam ) );
				teExchangeSever = docExchangeSever.TopElem;

				docActionReport = OpenNewDoc( 'x-local://wtv/wtv_action_report.xmd' );
				docActionReport.BindToDb( DefaultDb );
				docActionReport.TopElem.create_date = Date();
				docActionReport.TopElem.type = 'get_data_package_from_server';
				docActionReport.TopElem.exchange_server_id = iExchangeSeverIDParam;
				iReportID = docActionReport.DocID;
				tools.add_report( iReportID, 'Start downloading. Url packages list: ' + teExchangeSever.download.http_server_url + '.', docActionReport );

				if ( teExchangeSever.download.use_basic_authenticate )
					SetHttpDefaultAuth( teExchangeSever.code, teExchangeSever.server_password );

				if ( teExchangeSever.download.is_wt_to_wt )
				{
					oResponse = HttpRequest( UrlAppendPath( teExchangeSever.download.http_server_url, '/exc/get_data_package.html?type=create_pack' ) );
					docActionReport = tools.add_report( iReportID, 'Connecting to data exchange server: OK.', docActionReport );
					if( !StrBegins( oResponse.Body, 'get_data_package_' ) )
					{
						process_download_package( oResponse );
					}
					else
					{
						Sleep( iSleepTimeOut );
						sPrimaryKeyUserData = oResponse.Body;
						oRespBody = null;
						while( true )
						{
							oResponse = HttpRequest( UrlAppendPath( teExchangeSever.download.http_server_url, '/exc/get_data_package.html?type=get_created_pack&pack_code=' + sPrimaryKeyUserData ) );
							alert(oResponse.Body)
							oRespBody = tools.read_object( oResponse.Body );
							if( oRespBody.status_id != 'active' )
							{
								break;
							}
							Sleep( iSleepTimeOut );
						}
						if( oRespBody.GetOptProperty( 'files' ) != undefined )
						{
							for( _file in oRespBody.files )
							{
								oResponse = HttpRequest( UrlAppendPath( teExchangeSever.download.http_server_url, '/exc/get_data_package.html?type=get_file_from_created_pack&filename=' + UrlEncode( _file ) ) );
								process_download_package( oResponse );
							}
						}
					}
				}
				else
				{
					oResponse = HttpRequest( teExchangeSever.download.http_server_url );
					process_download_package( oResponse );
				}

				docActionReport = tools.add_report( iReportID, 'Data processing: OK.' );

				if ( docActionReport.TopElem.server_version.HasValue )
					teExchangeSever.server_version = docActionReport.TopElem.server_version;

				teExchangeSever.last_download_date = Date();
				docExchangeSever.Save();

				docActionReport.TopElem.completed = true;
				docActionReport = tools.add_report( iReportID, 'Finish downloading.', docActionReport );
			}
			catch ( err )
			{
				tools.add_report( iReportID, err );
				oRes.error = 500;
				oRes.error_text = '' + err;
			}
			return oRes;
	"/>






	<create_data_package PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="iExchangeSeverIDParam" PARAM="_report_id" PARAM="sPackIDParam" PARAM="dtLimitParam" PARAM="iExchangeObjectIDParam" PARAM="sPrimaryKeyUserData" EXPR="
		try
		{
			iExchangeObjectIDParam = Int( iExchangeObjectIDParam );
			dtLimitParam = null;
		}
		catch ( err )
		{
			iExchangeObjectIDParam = null;
			try
			{
				dtLimitParam = Date( dtLimitParam );
			}
			catch ( err2 )
			{
				dtLimitParam = null;
			}
		}
		try
		{
			if( !StrBegins( sPrimaryKeyUserData, 'get_data_package_' ) )
				throw 'error';
		}
		catch ( err )
		{
			sPrimaryKeyUserData = null;
		}
		if ( ! LdsIsServer )
			return CallServerMethod( 'tools', 'create_data_package', [ RValue( iExchangeSeverIDParam ), RValue( _report_id ), RValue( sPackIDParam ), RValue( dtLimitParam ), RValue( iExchangeObjectIDParam ), RValue( sPrimaryKeyUserData ) ] );

		docExchangeSever = OpenDoc( UrlFromDocID( iExchangeSeverIDParam ) );
		curExchangeSever = docExchangeSever.TopElem;
		iLimitCount = OptInt( curExchangeSever.upload.limit_count );
		iCurrentCount = 0;
		iCurrentPack = 1;

		_report_doc = OpenDoc( UrlFromDocID( _report_id ) );

		function create_condition( obj_str, xquery_par, qual )
		{
			return ( xquery_par == '' &amp;&amp; dtLimitParam == null &amp;&amp; qual == '' ?
					obj_str + 's' :
					'for $elem in ' + obj_str + 's where' + ( dtLimitParam == null ? '' : ' $elem/modification_date &gt;= date( \'' + dtLimitParam + '\' )' + ( xquery_par == '' ? '' : ' and ' ) ) + ' ' + xquery_par + ' ' + ( qual != '' &amp;&amp; ( xquery_par != '' || dtLimitParam != null ) ? ' and ' : '' ) + qual + ' return $elem' );
		}

		function update_filter( _text )
		{
			var _fx_string = String( Trim( _text ) );
			var _startindex = _fx_string.indexOf('{', 0);
			var _endindex = 0-1;
			var _field = '';
			while ( _startindex &gt;= 0 )
			{
				_endindex = _fx_string.indexOf('}',_startindex);
				if ( _endindex &lt; 0 )
					break;

				_field = _fx_string.slice( _startindex + 1, _endindex );
				_fx_string = StrReplace( _fx_string, '{' + _field + '}', eval( 'curExchangeSever.' + _field ) );
				_startindex = _fx_string.indexOf('{',_endindex);
			}

			return _fx_string;
		}
		function create_new_upload_data()
		{
			docUploadData = tools.get_form_upload_data( ( sPrimaryKeyUserData != null ? ( sPackIDParam + iCurrentPack ) : sPackIDParam ) );
			if( sPrimaryKeyUserData != null )
			{
				iCurrentPack++;
			}
			teUploadData = docUploadData.TopElem;
		}
		function finish_upload_data()
		{
			iCurrentCount = 0;
			if ( curExchangeSever.upload.process_eval.HasValue )
			{
				try
				{
					SafeEval( curExchangeSever.upload.process_eval, [ { 'teUploadData': teUploadData } ] );
				}
				catch ( err )
				{
					_report_str += '\n' + Date() + ' ' + err + '\n';
				}
			}
			_file_name = 'upload_' + tools.date_str() + '_' + ( sPrimaryKeyUserData != null ? ( sPackIDParam + '_' + iCurrentPack ) : sPackIDParam ) + '.zip';

			_temp_dir_name = ObtainTempFile();
			CreateDirectory( UrlToFilePath( _temp_dir_name ) );
			_temp_file_name = _temp_dir_name + '/update.xml';
			_temp_zip_name = _temp_dir_name + '/' + _file_name;
			docUploadData.SaveToUrl( _temp_file_name );

			tools.zip_create( UrlToFilePath( _temp_zip_name ), UrlToFilePath( _temp_file_name ) );

			sZipUrl = 'x-local://trash/temp/' + _file_name;
			if ( global_settings.settings.save_exchange_data_files )
				sZipUrl = 'x-local://' + DefaultDb + '/upload_data/' + _file_name;
			tools.copy_url( sZipUrl, _temp_zip_name );

			create_new_upload_data();

			if( sPrimaryKeyUserData != null )
			{

				oCreatePack = tools_web.get_user_data( sPrimaryKeyUserData );
				if ( oCreatePack == null )
				{
					oCreatePack = new Object();
					oCreatePack.status_id = 'active';
				}
				if( oCreatePack.GetOptProperty( 'files' ) == undefined )
				{
					oCreatePack.SetProperty( 'files', [] );
				}
				oCreatePack.files.push( sZipUrl );

				tools_web.set_user_data( sPrimaryKeyUserData, oCreatePack, 3600 );
			}

			iFileSize = null;
			try
			{
				iFileSize = UrlFileSize( _temp_zip_name );
			}
			catch ( err )
			{
			}
			try
			{
				DeleteDirectory( UrlToFilePath( _temp_dir_name ) );
			}
			catch ( err )
			{
				alert( err );
			}
			tools.add_report( _report_id, ( '\nSave data file: ' + sZipUrl + '.' + ( iFileSize == null ? '' : ' File size: ' + iFileSize + ' byte.' ) + '\n' ), _report_doc );
		}
		var docUploadData, teUploadData, sZipUrl;
		var bCheckLimit = iLimitCount != undefined && sPrimaryKeyUserData != null;
		var dFirstQueryRun=null
		create_new_upload_data();

		_report_str = 'Version of exchange server: ' + teUploadData.basic.server_version + '.';

		if ( iExchangeObjectIDParam == null )
		{
			_type_array = ( curExchangeSever.upload.exchange_objects_type == 'all' ? common.exchange_object_types : curExchangeSever.upload.exchange_objects );
			for ( _obj_type in _type_array )
				try
				{
					_cur_type = _obj_type.PrimaryKey;
					_report_str += '\n' + Date() + ' Object &quot;' + _cur_type + '&quot;: ';

					if ( curExchangeSever.upload.exchange_objects_type == 'all' || curExchangeSever.upload.exchange_object_select_type == 'all' )
					{
						_filter_text = curExchangeSever.upload.filter_text;
						_is_varieble = curExchangeSever.upload.is_invariable;
						_qual = '';
					}
					else
					{
						_filter_text = tools.create_filter_xquery( _obj_type.filter.conditions );
						_is_varieble = _obj_type.is_invariable;
						_qual = _obj_type.xquery_qual;
					}
					_filter_text = update_filter( _filter_text );
					_qual = update_filter( _qual );

					_query = create_condition( _cur_type, _filter_text, _qual );
					_report_str += '\n_query=' + _query +'.';
					try
					{
						curArray = XQuery( _query );
					}
					catch ( err )
					{
						throw 'XQuery error. Query: &quot;' + _query + '&quot;, filter: &quot;' + _filter_text + '&quot;, qual: &quot;' + _qual + '&quot;.\n' + err + '\n';
					}
					if (dFirstQueryRun==null)
					{
						dFirstQueryRun=Date()
					}
					_cur_len = ArrayCount( curArray );

					_cur_counter = 0;
					for ( _obj in curArray )
					try
					{
						objDocID = Int( _obj.id );
						tools.set_field_to_form_upload_data( teUploadData, null, objDocID, {
							bInvariable: ( _is_varieble == true ),
							bClearResourceData: curExchangeSever.upload.clear_resource_data.Value
						} );
						iCurrentCount++;
						if( bCheckLimit && iCurrentCount >= iLimitCount )
						{
							finish_upload_data();
						}
						_cur_counter++;
					}
					catch ( ss )
					{
						_report_str += '\n' + Date() + ' ' + ss + '\n';
					}

					_report_str += '\n' + _cur_counter + ' of ' + _cur_len + '.';
				}
				catch ( dd )
				{
					_report_str += '\n' + Date() + ' ' + dd + '\n';
				}

			if (dFirstQueryRun==null)
			{
				dFirstQueryRun=Date()
			}

			docUploadData.TopElem.basic.SetOptAttrValue('last_upload_date',dFirstQueryRun)
			if ( curExchangeSever.upload.process_deleted_objects )
			{
				if ( dtLimitParam == null )
					_del_array = XQuery( 'trash_docs' );
				else
					_del_array = XQuery( 'for $elem in trash_docs where $elem/del_date &gt;= date(\'' + dtLimitParam + '\') return $elem' );

				_cur_counter = 0;
				for ( _elem in _del_array )
				{
					tools.set_field_to_form_upload_data( teUploadData, _elem, 'deleted_objects' );
					iCurrentCount++;
					if( bCheckLimit && iCurrentCount >= iLimitCount )
					{
						finish_upload_data();
					}
					_cur_counter++;
				}

				_report_str += '\n' + Date() + ' Deleted objects: ' + _cur_counter + ' of ' + ArrayCount( _del_array ) + '.';
			}

			if ( curExchangeSever.upload.process_custom_templates )
			{
				tools.set_field_to_form_upload_data( teUploadData, custom_templates );
				iCurrentCount++;
				if( bCheckLimit && iCurrentCount >= iLimitCount )
				{
					finish_upload_data();
				}
				_report_str += '\n' + Date() + ' Custom templates: ' + ArrayCount( teUploadData.custom_templates ) + '.';
			}

			if ( curExchangeSever.upload.process_lists )
			{
				fldGeneralLists = CreateElem( 'x-local://wtv/wtv_general.xmd', 'exchange_lists_base' );
				for ( fldGeneralListElem in fldGeneralLists )
				{
					fldList = lists.Child( fldGeneralListElem.Name );
					tools.set_field_to_form_upload_data( teUploadData, fldList, 'lists' );
					iCurrentCount++;
					if( bCheckLimit && iCurrentCount >= iLimitCount )
					{
						finish_upload_data();
					}
					_report_str += '\n' + Date() + ' List &quot;' + fldList.Name + '&quot;: ' + ArrayCount( fldList ) + '.';
				}
			}
		}
		else
		{
			tools.set_field_to_form_upload_data( teUploadData, null, iExchangeObjectIDParam );
		}
		finish_upload_data();

		if (dFirstQueryRun==null)
		{
			dFirstQueryRun=Date()
		}
		curExchangeSever.last_upload_date = dFirstQueryRun;
		docExchangeSever.Save();

		if( sPrimaryKeyUserData == null )
		{
			_report_doc.Save();
			return sZipUrl;
		}
		else
		{
			oCreatePack = tools_web.get_user_data( sPrimaryKeyUserData );
			if ( oCreatePack == null )
			{
				oCreatePack = new Object();
				oCreatePack.status_id = 'finish';
			}
			if( oCreatePack.GetOptProperty( 'files' ) == undefined )
			{
				oCreatePack.SetProperty( 'files', [] );
			}
			oCreatePack.status_id = 'finish';
			tools_web.set_user_data( sPrimaryKeyUserData, oCreatePack, 3600 );



			_report_doc.TopElem.report_text += Date() + ' Finish processing.';
			_report_doc.TopElem.completed = true;
			_report_doc.Save();

			return oCreatePack;
		}
	"/>




	<get_exchange_date PROPERTY="1" PARAM="_source" PARAM="_last_date" EXPR="
		_date = null;
		switch ( _source.exchange_type )
		{
				case 'last_exchange':
					_date = _last_date;
					break;
				case 'lately_period':
					if ( _source.lately_exchange_period.HasValue )
					{
						_date = DateOffset( Date(), 0 - 86400 * _source.lately_exchange_period );

						if ( _date &gt; _last_date &amp;&amp; _source.allow_enlarge_period )
							_date = _last_date;
					}
					else
					{
						if ( _source.allow_enlarge_period )
							_date = _last_date;
					}
					break;
				case 'lately_date':
					if ( _source.lately_exchange_date &gt; _last_date &amp;&amp; _source.allow_enlarge_period )
						_date = _last_date;
					else
						_date = _source.lately_exchange_date;
					break;
		}
		return _date;
	"/>


	<send_file_to_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_subject" PARAM="_body" PARAM="_send_file" PARAM="_server_id" PARAM="_report_id" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'send_file_to_server', [ RValue( _subject ), RValue( _body ), RValue( _send_file ), RValue( _server_id ), RValue( _report_id ) ] );

		try
		{
			_server_doc = OpenDoc( UrlFromDocID( Int( _server_id ) ) ).TopElem.upload;

			_client = SmtpClient();
			_client.OpenSession( _server_doc.smtp_server_url );
			tools.add_report( _report_id, 'Open SMTP session: OK.' );

			if ( _server_doc.use_smtp_authenticate )
			{
				_client.Authenticate( _server_doc.smtp_login, _server_doc.smtp_password );
				tools.add_report( _report_id, 'SMTP authentication: OK.' );
			}

			_message = MailMessage();

			_message.subject = _subject;
			_message.body = _body;
			_message.date = Date();

//ALERT
			_message.sender.name = global_settings.settings.own_org.email;
			_message.sender.address = global_settings.settings.own_org.email;

			_recipient = _message.recipients.AddChild();
			_recipient.address = _server_doc.smtp_mail_address;

			_attachment = _message.attachments.AddChild();
			_attachment.name = UrlFileName( _send_file );
			_attachment.data = LoadUrlData( _send_file );

			_client.SendMessage( _message );
			tools.add_report( _report_id, 'Data sending: OK.' );

			_client.CloseSession();
			tools.add_report( _report_id, 'Close SMTP session: OK.' );

		}
		catch ( poi )
		{
			tools.add_report( _report_id, poi );
			Cancel();
		}
	"/>

	<post_file_to_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_send_file" PARAM="_server_id" PARAM="_report_id" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'post_file_to_server', [ RValue( _send_file ), RValue( _server_id ), RValue( _report_id ) ] );

			var bRes = false;
			try
			{
				_server_doc = OpenDoc( UrlFromDocID( Int( _server_id ) ) ).TopElem;
				_server_upload = _server_doc.upload;
				_post_param = MultipartFormEncode
				(
					'data', LoadUrlData( _send_file )
				);

				if ( _server_upload.use_basic_authenticate )
					SetHttpDefaultAuth( _server_doc.code, _server_doc.server_password );

				if ( _server_upload.is_wt_to_wt )
					resp = HttpRequest( UrlAppendPath( _server_upload.http_server_url, '/exc/put_data_package.html' ) , 'post', undefined, _post_param );
				else
					resp = HttpRequest( _server_upload.http_server_url, 'post', undefined, _post_param );

				tools.add_report( _report_id, 'Data sending: OK.' );
				bRes = true;
			}
			catch ( poi )
			{
				tools.add_report( _report_id, poi );
				throw poi;
			}
			return bRes;
	"/>



	<date_str PROPERTY="1" PARAM="_cur_date" EXPR="
		try
		{
			_cur_date;
		}
		catch ( dse )
		{
			_cur_date = Date();
		}
		return Year( _cur_date ) + '_' + StrInt( Month( _cur_date ), 2 ) + '_' + StrInt( Day( _cur_date ), 2 ) + '_' +StrInt( Hour( _cur_date ), 2 ) + '_' + StrInt( Minute( _cur_date ), 2 );
	"/>



	<uni_process_package PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sUrlPackageParam" PARAM="fldFormParam" EXPR="
			oRes = ({ 'error': 0, 'error_text': '', 'progress_count': 0, 'list_count': 0 });

			sSuffix = StrLowerCase( UrlPathSuffix( sUrlPackageParam ) );
			if ( sSuffix == '.zip' )
			{
				if ( fldFormParam.temp_package_url.HasValue )
				{
					sUrlPackageParam = UrlAppendPath( fldFormParam.temp_package_url, 'desc.xml' );
				}

				paramForm = tools.process_package( sUrlPackageParam, fldFormParam.download_packages );
				sErrorText = tools.get_param_error_text( paramForm );
				if ( sErrorText != null )
				{
					oRes.error = 1;
					oRes.error_text = sErrorText;
				}
				oRes.progress_count = paramForm.process_package.progress_count;
				oRes.list_count = paramForm.process_package.list_count;
			}
			else if ( sSuffix == '.xml' )
			{
				oRes.list_count = 1;
				if ( tools.package_process( sUrlPackageParam, 'objects' ) )
				{
					oRes.progress_count = 1;
				}
				else
				{
					oRes.error = 1;
				}
			}

			return oRes;
	"/>

	<process_package PROPERTY="1" PARAM="_url" PARAM="fldPackagesValidParam" PARAM="bUpdateObjects" EXPR="
			try
			{
				if ( fldPackagesValidParam == '' )
					throw 'no_param';
			}
			catch ( err )
			{
				fldPackagesValidParam = null;
			}
			try
			{
				bUpdateObjects = tools_web.is_true( bUpdateObjects );
			}
			catch ( err )
			{
				bUpdateObjects = true;
			}
			_temp_dir = 'x-local://custom';
			bDesc = false;
			sSuffix = StrLowerCase( UrlPathSuffix( _url ) );
			if ( sSuffix == '.zip' )
			{
				try
				{
					_temp_dir = ObtainTempFile();
					CreateDirectory( _temp_dir );
				}
				catch(_x_)
				{
					_temp_dir = 'x-local://Temp1';
					if ( ! IsDirectory( _temp_dir ) )
						CreateDirectory( _temp_dir );
					_temp_dir += '/' + Random( 1111111111, 9999999999 );
					CreateDirectory( _temp_dir );
				}
				tools.zip_extract( _url, _temp_dir );
				_url = UrlAppendPath( _temp_dir, 'desc.xml' );
			}
			else if ( sSuffix == '.xml' )
			{
				bDesc = true;
				_temp_dir = UrlParent( _url );
			}

			paramForm = OpenNewDoc( 'x-local://wtv/wtv_form_func_params.xmd' ).TopElem;

			if ( tools.file_url_exists( _url ) )
			{
				packageArray = OpenDoc( _url, 'form=wtv_form_download_packages.xmd' ).TopElem;
				paramForm.process_package.list_count = packageArray.ChildNum;

				counter = 0;
				var sApplicationCode = '';
				var iApplicationID = null;
				fldDownloadPackage = ArrayOptFindByKey( packageArray, 'application', 'type' );
				if ( fldDownloadPackage != undefined )
				{
					sApplicationCode = fldDownloadPackage.id.Value;
				}
				for ( _package in ArraySort( packageArray, 'type', '+' ) )
				{
					if ( fldPackagesValidParam == null )
					{
						fldPackageChild = null;
					}
					else
					{
						fldPackageChild = fldPackagesValidParam.GetOptChildByKey( _package.id );
						if ( fldPackageChild == undefined )
							fldPackageChild = null;
						else if ( fldPackageChild.selected == false )
							continue;
					}

					//if ( ArrayOptFirstElem( XQuery( 'for $elem in download_packages where $elem/package_id = ' + _package.id.XQueryLiteral + ' return $elem' ) ) != undefined )
					//	continue;

					packageDoc = OpenNewDoc( 'x-local://wtv/wtv_download_package.xmd' );
					packageDoc.BindToDb( DefaultDb );
					if ( fldPackageChild != null )
					{
						fldPackageChild.application_code = sApplicationCode;
						fldPackageChild.application_id = iApplicationID;

						packageDoc.TopElem.selected_custom_templates = fldPackageChild.selected_custom_templates;
						packageDoc.TopElem.selected_roles = fldPackageChild.selected_roles;
					}
					packageDoc.TopElem.AssignElem( _package );
					packageDoc.TopElem.package_id = _package.id;
					packageDoc.TopElem.create_date = CurDate;
					packageDoc.TopElem.application_code = sApplicationCode;
					packageDoc.TopElem.application_id = iApplicationID;
					packageDoc.Save();

					oRes = tools.download_package( null, packageDoc.DocID, _temp_dir + '/' + _package.url, fldPackageChild, bUpdateObjects );
					if ( oRes.error == 0 )
					{
						if ( oRes.application_id != null )
						{
							iApplicationID = oRes.application_id;
						}
						counter++;
					}
				}

				paramForm.process_package.progress_count = counter;
			}
			else
			{
				paramForm.error_const = 'yjf599sd57';
			}

			try
			{
				if ( ! StrBegins( _temp_dir, 'x-local://custom/' ) )
				{
					DeleteDirectory( _temp_dir );
				}
			}
			catch ( cc )
			{
			}
			return paramForm;
	"/>

	<get_param_error_text PROPERTY="1" PARAM="_param_form" EXPR="
			if ( ! _param_form.error_text.HasValue &amp;&amp; ! _param_form.error_const.HasValue )
				return null;

			return _param_form.error_const.HasValue ? ms_tools.get_const( _param_form.error_const ) : _param_form.error_text;
	"/>




	<download_package_list PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="iExchangeSeverID" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'download_package_list', [ RValue( iExchangeSeverID ) ] );

			oRes = ({ 'error': 0, 'error_text': '', 'data_file_url': '', 'report_id': null });
			try
			{
				docExchangeSever = OpenDoc( UrlFromDocID( iExchangeSeverID ) );
				teExchangeSever = docExchangeSever.TopElem;

				iPackageID = Random( 1, 4000000000 );
				docActionReport = OpenNewDoc( 'x-local://wtv/wtv_action_report.xmd' );
				docActionReport.BindToDb( DefaultDb );
				docActionReport.TopElem.create_date = Date();
				docActionReport.TopElem.type = 'download_package_list';
				docActionReport.TopElem.exchange_server_id = iExchangeSeverID;
				iReportID = docActionReport.DocID;
				oRes.report_id = iReportID;
				docActionReport = tools.add_report( iReportID, 'Start downloading. Url of packages list: ' + teExchangeSever.download.http_server_url + '.', docActionReport );

				if ( teExchangeSever.download.use_basic_authenticate )
					SetHttpDefaultAuth( teExchangeSever.code, teExchangeSever.server_password );

				if ( teExchangeSever.download.is_wt_to_wt )
					_response = HttpRequest( UrlAppendPath( teExchangeSever.download.http_server_url, '/exc/get_update_list.html' ) );
				else
					_response = HttpRequest( teExchangeSever.download.http_server_url );

				docActionReport = tools.add_report( iReportID, 'Package list downloading: OK.', docActionReport );

				fldPackages = OpenDocFromStr( _response.Body, 'form=x-local://wtv/wtv_form_download_packages.xmd' ).TopElem;
				docActionReport = tools.add_report( iReportID, 'Package list opening: OK. List contains ' + fldPackages.ChildNum + ' items.', docActionReport );

				counter_all = 0;
				counter = 0;
				for ( fldPackageElem in fldPackages )
				{
					if ( ArrayOptFirstElem( XQuery( 'for $elem in download_packages where $elem/package_id = \'' + fldPackageElem.id + '\' and $elem/status != \'init\' return $elem' ) ) != undefined )
						continue;

					docDownloadPackage = OpenNewDoc( 'x-local://wtv/wtv_download_package.xmd' );
					docDownloadPackage.BindToDb( DefaultDb );
					docDownloadPackage.TopElem.AssignElem( fldPackageElem );
					docDownloadPackage.TopElem.package_id = fldPackageElem.id;
					docDownloadPackage.TopElem.exchange_server_id = iExchangeSeverID;
					docDownloadPackage.TopElem.local_file_url = '';
					docDownloadPackage.TopElem.create_date = Date();
					docDownloadPackage.Save();
					counter_all++;

					oRes = tools.download_package( iExchangeSeverID, docDownloadPackage.DocID );
					if ( oRes.error == 0 )
						counter++;
				}

				docActionReport = OpenDoc( UrlFromDocID( iReportID ) );
				docActionReport.TopElem.completed = counter == counter_all;
				docActionReport = tools.add_report( iReportID, 'End downloading package list. Package list processing: OK. ' + counter_all + ' new, ' + counter + ' processed items.', docActionReport );

				docExchangeSever = OpenDoc( UrlFromDocID( iExchangeSeverID ) );
				docExchangeSever.TopElem.last_download_date = Date();
				if ( docActionReport.TopElem.server_version.HasValue )
					docExchangeSever.TopElem.server_version = docActionReport.TopElem.server_version;
				docExchangeSever.Save();
			}
			catch ( err )
			{
				tools.add_report( iReportID, err );
				oRes.error = 500;
				oRes.error_text = '' + err;
			}
			return oRes;
	"/>


	<download_package PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="iExchangeSeverID" PARAM="iPackageID" PARAM="sTempUrlParam" PARAM="fldPackageValidParam" PARAM="bUpdateObjects" EXPR="
			sTempPathSuffix = '.zip';
			iExchangeSeverID = OptInt( iExchangeSeverID, null );
			try
			{
				sTempUrlParam;
				bIsLocal = true;
				sTempPathSuffix = UrlPathSuffix( sTempUrlParam );
			}
			catch ( err )
			{
				sTempUrlParam = '';
				bIsLocal = iExchangeSeverID == null;
			}
			try
			{
				bUpdateObjects = tools_web.is_true( bUpdateObjects )
			}
			catch ( ewq )
			{
				bUpdateObjects = false;
			}

			if ( ! LdsIsServer &amp;&amp; ! bIsLocal )
				return CallServerMethod( 'tools', 'get_log_email_errors', [ RValue( dtLastDateParam ),  ] );

			try
			{
				if ( fldPackageValidParam == '' || fldPackageValidParam == undefined )
					throw 'no_param';
			}
			catch( err )
			{
				fldPackageValidParam = null;
			}

			oRes = ({ 'error': 0, 'error_text': '', 'data_file_url': '', 'application_id': null });
			try
			{
				docDownloadPackage = OpenDoc( UrlFromDocID( iPackageID ) );
				teDownloadPackage = docDownloadPackage.TopElem;

				docActionReport = OpenNewDoc( 'x-local://wtv/wtv_action_report.xmd' );
				docActionReport.BindToDb( DefaultDb );
				docActionReport.TopElem.create_date = Date();
				docActionReport.TopElem.type = 'download_package';
				docActionReport.TopElem.exchange_server_id = iExchangeSeverID;
				iReportID = docActionReport.DocID;
				docActionReport = tools.add_report( iReportID, 'Load start. Package ID: ' + iPackageID + '. Package url: ' + teDownloadPackage.url + '.', docActionReport );

				if ( ! bIsLocal )
				{
					teExchangeSever = OpenDoc( UrlFromDocID( iExchangeSeverID ) ).TopElem;

					if ( teExchangeSever.download.use_basic_authenticate )
						SetHttpDefaultAuth( teExchangeSever.code, teExchangeSever.server_password );

					oResponse = HttpRequest( StrBegins( teDownloadPackage.url, '/' ) ? UrlAppendPath( UrlAppendPath( teExchangeSever.download.http_server_url, '/exc/' ), teDownloadPackage.url ) : teDownloadPackage.url );
					docActionReport = tools.add_report( iReportID, 'Package loading: OK.', docActionReport );
				}

				_cur_date = teDownloadPackage.package_date.HasValue ? teDownloadPackage.package_date.Value : Date();
				docDownloadPackage.TopElem.package_date = _cur_date;
				docDownloadPackage.Save();

				sDateCore = tools.date_str() + '_' + iPackageID + sTempPathSuffix;
				sPackageUrl = 'x-local://' + DefaultDb + '/download_data/download_' + sDateCore;
				switch ( teDownloadPackage.type )
				{
					case 'code_update':
					case 'objects':
						sPackageUrl = 'x-local://' + DefaultDb + '/updates/update_' + sDateCore;
						break;
				}

				if ( bIsLocal )
				{
					if ( sTempUrlParam != '' )
					{
						if ( StrBegins( sTempUrlParam, 'x-local://custom/' ) )
						{
							sPackageUrl = sTempUrlParam;
						}
						else
						{
							tools.copy_url( sPackageUrl, sTempUrlParam );
						}
					}
				}
				else
				{
					oResponse.SaveToFile( sPackageUrl );
				}

				docDownloadPackage.TopElem.download_date = Date();
				docDownloadPackage.TopElem.local_file_url = sPackageUrl;
				docDownloadPackage.TopElem.status = 'download';
				if ( fldPackageValidParam != null )
					docDownloadPackage.TopElem.AssignElem( fldPackageValidParam );
				docDownloadPackage.Save();
				docActionReport = tools.add_report( iReportID, 'Package saving: OK. Package file: ' + sPackageUrl + '.', docActionReport );
				oRes.data_file_url = sPackageUrl;
				Sleep( 500 );
				if ( CallServerMethod( 'tools', 'package_process', [ RValue( sPackageUrl ), RValue( teDownloadPackage.type ), null, RValue( iReportID ), null, docDownloadPackage.DocID, bUpdateObjects, teDownloadPackage.base_url ] ) == null )
					throw 'Package process falied.';

				docDownloadPackage = OpenDoc( UrlFromDocID( docDownloadPackage.DocID ) );
				docDownloadPackage.TopElem.status = 'process';
				docDownloadPackage.Save();

				if ( docDownloadPackage.TopElem.application_id.HasValue )
				{
					oRes.application_id = docDownloadPackage.TopElem.application_id.Value;
				}

				docActionReport = OpenDoc( UrlFromDocID( iReportID ) );
				docActionReport.TopElem.data_file_url = sPackageUrl;
				docActionReport.TopElem.completed = true;
				docActionReport = tools.add_report( iReportID, 'Package processing: OK.', docActionReport );
			}
			catch ( err )
			{
				tools.add_report( iReportID, err );
				oRes.error = 500;
				oRes.error_text = '' + err;
			}
			return oRes;
	"/>



	<package_process PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_path" PARAM="_type" PARAM="_source" PARAM="_report_id" PARAM="_exchange_server_id" PARAM="iDownloadPackageIDParam" PARAM="bUpdateObjects" PARAM="_base_url" EXPR="
			try
			{
				if ( _source.download.exchange_objects_type == 'all' )
				{
					_all = 'all';
					_sourse_array = common.exchange_object_types;
					_update_date = null;
				}
				else
				{
					_all = 'source';
					_sourse_array = _source.download.exchange_objects;
					_update_date = RValue(tools.get_exchange_date( _source.download, _source.last_download_date ));
				}
				_update_flag = _source.update_exist_package_obj;
				_proc_del_obj = _source.download.process_deleted_objects;
				_proc_cust_obj = _source.download.process_custom_templates;
				_proc_lists = _source.download.process_lists;
				_proc_access_roles = _source.download.process_access_roles;
				_auto_publish_test = _source.auto_publish_test;
				bTakeDestModificationDate = _source.download.take_dest_modification_date.Value;
			}
			catch ( cxz )
			{
				_all = 'setting';
				_sourse_array = common.exchange_object_types;
				_update_flag = global_settings.update_exist_package_obj;
				_update_date = null;
				_proc_del_obj = false;
				_proc_cust_obj = true;
				_proc_lists = true;
				_proc_access_roles = true;
				_auto_publish_test = false;
				bTakeDestModificationDate = false;
			}
			try
			{
				_report_id = Int( _report_id );
				docRep = null;
			}
			catch ( ewq )
			{
				_report_id = null;
			}
			try
			{
				_base_url;
			}
			catch ( ewq )
			{
				_base_url = null;
			}

			exchangeServerDoc = null;

			try
			{
				bUpdateObjects = tools_web.is_true( bUpdateObjects )
			}
			catch ( ewq )
			{
				bUpdateObjects = false;
			}
			try
			{
				_exchange_server_id = Int( _exchange_server_id )
			}
			catch ( ewq )
			{
				_exchange_server_id = null;
			}
			docDownloadPackage = null;
			iDownloadPackageLogCounter = 0;
			var sApplicationCode = '';
			var iApplicationID = null;
			try
			{
				iDownloadPackageIDParam = Int( iDownloadPackageIDParam );
				docDownloadPackage = OpenDoc( UrlFromDocID( iDownloadPackageIDParam ) );
				sApplicationCode = docDownloadPackage.TopElem.application_code.Value;
				iApplicationID = docDownloadPackage.TopElem.application_id.Value;
			}
			catch ( err )
			{
			}

			function update_filter( _text )
			{
				if ( _exchange_server_id == null )
					return _text;

				var _fx_string = String( Trim( _text ) );
				var _startindex = _fx_string.indexOf('{', 0);
				var _endindex = 0-1;
				var _field = '';
				while ( _startindex >= 0 )
				{
					_endindex = _fx_string.indexOf('}',_startindex);
					if ( _endindex < 0 )
						break;

					if ( exchangeServerDoc == null )
						exchangeServerDoc = OpenDoc( UrlFromDocID( _exchange_server_id ) ).TopElem;

					_field = _fx_string.slice( _startindex + 1, _endindex );
					_temp = eval( 'exchangeServerDoc.' + _field );
					_fx_string = StrReplace( _fx_string, '{' + _field + '}', _temp );
					_startindex = _fx_string.indexOf( '{', _startindex + StrLen( _temp ) );
				}

				return _fx_string;
			}

			_xquery_qual = '';
			_is_invariable = false;
			_filtred_len = 0;
			function get_filtred_array( _cur_array, _obj )
			{
				switch ( _all )
				{
					case 'all':
						_xquery_qual = Trim( _source.download.filter_text );
						_is_invariable = _source.download.is_invariable;
						break;

					case 'source':
						_xquery_qual = Trim( _obj.xquery_qual );
						_is_invariable = _obj.is_invariable;
						break;

					case 'setting':
						_xquery_qual = '';
						_is_invariable = false;
						break;
				}

				if ( _xquery_qual != '' )
					_cur_array = ArraySelect( _cur_array, update_filter( _xquery_qual ) );

				_filtred_len = ArrayCount( _cur_array );
				return _cur_array;
			}


			sUrlPathSuffix = StrLowerCase( UrlPathSuffix( _path ) );
			bSourceZip = sUrlPathSuffix == '.zip';
			switch ( _type )
			{
				case 'objects':
				case 'std_objects':
				{
					_rep_str = 'Import objects:';
					if ( bSourceZip )
					{
						sUrlTempDir = UrlAppendPath( FilePathToUrl( AppDirectoryPath() ), '/trash/temp/' + Random( 0, 1000000000 ) );
						tools.zip_extract( _path, sUrlTempDir );
						__sUpdatePath = UrlAppendPath( sUrlTempDir, '/update.xml' );
					}
					else
					{
						__sUpdatePath = _path;
					}
					formDoc = OpenDoc( __sUpdatePath ).TopElem;

					if ( _report_id != null &amp;&amp; formDoc.basic.server_version.HasValue )
					{
						docRep = OpenDoc( UrlFromDocID( Int( _report_id ) ) );
						docRep.TopElem.server_version = formDoc.basic.server_version;
						docRep.Save();
						_rep_str += '\n' + Date() + ' Version of exchange server: ' + formDoc.basic.server_version;
					}

					try
					{
						if ( formDoc.basic.last_upload_date.HasValue )
						{
							tempUpDate=OptDate(formDoc.basic.last_upload_date)
							if (tempUpDate!=undefined)
							{
								_source.last_download_date=Date(tempUpDate)
							}
						}
					}
					catch(ex)
					{
						try
						{
							_source.last_download_date=Date()
							_rep_str += '\nerror set last_download_date: ' +ex;
						}
						catch(ex)
						{
						}
					}


					for ( _obj in _sourse_array )
					{
						_catalog_name = _obj.PrimaryKey + 's';
						formObj = formDoc.OptChild( _catalog_name );
						if ( formObj == undefined )
							continue;
						_cur_len = formObj.ChildNum;
						if ( _cur_len == 0 )
							continue;

						_common_type = common.exchange_object_types.GetChildByKey( _obj.PrimaryKey );
						_rep_str += '\n' + Date() + ' ' + _common_type.title + ' [' + _obj.PrimaryKey + ']: ';

						formObj = get_filtred_array( formObj, _obj );

						counter = 0;
						new_counter = 0;
						update_counter = 0;
						skip_counter = 0;
						for ( fldFormObj in formObj )
						{
							try
							{
								_xquery = '';
								if ( fldFormObj.id.HasValue )
								{
									iFormObjID = Int( fldFormObj.id );
									sFormObjCode = '';
								}
								else
								{
									iFormObjID = null;
									sFormObjCode = String( fldFormObj.code );
								}
								teFormObj = OpenDocFromStr( fldFormObj.GetXml( { 'tabs': false } ), 'ui-text=1;form=' + tools.get_object_form_url( _obj.PrimaryKey, false ) ).TopElem;
								fldObject = undefined;
								if ( docDownloadPackage != null &amp;&amp; iFormObjID != null )
								{
									fldObject = ArrayOptFindByKey( docDownloadPackage.TopElem.objects, iFormObjID, 'id' );
									if ( fldObject != undefined &amp;&amp; ( fldObject.selected == false || fldObject.id_exists_type == 'skip' ) )
									{
										skip_counter++;
										counter++;
										continue;
									}
								}

								bIsStd = _type == 'std_objects' ? ( teFormObj.ChildExists( 'is_std' ) &amp;&amp; teFormObj.ChildExists( 'changed' ) ) : false;

								if ( fldObject != undefined &amp;&amp; fldObject.id_exists_type == 'new' )
								{
									_xquery = '[exists]';
									catObject = undefined;
								}
								else
								{
									if ( iFormObjID == null )
									{
										_xquery = 'for $elem in ' + _catalog_name + ' where $elem/code = ' + XQueryLiteral( sFormObjCode ) + ' return $elem';
									}
									else
									{
										_xquery = 'for $elem in ' + _catalog_name + ' where $elem/id = ' + iFormObjID + ' return $elem';
									}
									catObject = ArrayOptFirstElem( XQuery( _xquery ) );
								}
								if ( catObject != undefined )
								{
									iFormObjID = catObject.id.Value;
									if( bUpdateObjects || ( ( ! bTakeDestModificationDate || ! teFormObj.doc_info.modification.date.HasValue || catObject.modification_date &lt; teFormObj.doc_info.modification.date ) &amp;&amp; ( ( bIsStd &amp;&amp; catObject.is_std &amp;&amp; ! catObject.changed ) || ( bIsStd &amp;&amp; teFormObj.is_std &amp;&amp; catObject.is_std != teFormObj.is_std ) || ( _update_flag &amp;&amp; ( _update_date == null || ! teFormObj.doc_info.modification.date.HasValue || _update_date &lt;= teFormObj.doc_info.modification.date ) ) ) ) )
									{
										_doc = OpenDoc( UrlFromDocID( iFormObjID ) );
										_doc.WriteDocInfo = false;
										_doc.TopElem.AssignElem( teFormObj );
										if ( _is_invariable )
										{
											_doc.TopElem.doc_info.invariable = true;
										}
										if ( iApplicationID != null )
										{
											_doc.TopElem.doc_info.creation.app_instance_id = tools_app.get_str_app_instance_id( iApplicationID );
										}
										_doc.Save();
										update_counter++;
									}
								}
								else
								{
									_doc = tools.new_doc_by_name( _obj.PrimaryKey, false );
									_doc.WriteDocInfo = false;
									_doc.TopElem.AssignElem( teFormObj );
									if ( _is_invariable )
									{
										_doc.TopElem.doc_info.invariable = true;
									}
									if ( iApplicationID != null )
									{
										_doc.TopElem.doc_info.creation.app_instance_id = tools_app.get_str_app_instance_id( iApplicationID );
									}

									if ( _xquery == '[exists]' || iFormObjID == null )
										_doc.BindToDb( DefaultDb );
									else
										_doc.Url = UrlFromDocID( iFormObjID );
									_doc.Save();
									new_counter++;
								}

								counter++;
							}
							catch ( s )
							{
								_rep_str += '\nXQuery: ' + _xquery + '.\n' + s;
							}
						}

						_rep_str += counter + ' of ' + ( _xquery_qual == '' ? _cur_len : _filtred_len + ' (' + _cur_len + ' before filtering)' ) + ', new ' + new_counter + ', update ' + update_counter + ', skip ' + skip_counter + '.';
					}

					docRep = tools.add_report( _report_id, _rep_str );

					for ( _obj in _sourse_array )
					{
						_catalog_name = _obj.PrimaryKey + 's';
						fldFormObjs = formDoc.OptChild( _catalog_name );
						if ( fldFormObjs != undefined &amp;&amp; fldFormObjs.ChildNum != 0 )
						{
							curElemArray = get_filtred_array( fldFormObjs, _obj );
							curElemArrayNum = ArrayCount( curElemArray );
							if ( curElemArrayNum != 0 )
							{
								switch ( _catalog_name )
								{
									case 'collaborators':
										fldSourcePosition =  _sourse_array.GetOptChildByKey( 'position' );
										fldFormPositions = formDoc.OptChild( 'positions' );
										if ( fldSourcePosition != undefined &amp;&amp; fldFormPositions != undefined )
										{
											curPositionArray = get_filtred_array( fldFormPositions, fldSourcePosition );
											curPositionArrayCount = ArrayCount( curPositionArray );
											if ( curPositionArrayCount != 0 )
											{
												_save_counter = 0;
												for ( curElem in curElemArray )
												{
													_doc = OpenDoc( UrlFromDocID( Int( curElem.id ) ) );
													_doc.WriteDocInfo = false;
													_doc.Save();
													_save_counter++;
												}
												docRep = tools.add_report( _report_id, 'Postprocessing &quot;collaborators&quot;: OK. Resaved ' + _save_counter + ' of ' + curPositionArrayCount + ' objects.', docRep );
											}
										}
										break;

									case 'active_learnings':
									{
										_delete_counter = 0;
										_all_counter = 0;
										xarrLearnings = tools.xquery( 'for $elem in learnings where MatchSome( $elem/active_learning_id, (' + ArrayMerge( curElemArray, 'id', ',' ) + ') ) return $elem/id, $elem/__data' );
										for ( catLearningElem in xarrLearnings )
										{
											teLearning = OpenDoc( UrlFromDocID( catLearningElem.id ) ).TopElem;
											if ( ! teLearning.active_learning_deleted )
											{
												continue;
											}
											try
											{
												_all_counter++;
												DeleteDoc( UrlFromDocID( teLearning.active_learning_id ), ! global_settings.settings.save_deleted_in_trash );
												_delete_counter++;
											}
											catch ( dd )
											{
											}
										}

										docRep = tools.add_report( _report_id, 'Postprocessing &quot;active_learnings&quot;: OK. Deleted ' + _delete_counter + ' of ' + _all_counter + ' active course learnings.', docRep );
										break;
									}

									case 'active_test_learnings':
									{
										_delete_counter = 0;
										_all_counter = 0;
										xarrLearnings = tools.xquery( 'for $elem in test_learnings where MatchSome( $elem/active_test_learning_id, (' + ArrayMerge( curElemArray, 'id', ',' ) + ') ) return $elem/id, $elem/__data' );
										for ( catLearningElem in xarrLearnings )
										{
											teLearning = OpenDoc( UrlFromDocID( catLearningElem.id ) ).TopElem;
											if ( ! teLearning.active_test_learning_deleted )
											{
												continue;
											}
											try
											{
												_all_counter++;
												DeleteDoc( UrlFromDocID( teLearning.active_test_learning_id ), ! global_settings.settings.save_deleted_in_trash );
												_delete_counter++;
											}
											catch ( dd )
											{
											}
										}

										docRep = tools.add_report( _report_id, 'Postprocessing &quot;active_learnings&quot;: OK. Deleted ' + _delete_counter + ' of ' + _all_counter + ' active course learnings.', docRep );
										break;
									}

									case 'learnings':
										_delete_counter = 0;
										_all_counter = 0;
										for ( curElem in curElemArray )
											if ( tools_web.is_true( curElem.OptChild( 'active_learning_deleted' ) ) )
												try
												{
													_all_counter++;
													iALID = OptInt( curElem.OptChild( 'active_learning_id' ) );
													if ( iALID == undefined )
														continue;
													DeleteDoc( UrlFromDocID( iALID ), ! global_settings.settings.save_deleted_in_trash );
													_delete_counter++;
												}
												catch ( dd )
												{
												}

										docRep = tools.add_report( _report_id, 'Postprocessing &quot;learnings&quot;: OK. Deleted ' + _delete_counter + ' of ' + _all_counter + ' active course learnings.', docRep );
										break;

									case 'test_learnings':
										_delete_counter = 0;
										_all_counter = 0;
										for ( curElem in curElemArray )
											if ( tools_web.is_true( curElem.OptChild( 'active_test_learning_deleted' ) ) )
												try
												{
													_all_counter++;
													iALID = OptInt( curElem.OptChild( 'active_test_learning_id' ) );
													if ( iALID == undefined )
														continue;
													DeleteDoc( UrlFromDocID( iALID ), ! global_settings.settings.save_deleted_in_trash );
													_delete_counter++;
												}
												catch ( dd )
												{
												}

										docRep = tools.add_report( _report_id, 'Postprocessing &quot;test_learnings&quot;: OK. Deleted ' + _delete_counter + ' of ' + _all_counter + ' active test learnings.', docRep );
										break;

									case 'assessments':
										_publish_counter = 0;
										if ( _auto_publish_test )
										{
											for ( curElem in curElemArray )
											{
												iID = OptInt( curElem.OptChild( 'id' ) );
												if ( iID == undefined )
													continue;

												oRes = qti_tools.pulish_assessment( iID );
												if ( oRes.error == 0 )
													_publish_counter++;
											}
											docRep = tools.add_report( _report_id, 'Postprocessing &quot;' + _catalog_name + '&quot;: OK. Publish ' + _publish_counter + ' of ' + curElemArrayNum + ' tests.', docRep );
										}
										break;

									case 'request_types':
									case 'response_types':
									case 'custom_reports':
										_first_url = 'x-local://' + DefaultDb + '/lists/wtv_disp_object_blocks.xml';
										try
										{
											_disp_object_blocks = OpenDoc( _first_url );
										}
										catch ( hh )
										{
											_disp_object_blocks = OpenNewDoc( 'x-local://wtv/wtv_disp_object_blocks.xmd' );
											_disp_object_blocks.Url = _first_url;
										}

										for ( curElem in curElemArray )
										{
											iID = OptInt( curElem.OptChild( 'id' ) );
											if ( iID == undefined )
												continue;
											if ( ! curElem.ChildExists( 'disp_block' ) || ! curElem.disp_block.ChildExists( 'access_block_type' ) )
												continue;
											tools.disp_block_filling_by_source( curElem, curElem.disp_block, _disp_object_blocks.TopElem, iID );
										}

										_disp_object_blocks.Save();
										docRep = tools.add_report( _report_id, 'Postprocessing &quot;' + _catalog_name + '&quot;: OK.', docRep );
										break;

									case 'resources':
										_all_counter = 0;
										_saved_counter = 0;
										for ( curElem in curElemArray )
											try
											{
												_all_counter++;
												iID = OptInt( curElem.OptChild( 'id' ) );
												if ( iID == undefined )
													continue;
												docResourceTemp = OpenDoc( UrlFromDocID( iID ) );
												if ( docResourceTemp.TopElem.save_data() )
												{
													docResourceTemp.Save();
													_saved_counter++;
												}
											}
											catch ( err )
											{
											}

										docRep = tools.add_report( _report_id, 'Postprocessing &quot;resources&quot;: OK. Saved to DataBase ' + _saved_counter + ' of ' + _all_counter + ' resource files.', docRep );
										break;

									case 'notifications':
										iAllCounter = 0;
										iSavedCounter = 0;
										for ( curElem in curElemArray )
										{
											iAllCounter++;
											try
											{
												iID = OptInt( curElem.OptChild( 'id' ) );
												if ( iID == undefined )
													continue;
												bNeedSave = false;
												docNotification = OpenDoc( UrlFromDocID( iID ) );
												for ( fldRecipientElem in docNotification.TopElem.recipients )
													if ( StrContains( fldRecipientElem.recipient_type, 'person_in_doc' ) )
													{
														fldRecipientElem.recipient_type = StrReplace( fldRecipientElem.recipient_type, 'person_in_doc', 'in_doc' );
														bNeedSave = true;
													}
												if ( bNeedSave )
												{
													docNotification.Save();
													iSavedCounter++
												}
											}
											catch ( err )
											{
											}
										}
										docRep = tools.add_report( _report_id, 'Postprocessing &quot;notifications&quot;: OK. Saved to DataBase ' + iSavedCounter + ' of ' + iAllCounter + ' resource files.', docRep );
										break;

									case 'doc_types':
										aRegisterLine = new Array();
										for ( curElem in curElemArray )
										{
											iID = '';
											try
											{
												iID = OptInt( curElem.OptChild( 'id' ) );
												if ( iID == undefined )
													continue;
												_curDoc = OpenDoc( UrlFromDocID( iID ) );
												if ( ! tools.generate_doc_type_xmds( _curDoc.TopElem, _curDoc.DocID ) )
												{
													docRep = tools.add_report( _report_id, ms_tools.get_const('oshibkipriregis'), docRep );
												}
												_curDoc.TopElem.is_crave_for_reboot = true;
												_curDoc.Save();
											}
											catch(_ogo_)
											{
												sName = curElem.OptChild( 'name' );
												docRep = tools.add_report( _report_id, 'Postprocessing &quot;doc_type [' + ( sName == undefined ? iID : sName ) + ']&quot;: Error.' + _ogo_, docRep );
											}
										}
										docRep = tools.add_report( _report_id, 'Postprocessing &quot;doc_types&quot;: OK.', docRep );
										break;
								}
							}
						}
					}

					fldFormLists = formDoc.OptChild( 'lists' );
					if ( _proc_lists &amp;&amp; fldFormLists != undefined )
					{
						fldFormLists = OpenDocFromStr( fldFormLists.GetXml( { 'tabs': false } ), 'ui-text=1;form=x-local://wtv/wtv_lists.xmd' ).TopElem;
						_rep_str = String();
						_all_lists_counter = 0;
						for ( fldFormListElem in fldFormLists )
						{
							if ( fldFormListElem.ChildNum == 0 )
								continue;
							if ( docDownloadPackage != null &amp;&amp; ArrayOptFind( docDownloadPackage.TopElem.lists, 'field==' + CodeLiteral( fldFormListElem.Name ) + '&amp;&amp;selected==false' ) != undefined )
								continue;

							counter = 0;
							_cur_list = lists.Child( fldFormListElem.Name );
							for ( _list_elem in fldFormListElem )
								if ( _update_flag || ! _cur_list.ChildByKeyExists( _list_elem.PrimaryKey ) )
								{
									_child = _cur_list.ObtainChildByKey( _list_elem.PrimaryKey );
									_child.AssignElem( _list_elem );
									counter++;
								}

							_rep_str += Date() + ' List &quot;' + fldFormListElem.Name + '&quot;: ' + counter + '.\n';
							_all_lists_counter += counter;
						}
						if ( _all_lists_counter != 0 )
							lists.Doc.Save();  //  RUN ONLY BY SERVER

						docRep = tools.add_report( _report_id, _rep_str.slice( 20, StrLen( _rep_str ) - 2 ), docRep );
					}

					fldFormDeleted = formDoc.OptChild( 'deleted_objects' );
					if ( _proc_del_obj &amp;&amp; fldFormDeleted != undefined )
					{
						counter = 0;
						skip_counter = 0;
						_cur_len = fldFormDeleted.ChildNum;
						for ( fldFormDelElem in fldFormDeleted )
						{
							try
							{
								iFormDelID = Int( fldFormDelElem.id );
								dtFormDelDate = Date( fldFormDelElem.del_date );
							}
							catch ( e )
							{
								continue;
							}

							if ( docDownloadPackage != null &amp;&amp; ArrayOptFind( docDownloadPackage.TopElem.deleted_objects, 'PrimaryKey==' + iFormDelID + '&amp;&amp;selected==false' ) != undefined )
							{
								skip_counter++;
								counter++;
								continue;
							}

							if ( _update_date == null || dtFormDelDate == null || _update_date &lt; dtFormDelDate )
								try
								{
									DeleteDoc( UrlFromDocID( iFormDelID ) );
								}
								catch ( dd )
								{
								}
						}
						docRep = tools.add_report( _report_id, 'Deleted objects: ' + counter + ' of ' + _cur_len + ', skip ' + skip_counter + '.', docRep );
					}

					if ( docDownloadPackage != null &amp;&amp; docDownloadPackage.TopElem.selected_custom_templates == false )
						_proc_cust_obj = false;

					fldFormCustom = formDoc.OptChild( 'custom_templates' );
					if ( _proc_cust_obj &amp;&amp; fldFormCustom != undefined )
					{
						fldFormCustom = OpenDocFromStr( fldFormCustom.GetXml( { 'tabs': false } ), 'ui-text=1;form=x-local://wtv/wtv_custom_templates.xmd' ).TopElem;

						_cur_len = fldFormCustom.ChildNum;
						counter = tools.obtain_custom_templates( null, fldFormCustom );

						if ( counter &gt; 0 )
							ms_tools.obtain_shared_list_elem( 'custom_templates', null, custom_templates );

						docRep = tools.add_report( _report_id, 'Custom templates: ' + counter + ' of ' + _cur_len + '.', docRep );
					}

					if ( docDownloadPackage != null &amp;&amp; docDownloadPackage.TopElem.selected_roles == false )
						_proc_access_roles = false;

					fldFormRole = formDoc.OptChild( 'access_roles' );
					if ( _proc_access_roles &amp;&amp; fldFormRole != undefined )
					{
						fldFormRole = OpenDocFromStr( fldFormRole.GetXml( { 'tabs': false } ), 'ui-text=1;form=x-local://wtv/wtv_access_roles.xmd' ).TopElem;

						_cur_len = fldFormRole.ChildNum;
						counter = tools.obtain_access_roles( null, fldFormRole );

						if ( counter &gt; 0 )
							access_roles.Doc.Save();  // RUN ONLY BY SERVER

						docRep = tools.add_report( _report_id, 'Access roles: ' + counter + ' of ' + _cur_len + '.', docRep );
					}

					if ( bSourceZip )
					{
						if ( ! StrBegins( sUrlTempDir, 'x-local://custom/' ) )
						{
							try
							{
								DeleteDirectory( sUrlTempDir );
							}
							catch ( err )
							{
								alert( err );
							}
						}
					}

					return formDoc;
					break;
				}

				case 'courses':
				{
					if ( ! IsDirectory( global_settings.courses_path ) )
						CreateDirectory( global_settings.courses_path );

					tools.zip_extract( _path, global_settings.courses_path );

					if ( _report_id != null )
						tools.add_report( _report_id, 'Courses unpacking: OK.' );
					break;
				}

				case 'web':
				{
					tools.zip_extract( _path, 'x-local://wt/web/' );

					if ( _report_id != null )
						tools.add_report( _report_id, 'Web-files unpacking: OK.' );
					break;
				}
				case 'custom_file':
				{
					sBaseUrl = _base_url;

					if ( bSourceZip )
					{
						tools.zip_extract( _path, sBaseUrl );
					}
					else
					{
						tools.copy_url( _path, UrlAppendPath( sBaseUrl, UrlFileName( _path ) ) );
					}

					if ( _report_id != null )
					{
						tools.add_report( _report_id, 'Programm code unpacking: OK.' );
					}
					break;
				}

				case 'code_update':
				{
					sBaseUrl = 'x-local://wtv/';
					if ( sApplicationCode != '' )
					{
						sBaseUrl = 'x-local://applications/';
						ObtainDirectory( sBaseUrl );
						sBaseUrl += sApplicationCode + '/';
					}
					if ( bSourceZip )
					{
						tools.zip_extract( _path, sBaseUrl );
					}
					else
					{
						tools.copy_url( _path, UrlAppendPath( sBaseUrl, UrlFileName( _path ) ) );
					}

					if ( _report_id != null )
					{
						tools.add_report( _report_id, 'Programm code unpacking: OK.' );
					}
					break;
				}

				case 'application':
				{
					var teFormApplication = OpenDoc( _path ).TopElem;
					sApplicationCode = teFormApplication.code.Value;

					var docApplication = tools.obtain_doc_by_key( 'application', 'code', sApplicationCode );
					var sOrigVersion = docApplication.TopElem.version.Value;
					var sOrigPrevVersion = docApplication.TopElem.prev_version.Value;
					var fldOrigWvars = docApplication.TopElem.wvars.Clone();
					var fldOrigInstanceWvars = docApplication.TopElem.instance.wvars.Clone();

					docApplication.TopElem.AssignElem( teFormApplication );
					if ( sOrigPrevVersion == teFormApplication.version )
					{
						docApplication.TopElem.prev_version = sOrigPrevVersion;
					}

					if ( teFormApplication.ChildExists( 'wvars' ) )
					{
						docApplication.TopElem.wvars.AssignElem( fldOrigWvars );
						for ( fldWvarElem in teFormApplication.wvars )
						{
							if ( ! docApplication.TopElem.wvars.ChildByKeyExists( fldWvarElem.name ) )
							{
								docApplication.TopElem.wvars.AddChild().AssignElem( fldWvarElem );
							}
						}
					}

					if ( teFormApplication.ChildExists( 'instance' ) &amp;&amp; teFormApplication.instance.ChildExists( 'wvars' ) )
					{
						docApplication.TopElem.instance.wvars.AssignElem( fldOrigInstanceWvars );
						for ( fldWvarElem in teFormApplication.instance.wvars )
						{
							if ( ! docApplication.TopElem.instance.wvars.ChildByKeyExists( fldWvarElem.name ) )
							{
								docApplication.TopElem.instance.wvars.AddChild().AssignElem( fldWvarElem );
							}
						}
					}

					var sBaseUrl = 'x-local://applications/' + sApplicationCode + '/';
					for ( sFieldNameElem in [ 'list_xms_url', 'default_xms_url', 'library_url' ] )
					{
						if ( ! StrBegins( docApplication.TopElem.Child( sFieldNameElem ).Value, 'x-local://' ) )
						{
							docApplication.TopElem.Child( sFieldNameElem ).Value = UrlAppendPath( sBaseUrl, docApplication.TopElem.Child( sFieldNameElem ).Value );
						}
					}

					docApplication.Save();

					if ( docDownloadPackage != null )
					{
						docDownloadPackage.TopElem.application_id = docApplication.DocID;
						docDownloadPackage.Save();
					}
					break;
				}

				case 'global_settings':
				{
					teFormSettings = OpenDoc( _path ).TopElem;
					fldFormSettings = teFormSettings.OptChild( 'settings' );
					if ( fldFormSettings == undefined )
					{
						break;
					}

					bSave = false;
					for ( fldFormSettingElem in fldFormSettings )
					{
						fldGlobalChild = global_settings.settings.OptChild( fldFormSettingElem.Name );
						if ( fldGlobalChild == undefined )
						{
							continue;
						}

						if ( tools.is_simple_array_field( fldGlobalChild ) )
						{
							for ( fldFormSubElem in fldFormSettingElem )
							{
								fldGlobalSubChild = fldGlobalChild.AddChild();
								fldGlobalSubChild.AssignElem( fldFormSubElem );
								bSave = true;
							}
						}
						else if ( fldGlobalChild.ChildNum != 0 )
						{
							for ( fldFormSubElem in fldFormSettingElem )
							{
								fldGlobalSubChild = fldGlobalChild.OptChild( fldFormSubElem.Name );
								if ( fldGlobalSubChild == undefined )
								{
									continue;
								}
								if ( tools.is_simple_array_field( fldGlobalSubChild ) )
								{
									for ( fldFormSubChildElem in fldFormSubElem )
									{
										fldGlobalSubSubChild = fldGlobalSubChild.AddChild();
										fldGlobalSubSubChild.AssignElem( fldFormSubChildElem );
										bSave = true;
									}
								}
								else if ( fldGlobalSubChild.Value != fldFormSubElem.Value )
								{
									fldGlobalSubChild.Value = fldFormSubElem.Value;
									bSave = true;
								}
							}
						}
						else if ( fldGlobalChild.Value != fldFormSettingElem.Value )
						{
							fldGlobalChild.Value = fldFormSettingElem.Value;
							bSave = true;
						}
					}

					if ( bSave )
					{
						ms_tools.obtain_shared_list_elem( 'global_settings.settings', null, global_settings.settings );
					}
					break;
				}
			}

			return true;
	"/>



	<activate_course_to_person PROPERTY="1" PARAM="oPersonID" PARAM="_course_id" PARAM="_event_id" PARAM="_person_doc" PARAM="_education_plan_id" PARAM="_duration" PARAM="_start_learning_date" PARAM="dtLastLearningDateParam" PARAM="_group_id" PARAM="sEIDParam" PARAM="bSkipDismissedParam" EXPR="
			personID = OptInt( oPersonID );
			bObjectParam = personID == undefined;
			bSelfEnrolled = false;
			bSendNotification = true;
			if ( bObjectParam )
			{
				personID = Int( oPersonID.iPersonID );
				courseID = Int( oPersonID.iCourseID );
				sEIDParam = oPersonID.GetOptProperty( 'sEID', null );
				bSelfEnrolled = tools_web.is_true( oPersonID.GetOptProperty( 'self_enrolled', oPersonID.GetOptProperty( 'bSelfEnrolled' ) ) );
				if ( sEIDParam == '' || sEIDParam == undefined )
					sEID = null;
				dtLastLearningDateParam = oPersonID.GetOptProperty( 'dtLastLearningDate', '' );
				bSkipDismissedParam = oPersonID.GetOptProperty( 'bSkipDismissed' ) == true;
				if ( bSkipDismissedParam )
					personDoc = oPersonID.GetOptProperty( 'teCollaborator', OpenDoc( UrlFromDocID( personID ) ).TopElem );

				bMissOnlySuccessLearning = oPersonID.GetOptProperty( 'bMissOnlySuccessLearning' ) == true;
			}
			else
			{
				courseID = Int( _course_id );
				try
				{
					if ( sEIDParam == '' || sEIDParam == undefined )
						throw 'no_param';
				}
				catch ( err )
				{
					sEIDParam = null;
				}
				try
				{
					bSkipDismissedParam = bSkipDismissedParam == true;
				}
				catch ( err )
				{
					bSkipDismissedParam = false;
				}
				if ( bSkipDismissedParam )
				{
					try
					{
						if ( _person_doc == null || _person_doc == '' || _person_doc == undefined )
							throw 'no_doc';

						personDoc = _person_doc;
					}
					catch ( err )
					{
						personDoc = OpenDoc( UrlFromDocID( personID ) ).TopElem;
					}
				}
			}
			try
			{
				bMissOnlySuccessLearning = bMissOnlySuccessLearning == true;
			}
			catch ( err )
			{
				bMissOnlySuccessLearning = false;
			}

			if ( bSkipDismissedParam &amp;&amp; personDoc.is_dismiss )
				return null;

			activeLearningArray = XQuery( 'for $elem in active_learnings where $elem/person_id = ' + personID + ' and $elem/course_id = ' + courseID + ( sEIDParam == null ? '' : ' and $elem/code = ' + XQueryLiteral( sEIDParam ) ) + ' return $elem' );
			firstActiveLearning = ArrayOptFirstElem( activeLearningArray );
			if ( firstActiveLearning != undefined )
				return firstActiveLearning.id;

			try
			{
				if ( dtLastLearningDateParam != '' )
				{
					sWhere = dtLastLearningDateParam == null ? '' : ' and $elem/last_usage_date &gt; date(\'' + dtLastLearningDateParam + '\')';
					if( bMissOnlySuccessLearning )
						sWhere += ' and $elem/state_id = 4';
					learningArray = XQuery( 'for $elem in learnings where $elem/person_id = ' + personID + ' and $elem/course_id = ' + courseID + sWhere + ' return $elem' );
					firstLearning = ArrayOptFirstElem( learningArray );
					if ( firstLearning != undefined )
						return firstLearning.id;
				}
			}
			catch ( err )
			{
			}

			if ( bObjectParam )
			{
				if ( ! bSkipDismissedParam )
					personDoc = oPersonID.GetOptProperty( 'teCollaborator', OpenDoc( UrlFromDocID( personID ) ).TopElem );

				eventID = OptInt( oPersonID.GetOptProperty( 'iEventID' ), null );
				eventDoc = eventID == null ? null : oPersonID.GetOptProperty( 'teEvent', OpenDoc( UrlFromDocID( eventID ) ).TopElem );
				courseDoc = oPersonID.GetOptProperty( 'teCourse', OpenDoc( UrlFromDocID( courseID ) ).TopElem );
				duration = OptInt( oPersonID.GetOptProperty( 'iDuration' ), null );
				try
				{
					start_learning_date = Date( oPersonID.GetOptProperty( 'dtStartLearningDate' ) );
				}
				catch( err )
				{
					start_learning_date = null;
				}
				educationPlanID = OptInt( oPersonID.GetOptProperty( 'iEducationPlanID' ), null );
				groupID = OptInt( oPersonID.GetOptProperty( 'iGroupID' ), null );
				bCommenting = oPersonID.GetOptProperty( 'bCommenting' ) == true;
				bLogging = oPersonID.GetOptProperty( 'bLogging' ) == true;
				sComment = oPersonID.GetOptProperty( 'sComment', '' );
				bUseProctoring = oPersonID.GetOptProperty( 'bUseProctoring', courseDoc.use_proctoring );
				bSendNotification = tools_web.is_true(oPersonID.GetOptProperty( 'bSendNotification', bSendNotification ));
			}
			else
			{
				if ( ! bSkipDismissedParam )
				{
					try
					{
						if ( _person_doc == null || _person_doc == '' || _person_doc == undefined )
							throw 'no_doc';

						personDoc = _person_doc;
					}
					catch ( err )
					{
						personDoc = OpenDoc( UrlFromDocID( personID ) ).TopElem;
					}
				}

				try
				{
					eventID = Int( _event_id );
					try
					{
						if ( _event_doc == null || _event_doc == '' )
							throw 'no_doc';

						eventDoc = _event_doc;
					}
					catch ( err )
					{
						eventDoc = OpenDoc( UrlFromDocID( eventID ) ).TopElem;
					}
				}
				catch ( err )
				{
					eventID = null;
					eventDoc = null;
				}
				try
				{
					duration = Int( _duration );
				}
				catch( err )
				{
					duration = null;
				}
				try
				{
					start_learning_date = Date( _start_learning_date );
				}
				catch( err )
				{
					start_learning_date = null;
				}
				try
				{
					educationPlanID = Int( _education_plan_id );
				}
				catch ( err )
				{
					educationPlanID = null;
				}
				try
				{
					groupID = Int( _group_id );
				}
				catch ( err )
				{
					groupID = null;
				}
				courseDoc = OpenDoc( UrlFromDocID( courseID ) ).TopElem;
				bCommenting = false;
				bLogging = false;
				sComment = '';
				bUseProctoring = courseDoc.use_proctoring;
			}

			docLearning = OpenNewDoc( 'x-local://wtv/wtv_active_learning.xmd' );
			learningDoc = docLearning.TopElem;
			learningDoc.person_id = personID;
			learningDoc.course_id = courseID;
			learningDoc.education_plan_id = educationPlanID;

			if ( courseDoc.struct_type == 'dynamic' )
			{
			}
			else if ( courseDoc.struct_type == 'adaptive' &amp;&amp; courseDoc.library_url.HasValue )
			{
				oParams = ({
					'teCourse': courseDoc,
					'teActiveLearning': learningDoc
				});
				oRes = CallObjectMethod( OpenCodeLib( courseDoc.library_url ), 'GetCourseParts', [ oParams ] );
				learningDoc.parts.AssignElem( oRes.parts );
			}
			else
			{
				learningDoc.parts.AssignElem( courseDoc.parts );
				for ( fldPartElem in learningDoc.parts )
				{
					fldPartChild = courseDoc.parts.GetChildByKey( fldPartElem.PrimaryKey );
					sStudentData = '';
					sStudentData += fldPartChild.max_time_allowed.HasValue ? 'max_time_allowed=' + fldPartChild.max_time_allowed + '\r\n' : '';
					sStudentData += fldPartChild.time_limit_action.HasValue ? 'time_limit_action=' + fldPartChild.time_limit_action + '\r\n' : '';
					sStudentData += fldPartChild.mastery_score.HasValue ? 'mastery_score=' + fldPartChild.mastery_score + '\r\n' : '';
					if ( sStudentData != '' )
						fldPartElem.data_lesson.student_data = '[STUDENT_DATA]\r\n' + sStudentData;
					if ( fldPartElem.assessment_id.HasValue )
					{
						tools.common_filling( 'assessment', fldPartElem, fldPartElem.assessment_id );
						if ( fldPartChild.attempts_num.HasValue )
							fldPartElem.attempts_num = fldPartChild.attempts_num;
					}
					fldPartElem.use_proctoring = bUseProctoring;
				}
			}
			learningDoc.use_proctoring = bUseProctoring;

			tools.common_filling( 'course', learningDoc, courseID, courseDoc );
			tools.common_filling( 'collaborator', learningDoc, personID, personDoc );

			if ( eventID != null )
			{
				learningDoc.event_id = eventID;
				tools.common_filling( 'event', learningDoc, eventID, eventDoc );
			}


			if ( groupID != null )
			{
				learningDoc.group_id = groupID
			}

			if ( duration == 0 )
				learningDoc.duration.Clear();
			else if ( duration != null )
				learningDoc.duration = duration;

			if ( start_learning_date != null )
				learningDoc.start_learning_date = start_learning_date;

			learningDoc.max_score = courseDoc.max_score;
			learningDoc.base_url = courseDoc.base_url;
			learningDoc.score_sum_eval = courseDoc.score_sum_eval;
			learningDoc.max_end_date = learningDoc.calc_max_end_date;
			learningDoc.commenting = bCommenting;
			learningDoc.logging = bLogging;
			learningDoc.comment = sComment;
			learningDoc.is_self_enrolled = bSelfEnrolled;
			docLearning.BindToDb( DefaultDb );
			docLearning.Save();

			if ( courseDoc.price.HasValue &amp;&amp; personDoc.org_id.HasValue )
				tools.pay_courses( personDoc.org_id, courseDoc.price, '' );

			if ( ! courseDoc.not_use_default_notification && bSendNotification)
			{
				if( !bSelfEnrolled )
				{
					tools.create_notification( '30', docLearning.DocID );
				}
				tools.create_notification( '32', docLearning.DocID );
			}
			ms_tools.raise_system_event( 'common_activate_course', null, docLearning.DocID, docLearning );

			return docLearning;
	"/>

	<activate_test_to_person PROPERTY="1" PARAM="oPersonID" PARAM="_test_id" PARAM="_event_id" PARAM="_person_doc" PARAM="_test_doc" PARAM="_event_doc" PARAM="_duration" PARAM="_start_learning_date" PARAM="dtLastLearningDateParam" PARAM="_group_id" PARAM="_education_plan_id" PARAM="bSkipDismissedParam" EXPR="
			personID = OptInt( oPersonID );
			bObjectParam = personID == undefined;
			if ( bObjectParam )
			{
				personID = Int( oPersonID.iPersonID );
				assessmentID = Int( oPersonID.iAssessmentID );
				eventID = OptInt( oPersonID.GetOptProperty( 'iEventID' ), null );
				dtLastLearningDateParam = oPersonID.GetOptProperty( 'dtLastLearningDate', '' );
				bSkipDismissedParam = oPersonID.GetOptProperty( 'bSkipDismissed' ) == true;
				if ( bSkipDismissedParam )
					personDoc = oPersonID.GetOptProperty( 'teCollaborator', OpenDoc( UrlFromDocID( personID ) ).TopElem );

				bMissOnlySuccessLearning = oPersonID.GetOptProperty( 'bMissOnlySuccessLearning' ) == true;
			}
			else
			{
				assessmentID = Int( _test_id );
				try
				{
					eventID = OptInt( _event_id, null );
				}
				catch ( err )
				{
					eventID = null;
				}
				try
				{
					bSkipDismissedParam = bSkipDismissedParam == true;
				}
				catch ( err )
				{
					bSkipDismissedParam = false;
				}
				if ( bSkipDismissedParam )
				{
					try
					{
						if ( _person_doc == null || _person_doc == '' || _person_doc == undefined )
							throw 'no_doc';

						personDoc = _person_doc;
					}
					catch ( err )
					{
						personDoc = OpenDoc( UrlFromDocID( personID ) ).TopElem;
					}
				}
			}

			if ( bSkipDismissedParam &amp;&amp; personDoc.is_dismiss )
				return null;
			try
			{
				bMissOnlySuccessLearning = bMissOnlySuccessLearning == true;
			}
			catch ( err )
			{
				bMissOnlySuccessLearning = false;
			}
			firsActiveLearning = ArrayOptFirstElem( XQuery( 'for $elem in active_test_learnings where $elem/person_id = ' + personID + ' and $elem/assessment_id = ' + assessmentID + ' return $elem' ) );
			if ( firsActiveLearning != undefined )
				return firsActiveLearning.id;

			try
			{
				if ( dtLastLearningDateParam != '' )
				{
					sWhere = dtLastLearningDateParam == null ? '' : ' and $elem/last_usage_date &gt; date(\'' + dtLastLearningDateParam + '\')';
					if( bMissOnlySuccessLearning )
						sWhere += ' and $elem/state_id = 4';
					learningArray = XQuery( 'for $elem in test_learnings where $elem/person_id = ' + personID + ' and $elem/assessment_id = ' + assessmentID + sWhere + ' return $elem' );
					firstLearning = ArrayOptFirstElem( learningArray );
					if ( firstLearning != undefined )
						return firstLearning.id;
				}
			}
			catch ( err )
			{
			}

			var iProctorPreferID = null;
			if ( bObjectParam )
			{
				if ( ! bSkipDismissedParam )
					personDoc = oPersonID.GetOptProperty( 'teCollaborator', OpenDoc( UrlFromDocID( personID ) ).TopElem );

				eventDoc = eventID == null ? null : oPersonID.GetOptProperty( 'teEvent', OpenDoc( UrlFromDocID( eventID ) ).TopElem );
				assessmentDoc = oPersonID.GetOptProperty( 'teAssessment', OpenDoc( UrlFromDocID( assessmentID ) ).TopElem );
				duration = OptInt( oPersonID.GetOptProperty( 'iDuration' ), null );
				try
				{
					start_learning_date = Date( oPersonID.GetOptProperty( 'dtStartLearningDate' ) );
				}
				catch( err )
				{
					start_learning_date = null;
				}
				educationPlanID = OptInt( oPersonID.GetOptProperty( 'iEducationPlanID' ), null );
				groupID = OptInt( oPersonID.GetOptProperty( 'iGroupID' ), null );
				bSelfEnrolled = oPersonID.GetOptProperty( 'bSelfEnrolled' ) == true;
				sComment = oPersonID.GetOptProperty( 'sComment', '' );
				bUseProctoring = oPersonID.GetOptProperty( 'bUseProctoring', assessmentDoc.use_proctoring );
				iProctorPreferID = OptInt( oPersonID.GetOptProperty( 'iProctorPreferID', null ), null );
			}
			else
			{
				if ( ! bSkipDismissedParam )
				{
					try
					{
						if ( _person_doc == null || _person_doc == '' || _person_doc == undefined )
							throw 'no_doc';

						personDoc = _person_doc;
					}
					catch ( err )
					{
						personDoc = OpenDoc( UrlFromDocID( personID ) ).TopElem;
					}
				}

				try
				{
					eventDoc = OpenDoc( UrlFromDocID( eventID ) ).TopElem;
				}
				catch ( err )
				{
					eventID = null;
					eventDoc = null;
				}
				try
				{
					if ( _test_doc == null || _test_doc == '' )
						throw 'no_doc';

					assessmentDoc = _test_doc;
				}
				catch ( err )
				{
					assessmentDoc = OpenDoc( UrlFromDocID( assessmentID ) ).TopElem;
				}
				try
				{
					duration = Int( _duration );
				}
				catch( err )
				{
					duration = null;
				}
				try
				{
					start_learning_date = Date( _start_learning_date );
				}
				catch( err )
				{
					start_learning_date = null;
				}
				try
				{
					groupID = Int( _group_id );
				}
				catch ( err )
				{
					groupID = null;
				}
				try
				{
					educationPlanID = Int( _education_plan_id );
				}
				catch ( err )
				{
					educationPlanID = null;
				}
				bSelfEnrolled = false;
				sComment = '';
				bUseProctoring = assessmentDoc.use_proctoring;
			}

			docLearning = OpenNewDoc( 'x-local://wtv/wtv_active_test_learning.xmd' );
			learningDoc = docLearning.TopElem;
			learningDoc.person_id = personID;
			learningDoc.assessment_id = assessmentID;
			tools.common_filling( 'collaborator', learningDoc, personID, personDoc );
			tools.common_filling( 'assessment', learningDoc, assessmentID, assessmentDoc );
			learningDoc.use_proctoring = bUseProctoring;
			learningDoc.proctor_prefer_id = iProctorPreferID;
			learningDoc.is_self_enrolled = bSelfEnrolled;
			learningDoc.comment = sComment;
//			learningDoc.scales.AssignElem( assessmentDoc.scales );

			if ( groupID != null )
			{
				learningDoc.group_id = groupID;
			}

			if ( educationPlanID != null )
			{
				learningDoc.education_plan_id = educationPlanID;
			}

			if ( eventID != null )
			{
				learningDoc.event_id = eventID;
				tools.common_filling( 'event', learningDoc, eventID, eventDoc );
			}

			if ( duration == 0 )
				learningDoc.duration.Clear();
			else if ( duration != null )
				learningDoc.duration = duration;

			if ( start_learning_date != null )
				learningDoc.start_learning_date = start_learning_date;

			learningDoc.max_end_date = learningDoc.calc_max_end_date;
			docLearning.BindToDb( DefaultDb );
			docLearning.Save();

			if ( ! assessmentDoc.not_use_default_notification )
			{
				tools.create_notification( '31', docLearning.DocID );
				tools.create_notification( '33', docLearning.DocID );
			}

			ms_tools.raise_system_event( 'common_activate_test', null, docLearning.DocID, docLearning );
			return docLearning;
	"/>

	<activate_test_to_event ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="_even_id" PARAM="_test_id" PARAM="_doc_event" PARAM="_duration" PARAM="_start_learning_date" PARAM="_last_learning_date" PARAM="sActTypeParam" PARAM="bSkipDismissed" PARAM="bUseProctoring" PARAM="iProctorPreferID" PARAM="bActivateOnlyAssist" EXPR="
			try
			{
				if ( _doc_event == null || _doc_event == '' || _doc_event == undefined )
					throw 'no_doc';

				docEvent = _doc_event;
			}
			catch ( ee )
			{
				docEvent = OpenDoc( UrlFromDocID( _even_id ) );
			}
			try
			{
				duration = ( _duration == '' ? '' : Int( _duration ) );
			}
			catch(err)
			{
				duration = null;
			}
			try
			{
				start_learning_date = Date( _start_learning_date );
			}
			catch(err)
			{
				start_learning_date = null;
			}
			try
			{
				last_learning_date = Date( _last_learning_date );
			}
			catch(err)
			{
				last_learning_date = '';
			}
			try
			{
				sActTypeParam;
			}
			catch ( err )
			{
				sActTypeParam = 'all';
			}
			try
			{
				bSkipDismissed = tools_web.is_true( bSkipDismissed );
			}
			catch ( err )
			{
				bSkipDismissed = false;
			}
			try
			{
				bUseProctoring = tools_web.is_true( bUseProctoring );
			}
			catch ( err )
			{
				bUseProctoring = false;
			}
			try
			{
				bActivateOnlyAssist = tools_web.is_true( bActivateOnlyAssist );
			}
			catch ( err )
			{
				bActivateOnlyAssist = false;
			}

			try
			{
				iProctorPreferID = OptInt( iProctorPreferID, null );
			}
			catch ( err )
			{
				iProctorPreferID = null;
			}

			return docEvent.TopElem.activate_test( _test_id, null, duration, start_learning_date, last_learning_date, sActTypeParam, bSkipDismissed, bUseProctoring, iProctorPreferID, bActivateOnlyAssist );
	"/>

	<activate_course_to_event ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="_even_id" PARAM="_course_id" PARAM="_doc_event" PARAM="_duration" PARAM="_start_learning_date" PARAM="_last_learning_date" PARAM="bSkipDismissed" PARAM="bUseProctoring" PARAM="iProctorPreferID" PARAM="sComment" EXPR="
			try
			{
				if ( _doc_event == null || _doc_event == '' || _doc_event == undefined )
					throw 'no_doc';

				docEvent = _doc_event;
			}
			catch ( ee )
			{
				docEvent = OpenDoc( UrlFromDocID( _even_id ) );
			}
			try
			{
				if ( _duration != '' &amp;&amp; _duration != null )
					_duration = Int( _duration );
			}
			catch(err)
			{
				_duration = null;
			}
			try
			{
				_start_learning_date = Date( _start_learning_date );
			}
			catch(err)
			{
				_start_learning_date = null;
			}
			try
			{
				if ( _last_learning_date != '' &amp;&amp; _last_learning_date != null )
					_last_learning_date = Date( _last_learning_date );
			}
			catch(err)
			{
				_last_learning_date = '';
			}
			try
			{
				bUseProctoring = tools_web.is_true( bUseProctoring );
			}
			catch ( err )
			{
				bUseProctoring = false;
			}
			try
			{
				bSkipDismissed = tools_web.is_true( bSkipDismissed );
			}
			catch ( err )
			{
				bSkipDismissed = true;
			}
			try
			{
				iProctorPreferID = OptInt( iProctorPreferID, null );
			}
			catch ( err )
			{
				iProctorPreferID = null;
			}

			try
			{
				if ( sComment == null || sComment == undefined )
					throw 'no_comment';
			}
			catch ( ee )
			{
				sComment = '' ;
			}

			_counter = 0;
			for ( _person in docEvent.TopElem.collaborators )
				try
				{
					tools.activate_course_to_person( {
						'iPersonID': _person.PrimaryKey,
						'iCourseID': _course_id,
						'iEventID': docEvent.DocID,
						'iDuration': _duration,
						'dtStartLearningDate': _start_learning_date,
						'dtLastLearningDate': _last_learning_date,
						'bSkipDismissed': bSkipDismissed,
						'bUseProctoring': bUseProctoring,
						'iProctorPreferID': iProctorPreferID,
						'sComment': sComment
					} ).TopElem;
					_counter++;
				}
				catch ( ff )
				{
				}
			return _counter;
	"/>

	<activate_education_program_to_person PROPERTY="1" PARAM="_person_id" PARAM="_education_program_id" PARAM="_person_doc" PARAM="_education_program_doc" EXPR="
			personID = Int( _person_id );
			educationProgramID = Int( _education_program_id );
			try
			{
				if ( _person_doc == null || _person_doc == '' || _person_doc == undefined )
					throw 'no_doc';

				personDoc = _person_doc;
			}
			catch ( ee )
			{
				personDoc = OpenDoc( UrlFromDocID( personID ) ).TopElem;
			}
			try
			{
				if ( _education_program_doc == null || _education_program_doc == '' || _education_program_doc == undefined )
					throw 'no_doc';

				educationProgramDoc = _education_program_doc;
			}
			catch ( ee )
			{
				educationProgramDoc = OpenDoc( UrlFromDocID( educationProgramID ) ).TopElem;
			}

			successCounter = 0;
			for ( _education_method in educationProgramDoc.education_methods )
				try
				{
					educationMethodCatalog = _education_method.PrimaryKey.ForeignElem;
					if ( educationMethodCatalog.type == 'course' &amp;&amp; educationMethodCatalog.course_id.HasValue )
						try
						{
							res = tools.activate_course_to_person( personID, educationMethodCatalog.course_id, null, personDoc );
							res.TopElem;
							successCounter++;
						}
						catch ( err2 )
						{
						}
				}
				catch ( err )
				{
				}

			return successCounter;
	"/>




	<get_time_from_duration PROPERTY="1" PARAM="_duration" EXPR="
		return _duration == '' ? '' : String( _duration ).split( 'T' )[1];
	"/>

	<get_time_from_seconds PROPERTY="1" PARAM="_seconds" EXPR="
		iSeconds = OptInt ( _seconds );
		if ( iSeconds == undefined )
		{
			if ( StrContains( iSeconds, 'S' ) )
				return iSeconds;
			else
				return '';
		}

		return '' + ( iSeconds / 3600 ) + 'H' + ( ( iSeconds % 3600 ) / 60 ) + 'M' + ( iSeconds % 60 ) + 'S';
	"/>



	<delete_transaction PROPERTY="1" PARAM="_transaction_id" EXPR="
		Ps = OpenDoc( UrlFromDocID( _transaction_id ) ).TopElem;

		docTransacton = OpenNewDoc( 'wtv_transaction.xmd' );
		docTransacton.TopElem.org_id = Ps.org_id;
		docTransacton.TopElem.account_id = Ps.account_id;
		docTransacton.TopElem.object_id = Ps.object_id;
		docTransacton.TopElem.person_id = Ps.person_id;
		if ( docTransacton.TopElem.person_id.HasValue )
			tools.common_filling( 'collaborator', docTransacton.TopElem, docTransacton.TopElem.person_id );
		if ( docTransacton.TopElem.object_id.HasValue )
			tools.common_filling( 'object', docTransacton.TopElem, docTransacton.TopElem.object_id );
		docTransacton.TopElem.amount = Ps.amount;
		docTransacton.TopElem.direction = ( Ps.direction == 1 ? 2 : 1 );
		docTransacton.TopElem.comment = StrReplace( StrReplace( ms_tools.get_const('bw1leixwbg'), '{PARAM1}', Ps.code ), '{PARAM2}', Ps.date );
		docTransacton.BindToDb( DefaultDb );
		docTransacton.Save();

		if ( docTransacton.TopElem.account_id.HasValue )
		{
			docAccount = OpenDoc( UrlFromDocID( docTransacton.TopElem.account_id ) );
			docAccount.TopElem.balance = Ps.direction == 2 ? ( docAccount.TopElem.balance + Ps.amount ) : ( docAccount.TopElem.balance - Ps.amount );
			docAccount.Save();
		}

		return docTransacton.DocID;
	"/>



	<pay_new_transaction_by_object PROPERTY="1" PARAM="iAccountObjectIDParam" PARAM="sAccountCurrencyParam" PARAM="rSumParam" PARAM="sCommentParam" PARAM="iObjectIDParam" PARAM="iPersonIDParam" PARAM="changeBalance" EXPR="
		if ( OptInt( iAccountObjectIDParam ) == undefined || OptReal( rSumParam ) == undefined )
			return null;

		try
		{
			iPersonIDParam = OptInt( iPersonIDParam, null );
		}
		catch ( err )
		{
			iPersonIDParam = null;
		}

		try
		{
			changeBalance;
		}
		catch ( err )
		{
			changeBalance = true;
		}

		sAccountCurrency = sAccountCurrencyParam == undefined || sAccountCurrencyParam == null ? '' : sAccountCurrencyParam;
		catAccount = ArrayOptFirstElem( XQuery( 'for $elem in accounts where $elem/object_id = ' + iAccountObjectIDParam + ( sAccountCurrency == '' ? '' : ' and $elem/currency_type_id = ' + XQueryLiteral( String( sAccountCurrencyParam ) ) ) + ' return $elem' ) );
		if ( catAccount == undefined )
		{
			docAccount = OpenNewDoc( 'x-local://wtv/wtv_account.xmd' );
			docAccount.TopElem.status = 'active';
			docAccount.TopElem.object_id = iAccountObjectIDParam;
			tools.common_filling( 'object', docAccount.TopElem, iAccountObjectIDParam );
			docAccount.TopElem.currency_type_id = sAccountCurrency;
			docAccount.TopElem.name = docAccount.TopElem.object_name;
			docAccount.BindToDb( DefaultDb );
		}
		else
		{
			docAccount = OpenDoc( UrlFromDocID( catAccount.id ) );
		}

		docTransacton = OpenNewDoc( 'x-local://wtv/wtv_transaction.xmd' );
		docTransacton.TopElem.direction = rSumParam &gt;= 0 ? 1 : 2;
		docTransacton.TopElem.amount = docTransacton.TopElem.direction == 1 ? rSumParam : ( 0.0 - rSumParam );
		docTransacton.TopElem.comment = sCommentParam;
		docTransacton.TopElem.account_id = docAccount.DocID;
		try
		{
			if ( iObjectIDParam == null || iObjectIDParam == undefined || iObjectIDParam == '' )
				throw 'no_data';
			if( IsArray( iObjectIDParam ) )
			{
				for( iObject in iObjectIDParam )
					if( OptInt( iObject ) != undefined )
						docTransacton.TopElem.objects.ObtainByValue( OptInt( iObject ) );
				iObjectIDParam = Int( ArrayOptFirstElem( iObjectIDParam ) );
			}
			else if( OptInt( iObjectIDParam ) != undefined )
				docTransacton.TopElem.objects.ObtainByValue( OptInt( iObjectIDParam ) );
			docTransacton.TopElem.object_id = iObjectIDParam;
			tools.common_filling( 'object', docTransacton.TopElem, iObjectIDParam );
		}
		catch ( err )
		{
		}
		docTransacton.TopElem.person_id = iPersonIDParam;
		if ( docTransacton.TopElem.person_id.HasValue )
			tools.common_filling( 'collaborator', docTransacton.TopElem, docTransacton.TopElem.person_id );
		docTransacton.BindToDb( DefaultDb );
		docTransacton.Save();
		if( changeBalance )
			docAccount.TopElem.balance += rSumParam;
		docAccount.Save();
		try
		{
			iPersonDoc = curUser
		}
		catch( ex ){ iPersonDoc = null; }

		ms_tools.raise_system_event_env( 'common_create_transaction', {
			'iTransactionID': docTransacton.DocID,
			'teTransaction': docTransacton.TopElem,
			'curUserID': iPersonIDParam,
			'curUser': iPersonDoc,
			'iAccountID': docAccount.DocID,
			'teAccount': docAccount.TopElem,
		} );

		return docTransacton;
	"/>


	<pay_invoice PROPERTY="1" PARAM="_invoice_id"  PARAM="_doc_invoice" EXPR="
		try
		{
			if ( _doc_invoice == null || _doc_invoice == '' )
				throw 'no_doc';

			docInvoice = _doc_invoice;
		}
		catch ( err )
		{
			docInvoice = OpenDoc( UrlFromDocID( _invoice_id ) );
		}
/*
		if ( ! docInvoice.TopElem.request_id.HasValue )
		{
			docInvoice.TopElem.is_paid = true;
			docInvoice.Save();
			return null;
		}
*/
		docTransacton = OpenNewDoc( 'x-local://wtv/wtv_transaction.xmd' );
		docTransacton.TopElem.org_id = docInvoice.TopElem.org_id;
		docTransacton.TopElem.direction = 1;
		docTransacton.TopElem.amount = docInvoice.TopElem.amount;
		docTransacton.TopElem.comment = StrReplace( StrReplace( ms_tools.get_const('y8wgxmmsgv'), '{PARAM1}', docInvoice.TopElem.code ), '{PARAM2}', docInvoice.TopElem.date );

		if ( docTransacton.TopElem.account_id.HasValue )
		{
			docAccount = OpenDoc( UrlFromDocID( docTransacton.TopElem.account_id ) );
			docAccount.TopElem.balance = ( docAccount.TopElem.balance + docInvoice.TopElem.amount );
			docAccount.Save();

			docTransacton.BindToDb( DefaultDb );
			docTransacton.Save();

			docInvoice.TopElem.transaction_id = docTransacton.DocID;
			docInvoice.TopElem.is_paid = true;
			docInvoice.Save();

			return docInvoice;
		}
		else
		{
			return null;
		}
	"/>

	<pay_courses PROPERTY="1" PARAM="_org_id" PARAM="_amount" PARAM="_comment" EXPR="
		if ( _amount == null )
			return null;

		docTransacton = OpenNewDoc( 'x-local://wtv/wtv_transaction.xmd' );
		docTransacton.TopElem.org_id = _org_id;
		docTransacton.TopElem.direction = 2;
		docTransacton.TopElem.amount = _amount;

		try
		{
			docTransacton.TopElem.comment = _comment;
		}
		catch ( oo )
		{
		}

		if ( docTransacton.TopElem.account_id.HasValue )
		{
			docAccount = OpenDoc( UrlFromDocID( docTransacton.TopElem.account_id ) );
			docAccount.TopElem.balance = docAccount.TopElem.balance - _amount;
			docAccount.Save();

			docTransacton.BindToDb( DefaultDb );
			docTransacton.Save();

			return docTransacton.DocID;
		}
		else
		{
			return null;
		}
	"/>

	<set_account PROPERTY="1" PARAM="_org_id" PARAM="_amount" EXPR="
		docInvoice = OpenNewDoc( 'x-local://wtv/wtv_invoice.xmd' );
		docInvoice.TopElem.org_id = _org_id;
		docInvoice.TopElem.amount = _amount;
		docInvoice.TopElem.comment = ms_tools.get_const('tgh9313eka');
		docInvoice.BindToDb( DefaultDb );
		docInvoice.Save();

		return docInvoice.DocID;
	"/>


	<personal_pay PROPERTY="1" PARAM="_org_id" PARAM="_request_id" EXPR="
		requestDoc = OpenDoc( UrlFromDocID( _request_id ) ).TopElem;
		courseDoc = OpenDoc( UrlFromDocID( requestDoc.course_id ) ).TopElem;

		docInvoice = OpenNewDoc( 'x-local://wtv/wtv_invoice.xmd' );
		docInvoice.BindToDb( DefaultDb );
		docInvoice.TopElem.org_id = _org_id;
		docInvoice.TopElem.request_id = _request_id;
		_child = docInvoice.TopElem.courses.ObtainChildByKey( requestDoc.course_id );
		_child.price = courseDoc.price;
		_child.units_num = 1;
		docInvoice.TopElem.amount = docInvoice.TopElem.total_price;
		docInvoice.TopElem.comment = ms_tools.get_const('4hbthckc8v');
		docInvoice.Save();

		return docInvoice.DocID;
	"/>




	<create_notification PROPERTY="1" PARAM="oTypeParam" PARAM="iObjectIDParam" PARAM="sTextParam" PARAM="iSecondObjectIDParam" PARAM="oObjectParam" PARAM="oSecondObjectParam" PARAM="teSourceParam" EXPR="
			function serverLog( sLogParam )
			{
				tools.log_event_server( 'email', sLogParam );
			}

			function fillEmail( fldTarget, sAddressParam )
			{
				oEmail = tools.parse_email_address( sAddressParam );
				fldTarget.name = oEmail.name;
				fldTarget.address = oEmail.address;
			}

			if ( ! global_settings.settings.own_org.smtp_server.HasValue )
			{
				serverLog( 'Warning. Not specified SMTP server address in general settings. The message is not created.' );
				return false;
			}

			var sNotificationCode = String( oTypeParam );
			var iNotificationID = null;
			var teNotification = null;
			if ( sNotificationCode == '' || sNotificationCode == '0' )
			{
				teNotification = OpenNewDoc( 'x-local://wtv/wtv_notification.xmd' ).TopElem;
				try
				{
					if ( teSourceParam == null || teSourceParam == '' || teSourceParam == undefined )
						throw 'no_data';

					teNotification.recipients.AssignElem( teSourceParam.recipients );

					for ( sFieldNameElem in [ 'sender_selector', 'sender_email' ] )
						if ( teSourceParam.ChildExists( sFieldNameElem ) )
							teNotification.Child( sFieldNameElem ).Value = teSourceParam.Child( sFieldNameElem ).Value;
					if ( teSourceParam.ChildExists( 'notification_system_id' ) )
					{
						teNotification.notification_systems.Clear();
						teNotification.notification_systems.ObtainChildByKey( teSourceParam.notification_system_id );
					}
				}
				catch ( err )
				{
				}
			}
			else
			{
				var catNotification = undefined;
				try
				{
					iNotificationID = Int( oTypeParam );
					catNotification = ArrayOptFirstElem( XQuery( 'for $elem in notifications where $elem/id = ' + iNotificationID + ' return $elem' ) );
				}
				catch ( err )
				{
				}
				if ( catNotification == undefined )
				{
					catNotification = ArrayOptFirstElem( XQuery( 'for $elem in notifications where $elem/code = ' + XQueryLiteral( sNotificationCode ) + ' return $elem' ) );
					if ( catNotification == undefined )
					{
						serverLog( 'Error. Unable to find the type of notification with the code ' + CodeLiteral( sNotificationCode ) + '. The message is not created.' );
						return false;
					}
					iNotificationID = catNotification.id;
				}

				try
				{
					teNotification = OpenDoc( UrlFromDocID( iNotificationID ) ).TopElem;
					sNotificationCode = teNotification.code;
				}
				catch ( err )
				{
					serverLog( 'Error. Can not open file type of notification with ID ' + iNotificationID + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created. ' + err );
					return false;
				}
				if ( ! teNotification.active )
				{
					serverLog( 'Warning. Type of notification with the code ' + CodeLiteral( sNotificationCode ) + ' is not active. The message is not created.' );
					return false;
				}
			}

			function createActiveNotification( iNotificationTemplateIDParam )
			{
				docActiveNotification = OpenNewDoc( 'x-local://wtv/wtv_active_notification.xmd' );
				docActiveNotification.TopElem.notification_id = iNotificationID;
				docActiveNotification.TopElem.object_id = objDocID;
				docActiveNotification.TopElem.text = Text;
				docActiveNotification.TopElem.sec_object_id = objDocSecID;
				if ( teNotification.date_shift_selector == 1 )
					docActiveNotification.TopElem.send_date = DateOffset( Date(), 86400 * teNotification.date_shift );
				else
					docActiveNotification.TopElem.send_date = Date();

				if ( iNotificationTemplateIDParam == null )
				{
					teNotificationTemplate = teSourceParam;
					docActiveNotification.TopElem.is_custom = true;
				}
				else
				{
					try
					{
						teNotificationTemplate = OpenDoc( UrlFromDocID( iNotificationTemplateIDParam ) ).TopElem;
					}
					catch ( err )
					{
						serverLog( 'Error. Can not open file template of notification with ID ' + iNotificationTemplateIDParam + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created. ' + err );
						return null;
					}
				}
				switch ( teNotification.sender_selector )
				{
					case 1:
						fillEmail( docActiveNotification.TopElem.sender, teNotification.sender_email );
						break;

					case 2:
						try
						{
							sSenderEmail = eval( teNotification.sender_email );
							fillEmail( docActiveNotification.TopElem.sender, OpenDoc( UrlFromDocID( Int( sSenderEmail ) ) ).TopElem.email );
						}
						catch( err )
						{
							serverLog( 'Warning. Can not calculate sender address. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
						}
				}
				if ( ! teNotification.sender_email.HasValue )
					fillEmail( docActiveNotification.TopElem.sender, global_settings.settings.own_org.email );
				if( teNotificationTemplate.ChildExists( 'attachments' ) )
					docActiveNotification.TopElem.attachments.AssignElem( teNotificationTemplate.attachments );

				if( teNotificationTemplate.ChildExists( 'files' ) )
				{
					for( _file in teNotificationTemplate.files )
						try
						{
							docResource = OpenDoc( UrlFromDocID( _file.PrimaryKey ) );
							//sFileUrl = tools.file_source_get_file_url( teResource.file_source, teResource.file_url.Value );
							sTempUrl = ObtainTempFile( docResource.TopElem.file_name );
							docResource.TopElem.get_data( sTempUrl );
							fldAttach = docActiveNotification.TopElem.attachments.AddChild();
							fldAttach.name = docResource.TopElem.file_name;
							fldAttach.data.LoadFromFile( ( sTempUrl ) );
						}
						catch( ex ){ serverLog( 'Error. Can not add file ' + _file.PrimaryKey + ' ' + sTempUrl + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + ex ); }
				}

				docActiveNotification.TopElem.subject = EvalCodePage( teNotificationTemplate.subject );
				docActiveNotification.TopElem.body_type = teNotificationTemplate.body_type;
				try
				{
					docActiveNotification.TopElem.body = EvalCodePage( teNotificationTemplate.body );
				}
				catch(err)
				{
					serverLog( 'Error. Can not evaluate notification body. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
					return null;
				}

				return docActiveNotification;
			}

			function saveActiveNotification( docActiveNotificationParam )
			{
				if ( ArrayCount( ArraySelect( docActiveNotificationParam.TopElem.recipients, 'address.HasValue' ) ) == 0 )
				{
					if ( global_settings.settings.email_empty_create_notification )
					{
						docActiveNotificationParam.TopElem.status = 'sent';
					}
					else
					{
						serverLog( 'Warning. List of recipients with email is empty. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created.' );
						return false;
					}
				}
				else
				{
					docActiveNotificationParam.TopElem.status = 'active';
				}

				var arrRecipient, iRecipientCount, sName, iPersonID;
				for ( fldRecipientElem in ArraySelectAll( docActiveNotificationParam.TopElem.recipients ) )
				{
					arrRecipient = String( fldRecipientElem.address ).split( ',' );
					iRecipientCount = ArrayCount( arrRecipient );
					if ( iRecipientCount &gt; 1 )
					{
						fldRecipientElem.address = arrRecipient[ 0 ];
						sName = fldRecipientElem.name.Value;
						iPersonID = fldRecipientElem.collaborator_id.Value;
						for ( i=1; i &lt; iRecipientCount; i++ )
						{
							fldRecipientChild = docActiveNotificationParam.TopElem.recipients.AddChild();
							fldRecipientChild.address = arrRecipient[ i ];
							fldRecipientChild.name = sName;
							fldRecipientChild.collaborator_id = iPersonID;
						}
					}
				}
				docActiveNotificationParam.TopElem.date = Date();

				iDefaultNotificationSystem = tools.get_default_object_id( 'notification_system' );
				fldNotificationSystem = ArrayOptFind( teNotification.notification_systems, 'PrimaryKey.HasValue' );
				if ( fldNotificationSystem == undefined )
					docActiveNotificationParam.TopElem.notification_system_id = iDefaultNotificationSystem;
				else
					docActiveNotificationParam.TopElem.notification_system_id = fldNotificationSystem.PrimaryKey;

				if ( docActiveNotificationParam.TopElem.notification_system_id != iDefaultNotificationSystem )
					docActiveNotificationParam.TopElem.status = 'active';

				docActiveNotificationParam.BindToDb();
				docActiveNotificationParam.Save();

				for ( fldNotificationSystemElem in teNotification.notification_systems )
					if ( fldNotificationSystemElem.PrimaryKey.HasValue &amp;&amp; fldNotificationSystemElem.PrimaryKey != docActiveNotificationParam.TopElem.notification_system_id )
					{
						docActiveNotification = OpenNewDoc( 'x-local://wtv/wtv_active_notification.xmd' );
						docActiveNotification.TopElem.AssignElem( docActiveNotificationParam.TopElem );
						docActiveNotification.TopElem.notification_system_id = fldNotificationSystemElem.PrimaryKey;
						if ( docActiveNotification.TopElem.notification_system_id != iDefaultNotificationSystem )
							docActiveNotification.TopElem.status = 'active';
						docActiveNotification.BindToDb();
						docActiveNotification.Save();
					}
				return true;
			}

			function addRecipientFromDoc( oPersonParam, iPersonIDParam, sErrTextParam )
			{
				if ( oPersonParam == null )
				{
					try
					{
						oPersonParam = OpenDoc( UrlFromDocID( iPersonIDParam ) ).TopElem;
					}
					catch ( err )
					{
						serverLog( 'Error. ' + sErrTextParam + ' Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
						return false;
					}
				}
				if ( oPersonParam.email.HasValue || global_settings.settings.email_empty_create_notification )
				{
					var fldRecipientChild = docActiveNotification.TopElem.recipients.AddChild();
					fldRecipientChild.address = oPersonParam.email;
					fldRecipientChild.collaborator_id = iPersonIDParam;
					try
					{
						fldRecipientChild.name = oPersonParam.fullname;
					}
					catch ( err )
					{
					}
				}
				return true;
			}

			var cnf_temp_bReturnFlag = true;
			if ( true || global_settings.settings.notification_create_process )
			{
				var objDocID = null;
				var objDocSecID = null;
				var objDoc = null;
				var objDocSec = null;
				var Text = '';
				var iNotificationTemplateID = null;
				try
				{
					if ( iObjectIDParam != null &amp;&amp; iObjectIDParam != '' &amp;&amp; iObjectIDParam != undefined )
						objDocID = Int( iObjectIDParam );

					Text = sTextParam;

					if ( iSecondObjectIDParam != null &amp;&amp; iSecondObjectIDParam != '' &amp;&amp; iSecondObjectIDParam != undefined )
						objDocSecID = Int( iSecondObjectIDParam );
				}
				catch ( err )
				{
				}
				if ( objDocID != null )
					try
					{
						if ( oObjectParam == null || oObjectParam == '' || oObjectParam == undefined )
							throw 'not_doc';
						objDoc = oObjectParam;
					}
					catch ( err )
					{
						try
						{
							objDoc = OpenDoc( UrlFromDocID( objDocID ) ).TopElem;
						}
						catch ( err2 )
						{
							serverLog( 'Error. Can not open a file attachment object with ID ' + objDocID + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created. ' + err2 );
							return false;
						}
					}
				if ( objDocSecID != null )
					try
					{
						if ( oSecondObjectParam == null || oSecondObjectParam == '' || oSecondObjectParam == undefined )
							throw 'not_doc';
						objDocSec = oSecondObjectParam;
					}
					catch ( err )
					{
						try
						{
							objDocSec = OpenDoc( UrlFromDocID( objDocSecID ) ).TopElem;
						}
						catch ( err2 )
						{
							serverLog( 'Error. Can not open a file attachment second object with ID ' + objDocSecID + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created. ' + err2 );
							return false;
						}
					}

				if ( teNotification.is_std &amp;&amp; OptInt( sNotificationCode ) != undefined )
				{
					iNotificationTemplateID = teNotification.notification_template_id;
					if ( iNotificationTemplateID == null )
					{
						//  OLDSCHOOL STYLE
						try
						{
							iNotificationTemplateID = 768614336404564580 + Int( sNotificationCode );
						}
						catch ( err )
						{
						}
					}
					docActiveNotification = createActiveNotification( iNotificationTemplateID );
					if ( docActiveNotification == null )
						return false;

					switch ( sNotificationCode )
					{
						case '1':	//Заявка на слушателя на курс/семинар	Слушатель	Организатор
							if ( objDoc.type == 'event' )
								try
								{
									cnf_temp_teEvent = OpenDoc( UrlFromDocID( objDoc.object_id ) ).TopElem;
									for ( fldTutorElem in cnf_temp_teEvent.tutors )
										addRecipientFromDoc( null, fldTutorElem.PrimaryKey, 'Can not open a file tutor with ID ' + fldTutorElem.PrimaryKey + ' of the event with ID ' + objDoc.object_id + '.' );
								}
								catch ( err )
								{
									serverLog( 'Error. Can not open a file event with ID ' + objDoc.object_id + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
									return false;
								}

						case '32':	//Назначение курса сотруднику	- уведомление руководителя
						case '33':	//Назначение теста сотруднику	- уведомление руководителя
						case '26':	//Сотрудник отменил свою заявку	- уведомление руководителя
							for ( iBossIDElem in tools.get_uni_user_bosses( objDoc.person_id, { 'return_object_type': 'collaborator', 'return_object_value': 'id' } ) )
								addRecipientFromDoc( null, iBossIDElem, 'Can not open a file boss with ID ' + iBossIDElem + '.' );
							break;

						case '12':	//Завершен оцениваемый тест
							try
							{
								cnf_temp_teAssessment = OpenDoc( UrlFromDocID( objDoc.assessment_id ) ).TopElem;
								for ( fldPersonElem in cnf_temp_teAssessment.persons )
									if ( fldPersonElem.type == 'expert' )
										addRecipientFromDoc( null, fldPersonElem.person_id, 'Can not open a file tutor with ID ' + fldPersonElem.person_id + ' of the assessment with ID ' + objDoc.assessment_id + '.' );
							}
							catch ( err )
							{
								serverLog( 'Error. Can not open a file assessment with ID ' + objDoc.assessment_id + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
								return false;
							}
							break;

						case '2':	//Организатор назначает слушателю курс
						case '3':	//Организатор отклоняет слушателю заявку
						case '13':	//Эксперт оценил завершенный тест
						case '21':	//Тьютер принимает заявку слушателя на мероприятие
						case '22':	//Тьютер отклоняет заявку слушателя на мероприятие
						case '30':	//Назначение курса сотруднику
						case '31':	//Назначение теста сотруднику
						case '41':	//Изменение в разделе портала
						case '42':	//Новая статья форума
						case '43':	//Новое сообщение в блоге
						case '44':	//Новая статья темы форума
						case '45':	//Назначение процедуры опроса сотруднику
						case '61':	//Присвоение  квалификации сотруднику
						case '71':
						case '81':	//Сотруднику рекомендован материал
							addRecipientFromDoc( null, objDoc.person_id, 'Cannot open a file person with ID ' + objDoc.person_id + '.' );
							break;

						case '4':	//оформлен счет
							fldRecipientChild = docActiveNotification.TopElem.recipients.AddChild();
							fldRecipientChild.address = global_settings.settings.own_org.email;
							break;

						case '5':	//подтверждение оплаты счета
							//return _return_value;
							break;

						case '6':	//саморегистрация на портале
						case '7':	//изменение статуса доступа на портал
						case '9':	//уведомление о логине и пароле
						case '19':	//уведомление о сбросе пароля
						case '23':	//Тьютер принимает слушателя на мероприятие
						case '24':	//Тьютер исключает слушателя из мероприятие
						case '46':	//Пригласить заполнить опрос
						case '51':	//Сотрудник включен в состав ответственных за проведение мероприятия
						case '52':	//Сотрудник исключен из состава ответственных за проведение мероприятия
						case '53':	//Сотрудник включен в состав ответственных за подготовку мероприятия
						case '54':	//Сотрудник исключен из состава ответственных за подготовку мероприятия
						case '57':	//Сотрудник заполнил решение кейса
						case '11':	//Внесение в черный список
						case '65':  //Одобрение заявки на материал библиотеки
						case '66':  //Отклонение заявки на материал библиотеки
						case '73':  //Создание ознакомления сотруднику
						case '74':  //В чате написано сообщение
						case '91':  //Создан новый сотрудник (уведомление руководителя)

							addRecipientFromDoc( objDoc, objDocID, '' );
							break;

						case '55':	//Сотрудник включен в список преподавателей мероприятия
						case '56':	//Сотрудник исключен из списка преподавателей мероприятия
							if(objDoc.type == 'invitee')
							{
								addRecipientFromDoc( objDoc, objDocID, '' );
							}
							else
							{
								addRecipientFromDoc( null, objDoc.person_id, '' );
							}
							break;

						case '8':	//Новое сообщение в курируемом форуме
							addRecipientFromDoc( objDocSec, objDocSecID, '' );
							break;

						case '10':	//Завершение электронного курса сотрудником
							xarrGroup = XQuery( 'for $elem in group_collaborators where $elem/collaborator_id = ' + objDoc.person_id + ' return $elem/Fields(\'tutor_id\')' );
							for ( catGroupElem in xarrGroup )
								if ( catGroupElem.tutor_id.HasValue &amp;&amp; catGroupElem.tutor_id != objDoc.person_id )
									addRecipientFromDoc( null, catGroupElem.tutor_id, 'Cannot open a file tutor with ID ' + catGroupElem.tutor_id + '.' );
							break;

						case '25'://Подчиненный сотрудник был включен в состав участников мероприятия	- уведомление руководителя
							for ( iBossIDElem in tools.get_uni_user_bosses( objDoc, { 'return_object_type': 'collaborator', 'return_object_value': 'id', 'object_id': objDocID } ) )
								addRecipientFromDoc( null, iBossIDElem, 'Cannot open a file boss with ID ' + iBossIDElem + '.' );
							break;

						case '70':
						case '72':
							try
							{
								addRecipientFromDoc( null, OpenDoc(UrlFromDocID(objDoc.expert_id)).TopElem.person_id, 'Cannot open a human record of the expert with ID ' + objDoc.expert_id + '.' );
							}
							catch( err )
							{
								serverLog( 'Error. Cannot open a human record of the expert with ID ' + objDoc.expert_id + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
							}
							break;

						default:
							break;
					}

					if ( ! saveActiveNotification( docActiveNotification ) )
						cnf_temp_bReturnFlag = false;

					fldRecipientTypeChild = teNotification.recipients.GetOptChildByKey( 'add' );
					if ( fldRecipientTypeChild != undefined &amp;&amp; fldRecipientTypeChild.eval_str.HasValue )
					{
						docActiveNotification = createActiveNotification( fldRecipientTypeChild.notification_template_id );
						if ( docActiveNotification == null )
							return false;

						try
						{
							sAddress = Trim( eval( fldRecipientTypeChild.eval_str ) );
						}
						catch ( err )
						{
							serverLog( 'Error. Runtime error code to identify additional recipients. Type the recipient &quot;add&quot;. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created. ' + err );
							return false;
						}
						if ( sAddress != '' )
						{
							fldRecipientChild = docActiveNotification.TopElem.recipients.AddChild();
							fldRecipientChild.address = sAddress;
						}
						saveActiveNotification( docActiveNotification );
					}
				}
				else
				{
					cnf_temp_tePerson = null;
					switch ( teNotification.field_recipient_type )
					{
						case 'in_doc':
							cnf_temp_iPersonID = objDocID;
							cnf_temp_tePerson = objDoc;
							break;

						case 'person_in_doc':
							if ( objDoc.ChildExists( 'person_id' ) )
							{
								cnf_temp_iPersonID = objDoc.person_id;
							}
							else if ( objDoc.ChildExists( 'collaborator_id' ) )
							{
								cnf_temp_iPersonID = objDoc.collaborator_id;
							}
							else if ( objDoc.ChildExists( 'user_id' ) )
							{
								cnf_temp_iPersonID = objDoc.user_id;
							}
							else
							{
								serverLog( 'Error. Attached object contains no field of references to the person. Type the recipient person_in_doc. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created.' );
								return false;
							}
							break;

						default:
							if ( objDoc.ChildExists( 'email' ) )
							{
								cnf_temp_iPersonID = objDocID;
								cnf_temp_tePerson = objDoc;
								teNotification.field_recipient_type = 'in_doc';
							}
							else if ( objDoc.ChildExists( 'person_id' ) )
							{
								cnf_temp_iPersonID = objDoc.person_id;
								teNotification.field_recipient_type = 'person_in_doc';
							}
							else if ( objDoc.ChildExists( 'collaborator_id' ) )
							{
								cnf_temp_iPersonID = objDoc.collaborator_id;
								teNotification.field_recipient_type = 'person_in_doc';
							}
							else if ( objDoc.ChildExists( 'user_id' ) )
							{
								cnf_temp_iPersonID = objDoc.user_id;
								teNotification.field_recipient_type = 'person_in_doc';
							}
							else if ( ArrayOptFind( teNotification.recipients, 'recipient_type==\'eval_person_ids\'||recipient_type==\'add\'' ) == undefined )
							{
								serverLog( 'Error. Attached object contains no field of references to the person. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created.' );
								return false;
							}
							break;
					}

					function addRecipient( cnf_temp_iPersonIDParam )
					{
						if ( cnf_temp_iPersonIDParam != null )
						{
							addRecipientFromDoc( null, cnf_temp_iPersonIDParam, 'Cannot open a file person with ID ' + cnf_temp_iPersonIDParam + '. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. The message is not created.' );
						}
						else
						{
							addRecipientFromDoc( cnf_temp_tePerson, cnf_temp_iPersonID, 'Cannot open a file person with ID ' + cnf_temp_iPersonID + '. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. The message is not created.' );
						}
						return true;
					}

					for ( fldRecipientElem in teNotification.recipients )
					{
						if ( iNotificationID != null &amp;&amp; ! fldRecipientElem.notification_template_id.HasValue )
						{
							serverLog( 'Error. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + ' contains no reference to the template of notification. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created.' );
							continue;
						}

						docActiveNotification = createActiveNotification( fldRecipientElem.notification_template_id );
						if ( docActiveNotification == null )
							continue;

						switch ( fldRecipientElem.recipient_type )
						{
							case 'in_doc':
							case 'person_in_doc':
								if ( ! addRecipient( null ) )
									continue;
								break;

							case 'boss_person_in_doc':
							case 'boss_in_doc':
								for ( iBossIDElem in tools.get_uni_user_bosses( cnf_temp_iPersonID, { 'return_object_type': 'collaborator', 'return_object_value': 'id' } ) )
									try
									{
										addRecipient( iBossIDElem )
									}
									catch ( err )
									{
										serverLog( 'Error. Can not open a file boss with ID ' + iBossIDElem + '. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
									}
								break;

							case 'cost_center_boss_person_in_doc':
							case 'cost_center_boss_in_doc':
								for ( iBossIDElem in tools.get_cost_center_boss_by_person_id( cnf_temp_iPersonID ) )
									try
									{
										addRecipient( iBossIDElem );
									}
									catch ( err )
									{
										serverLog( 'Error. Can not open a file boss with ID ' + iBossIDElem + '. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
									}
								break;

							case 'main_boss_person_in_doc':
							case 'main_boss_in_doc':
								for ( iBossIDElem in tools.get_main_boss_by_person_id( cnf_temp_iPersonID ) )
									try
									{
										addRecipient( iBossIDElem );
									}
									catch ( err )
									{
										serverLog( 'Error. Can not open a file boss with ID ' + iBossIDElem + '. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
									}
								break;

							case 'org_func_manager_in_doc':
							case 'org_func_manager_person_in_doc':
								if ( teNotification.field_recipient_type == 'person_in_doc' &amp;&amp; cnf_temp_tePerson == null )
									try
									{
										cnf_temp_tePerson = OpenDoc( UrlFromDocID( cnf_temp_iPersonID ) ).TopElem;
									}
									catch ( err )
									{
										serverLog( 'Error. Can not open a file person with ID ' + cnf_temp_iPersonID + '. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created. ' + err );
										continue;
									}

								if ( ! cnf_temp_tePerson.org_id.HasValue )
								{
									serverLog( 'Error. Person does not refer to the organization. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created.' );
									continue;
								}

								_where_func_manager_type_str=''
								if (fldRecipientElem.func_manager_type_id.HasValue)
								{
									_where_func_manager_type_str=' and $elem/boss_type_id='+fldRecipientElem.func_manager_type_id
								}

								for ( catFuncManagerElem in XQuery( 'for $elem in func_managers where $elem/object_id = ' + cnf_temp_tePerson.org_id + ''+_where_func_manager_type_str+ ' return $elem' ) )
									try
									{
										addRecipient( catFuncManagerElem.person_id );
									}
									catch ( err )
									{
										serverLog( 'Error. Can not open a file func manager with ID ' + catFuncManagerElem.person_id + '. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
									}
								break;

							case 'sub_func_manager_in_doc':
							case 'sub_func_manager_person_in_doc':
								if ( teNotification.field_recipient_type == 'person_in_doc' &amp;&amp; cnf_temp_tePerson == null )
									try
									{
										cnf_temp_tePerson = OpenDoc( UrlFromDocID( cnf_temp_iPersonID ) ).TopElem;
									}
									catch ( err )
									{
										serverLog( 'Error. Can not open a file person with ID ' + cnf_temp_iPersonID + '. Type of the recipient is ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created. ' + err );
										continue;
									}

								if ( ! cnf_temp_tePerson.position_parent_id.HasValue )
								{
									serverLog( 'Error. Person does not refer to the subdivision. Type of the recipient is ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created.' );
									continue;
								}

								cnf_temp_iParentID = cnf_temp_tePerson.position_parent_id

								SubdivCounter=0;
								FuncManagersFound=false;

								while ( cnf_temp_iParentID != null &amp;&amp; SubdivCounter&lt;50 )
								{
									_where_func_manager_type_str=''
									if (fldRecipientElem.func_manager_type_id.HasValue)
									{
										_where_func_manager_type_str=' and $elem/boss_type_id='+fldRecipientElem.func_manager_type_id
									}

									arrFuncManagers=XQuery( 'for $elem in func_managers where $elem/object_id = ' + cnf_temp_iParentID + ''+_where_func_manager_type_str+ ' return $elem' )

									for ( catFuncManagerElem in arrFuncManagers )
									{
										FuncManagersFound=true
										try
										{
											addRecipient( catFuncManagerElem.person_id );
										}
										catch ( err )
										{
											serverLog( 'Error. Can not open a file func manager with ID ' + catFuncManagerElem.person_id + '. Type of the recipient is ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
										}
									}

									if (!FuncManagersFound)
									{
										catSubdivision = ArrayOptFirstElem( XQuery( 'for $elem in subdivisions where $elem/id = ' + cnf_temp_iParentID + ' return $elem' ) );
										if ( catSubdivision == undefined )
											cnf_temp_iParentID = null;
										else
										{
											cnf_temp_iParentID = catSubdivision.parent_object_id.Value;
										}
									}
									else
									{
										break;
									}
									SubdivCounter++;
								}

								if (!FuncManagersFound)
								{
									serverLog( 'Error. No functional managers found. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created.' );
									continue;
								}
								break;

							case 'func_manager_in_doc':
							case 'func_manager_person_in_doc':
								_where_func_manager_type_str=''
								if (fldRecipientElem.func_manager_type_id.HasValue)
								{
									_where_func_manager_type_str=' and $elem/boss_type_id='+fldRecipientElem.func_manager_type_id
								}
								for ( catFuncManagerElem in XQuery( 'for $elem in func_managers where $elem/object_id = ' + cnf_temp_iPersonID +''+_where_func_manager_type_str+ ' return $elem' ) )
									try
									{
										addRecipient( catFuncManagerElem.person_id );
									}
									catch ( err )
									{
										serverLog( 'Error. Can not open a file func manager with ID ' + catFuncManagerElem.person_id + '. Type the recipient ' + CodeLiteral( fldRecipientElem.recipient_type ) + '. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. ' + err );
									}
								break;

							case 'eval_person_ids':
								if ( fldRecipientElem.eval_ids_str.HasValue )
									for ( _eval in String( fldRecipientElem.eval_ids_str ).split( ';' ) )
										try
										{
											_fld = eval( _eval );

											_is_multiple = false;
											try
											{
												fldTempChild = _fld.AddChild();
												if ( fldTempChild.IsMultiple )
													_is_multiple = true;
												fldTempChild.Delete();
											}
											catch(_multiple_try_)
											{
											}

											if (_is_multiple)
											{
												for (_f in _fld)
												{
													try
													{
														cnf_temp_tePerson = OpenDoc( UrlFromDocID( Int( (_f.ChildExists('person_id') ? _f.person_id : _f.PrimaryKey) ) ) ).TopElem;
														if ( cnf_temp_tePerson.email.HasValue )
														{
															fldRecipientChild = docActiveNotification.TopElem.recipients.AddChild();
															fldRecipientChild.address = cnf_temp_tePerson.email;
															fldRecipientChild.name = cnf_temp_tePerson.fullname;
														}
													}
													catch(_multisend_)
													{

													}
												}
											}
											else
											{
												cnf_temp_tePerson = OpenDoc( UrlFromDocID( Int( _fld.Value ) ) ).TopElem;
												if ( cnf_temp_tePerson.email.HasValue )
												{
													fldRecipientChild = docActiveNotification.TopElem.recipients.AddChild();
													fldRecipientChild.address = cnf_temp_tePerson.email;
													fldRecipientChild.name = cnf_temp_tePerson.fullname;
												}
											}
										}
										catch ( dd )
										{
										}
								break;

							case 'add':
								if ( fldRecipientElem.eval_str.HasValue )
								{
									sAddress = '';
									try
									{
										sAddress = Trim( eval( fldRecipientElem.eval_str ) );
									}
									catch ( err )
									{
										serverLog( 'Error. Runtime error code to identify additional recipients. Type the recipient &quot;add&quot;. Type of notification code ' + CodeLiteral( sNotificationCode ) + '. The message is not created. ' + err );
									}
									if ( sAddress != '' )
									{
										fldRecipientChild = docActiveNotification.TopElem.recipients.AddChild();
										fldRecipientChild.address = sAddress;
									}
								}
								break;
						}

						if ( ! saveActiveNotification( docActiveNotification ) )
							cnf_temp_bReturnFlag = false;
					}
				}
			}

			return cnf_temp_bReturnFlag;
	"/>

	<create_template_notification PROPERTY="1" CALLER-ENV="1" PARAM="sTypeParam" PARAM="iObjectIDParam" PARAM="sSubjectParam" PARAM="sBodyParam" PARAM="oObjectParam" PARAM="teSourceParam" PARAM="iObjectSecondIDParam" EXPR="
			try
			{
				if ( oObjectParam == '' || oObjectParam == undefined )
					throw 'not_doc';
			}
			catch ( err )
			{
				oObjectParam = null;
			}
			try
			{
				if ( iObjectSecondIDParam == '' || iObjectSecondIDParam == undefined )
					throw 'not_doc';
			}
			catch ( err )
			{
				iObjectSecondIDParam = null;
			}
			teActiveNotification = OpenNewDoc( 'x-local://wtv/wtv_dlg_notification_template.xml' ).TopElem;
			teActiveNotification.subject = sSubjectParam;
			teActiveNotification.body = sBodyParam;
			try
			{
				if ( teSourceParam == null || teSourceParam == '' || teSourceParam == undefined )
					throw 'not_doc';

				teActiveNotification.recipients.AssignElem( teSourceParam.recipients );
				if( teSourceParam.ChildExists( 'attachments' ) )
					teActiveNotification.attachments.AssignElem( teSourceParam.attachments );
				for ( sFieldNameElem in [ 'body_type', 'sender_selector', 'sender_email', 'notification_system_id' ] )
					if ( teSourceParam.ChildExists( sFieldNameElem ) )
						teActiveNotification.Child( sFieldNameElem ).Value = teSourceParam.Child( sFieldNameElem ).Value;
			}
			catch ( err )
			{
				teActiveNotification.recipients.ObtainChildByKey( 'in_doc' );
			}
			return tools.create_notification( sTypeParam, iObjectIDParam, '', iObjectSecondIDParam, oObjectParam, null, teActiveNotification );
	"/>



	<send_notification PROPERTY="1" PARAM="iActiveNotificationIDParam" EXPR="
			try
			{
				docActiveNotification = OpenDoc( UrlFromDocID( iActiveNotificationIDParam ) );
			}
			catch ( err )
			{
				LogEvent( 'email', 'Error. Open active notification document falied. Active notification ID ' + iActiveNotificationIDParam + '. ' + err );
				return false;
			}

			oParam = ({
				'iActiveNotificationID': iActiveNotificationIDParam,
				'docActiveNotification': docActiveNotification
			});

			ms_tools.raise_system_event_env( 'common_send_notification', oParam );

			var oRes = tools.call_notification_system_method( docActiveNotification.TopElem, 'SendNotification', oParam );
			bReturnFlag = oRes.error == 0;
			if( bReturnFlag )
			{
				sRecipients = oRes.GetOptProperty( 'sRecipients', '' );
				LogEvent( 'email', 'Info. Email sending' + ( sRecipients == '' ? '' : ' to ' + sRecipients ) + ' successful. Active notification ID ' + iActiveNotificationIDParam + '. Type of notification ID ' + docActiveNotification.TopElem.notification_id + '.' );
				if ( global_settings.settings.own_org.after_send_action != 'save' )
				{
					try
					{
						DeleteDoc( UrlFromDocID( iActiveNotificationIDParam ), ( global_settings.settings.own_org.after_send_action != 'trash' ) );
					}
					catch ( err )
					{
						LogEvent( 'email', 'Warning. Delete sent notification ID ' + iActiveNotificationIDParam + ' falied. ' + err );
					}
				}
			}
			else
			{
				LogEvent( 'email', oRes.error_text );
			}
			return bReturnFlag;
	"/>





	<save_certificate PROPERTY="1" CALLER-ENV="1" PARAM="_learning_id" EXPR="
		learningDoc = OpenDoc( UrlFromDocID( _learning_id ) ).TopElem;
		return EvalCodePageUrl( 'x-local://templates/certificate_template.html' );
	"/>




	<random_string  PROPERTY="1" PARAM="_digit_num" PARAM="_dict" EXPR="
		try
		{
			_arr = String( _dict );
			_len = StrLen( _arr ) - 1;
		}
		catch ( sd )
		{
			_arr = String( 'qwertyuiopasdfghjklzxcvbnm1234567890' );
			_len = 35;
		}

		_str = '';
		for ( i = 0; i &lt; _digit_num; i++ )
		{
			_ind = Random( 0, _len );
			_str = _str + _arr.slice( _ind, _ind + 1 );
		}

		return _str;
	"/>



	<import_excel_persons PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sParamsXml" EXPR="
		docReport = OpenNewDoc( 'x-local://wtv/wtv_action_report.xmd' );
		docReport.BindToDb( DefaultDb );
		docReport.Save();

		oThread = new Thread;
		oThread.Param.SetProperty( 'iActionReportID', docReport.DocID );
		oThread.Param.SetProperty( 'sParamsXml', UrlDecode( sParamsXml ) );
		oThread.EvalCodeUrl( 'x-local://wtv/wtv_agent_import_excel_persons.js' );

		return docReport.DocID;
	"/>

	<start_import_excel_persons PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="Ps" EXPR="
		if ( Ps.file_url == '' )
			return ms_tools.get_const('7g619wp5uc');

		for ( _column in Ps.columns )
		{
			if ( _column.index == null )
				return StrReplace( ms_tools.get_const('c5ivw8lunf'), '{PARAM1}', _column.ChildIndex + 1 );

			if ( _column.field_name == '' )
				return StrReplace( ms_tools.get_const('ukjpmrelll'), '{PARAM1}', _column.ChildIndex + 1 );
		}

		if ( ! Ps.columns.ChildByKeyExists( 'login' ) &amp;&amp; ! Ps.columns.ChildByKeyExists( 'login_unique' ) )
			return ms_tools.get_const('7bk2tc3xgw');

		if (  Ps.create_password_type == 'common' &amp;&amp; Ps.common_password == '' )
			return ms_tools.get_const('3mk3r1wxb4');

		if (  Ps.create_org_type == 'field' &amp;&amp; ! Ps.columns.ChildByKeyExists( 'org' ) )
			return ms_tools.get_const('gi5uegxpv3');

		if (  Ps.create_org_type == 'select' &amp;&amp; ! Ps.org_id.HasValue )
			return ms_tools.get_const('wb6yztimux');
		return '';
	"/>



	<!-- obsolete function -->
	<get_sub_boss_by_person_id PROPERTY="1" PARAM="_person_id" PARAM="_person_doc" EXPR="
			try
			{
				if ( _person_doc == null || _person_doc == '' )
					throw 'no doc';

				personDoc = _person_doc;
			}
			catch ( err )
			{
				personDoc = OpenDoc( UrlFromDocID( _person_id ) ).TopElem;
			}
			if ( ! personDoc.position_parent_id.HasValue )
				return Array();

			curBossArray = ArrayUnion(
							XQuery( 'for $elem in func_managers where $elem/object_id = ' + personDoc.position_parent_id + ' and $elem/is_native = true() return $elem' ),
							XQuery( 'for $elem in func_managers where $elem/parent_id = ' + personDoc.position_parent_id + ' and $elem/catalog = \'position\' return $elem' ) );
			return ArrayExtract( curBossArray, 'person_id' );
	"/>

	<get_main_boss_by_person_id PROPERTY="1" PARAM="_person_id" EXPR="
			positionArray = XQuery( 'for $position in positions where $position/basic_collaborator_id = ' + _person_id + ' return $position' );
			curBossArray = Array();

			counter = 0;
			for ( _position in positionArray )
			{
				if ( _position.parent_object_id == null &amp;&amp; _position.org_id == null )
					continue;

				_sub_counter = 0;
				_cur_object_id = _position.parent_object_id;
				_cur_parent_id = OpenDoc( UrlFromDocID( _cur_object_id ) ).TopElem.parent_object_id;
				while( _cur_parent_id != null &amp;&amp; _sub_counter &lt; 50 )
				{
					_cur_object_id = _cur_parent_id;
					_cur_parent_id = OpenDoc( UrlFromDocID( _cur_parent_id ) ).TopElem.parent_object_id;
					_sub_counter++;
				}
				if ( _cur_parent_id != null )
					continue;

				positionIntoArray = XQuery( 'for $position in positions where $position/parent_object_id = ' + _cur_object_id + ' and $position/is_boss = true() return $position' );

				for ( _pos in positionIntoArray )
					if ( _pos.basic_collaborator_id != null )
					{
						curBossArray[counter] = _pos.basic_collaborator_id;
						counter++;
					}
			}

			return curBossArray;
	"/>



	<add_lng PROPERTY="1" PARAM="sLngUrlParam" PARAM="bDoObtainParam" EXPR="
			try
			{
				bDoObtainParam = bDoObtainParam == true;
			}
			catch ( err )
			{
				bDoObtainParam = true;
			}
			var iCounter = 0;
			fldLngs = OpenDoc( 'x-local://' + DefaultDb + '/lists/wtv_lngs.xml' ).TopElem;

			function add_virt_lng( fldLngParam )
			{
				if ( ! fldLngParam.id.HasValue )
					return;

				iCounter++;
				var fldLngChild = fldLngs.GetOptChildByKey( fldLngParam.id );
				if ( fldLngChild == undefined )
				{
					ModalTaskMsg( 'Assigning ' + fldLngParam.id + ' lng consts...' );
					fldLngChild = fldLngs.AddChild();
					fldLngChild.AssignElem( fldLngParam );
				}
				else
				{
					if ( LdsIsServer )
					{
						if ( ! bDoObtainParam )
							return;
					}
					else
					{
						if ( ! ActiveScreen.MsgBox( StrReplace( ms_tools.get_const('wicwk8kqxl'), '{PARAM1}', fldLngChild.id ), ms_tools.get_const('c_question'), 'question', 'yes,no' ) )
							return;
					}

					var iObtainCount = 1;
					var iObtainNum = ArrayCount( fldLngParam.items );
					for ( fldItemElem in fldLngParam.items )
					{
						ModalTaskMsg( 'Obtaining ' + fldLngParam.id + ' lng consts...\n' + iObtainCount + ' from ' + iObtainNum );
						fldLngChild.items.ObtainChildByKey( fldItemElem.id ).AssignElem( fldItemElem );
						iObtainCount++;
					}
				}
				fldLngChild.lng_file_url = sLngUrlParam;
				fldLngChild.items.Sort( 'id', '+' );

				ModalTaskMsg( 'Saving ' + fldLngParam.id + ' lng consts...' );
				ms_tools.obtain_shared_list_elem( 'lngs', fldLngChild.id, fldLngChild );
			}

			StartModalTask( '' );
			try
			{
				ModalTaskMsg( 'Opening lng consts...' );
				var teLng = OpenDoc( sLngUrlParam ).TopElem;

				if ( teLng.Name == 'lngs' )
				{
					for ( fldLngElem in teLng )
						add_virt_lng( fldLngElem );
				}
				else
				{
					add_virt_lng( teLng );
				}
			}
			catch ( err )
			{
				FinishModalTask();
				throw err;
			}
			FinishModalTask();

			if ( iCounter == 0 &amp;&amp; ! LdsIsServer )
				ActiveScreen.MsgBox( ms_tools.get_const('6fxkaxpz9o'), ms_tools.get_const('7ey6j94yku'), 'warning', 'ok' );
			return iCounter;
	"/>

	<get_web_str PROPERTY="1" CALLER-ENV="1" PARAM="sNameParam" EXPR="
			return tools_web.get_web_str( sNameParam );
	"/>




	<is_boss PROPERTY="1" CALLER-ENV="1" PARAM="iUserIDParam" PARAM="iPersonIDParam" EXPR="
			try
			{
				if ( iUserIDParam == null )
				{
					throw 'no_data';
				}
				is_boss_iUserID = OptInt( iUserIDParam );
				if ( is_boss_iUserID == undefined )
				{
					teUser = iUserIDParam;
					iUserIDParam = teUser.id.Value;
				}
				else
				{
					teUser = OpenDoc( UrlFromDocID( is_boss_iUserID ) ).TopElem;
				}
			}
			catch ( is_boss_err )
			{
				iUserIDParam = curUserID;
				teUser = curUser;
			}
			try
			{
				if ( iPersonIDParam == null )
				{
					throw 'no_data';
				}
				is_boss_iPersonID = OptInt( iPersonIDParam );
				if ( is_boss_iPersonID == undefined )
				{
					is_boss_iPersonID = iPersonIDParam;
					iPersonIDParam = iPersonIDParam.id.Value;
				}
				else
				{
					is_boss_tePerson = OpenDoc( UrlFromDocID( iPersonIDParam ) ).TopElem;
				}
			}
			catch ( is_boss_err )
			{
				is_boss_tePerson = curObject.person_id.OptForeignElem;
				if ( is_boss_tePerson == undefined )
					return false;
				iPersonIDParam = curObject.person_id;
			}
			try
			{
				if ( is_boss_tePerson.position_parent_id.HasValue &amp;&amp; ArrayOptFirstElem( XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/object_id = ' + is_boss_tePerson.position_parent_id + ' and $elem/is_native = true() return $elem' ) ) != undefined )
				{
					return true;
				}
				else if ( ! teUser.position_id.HasValue )
				{
					return false;
				}

				is_boss_catPosition = teUser.position_id.OptForeignElem;
				if ( is_boss_catPosition == undefined )
					return false;

				if ( ! is_boss_catPosition.is_boss || ( ! is_boss_catPosition.parent_object_id.HasValue &amp;&amp; ! is_boss_catPosition.org_id.HasValue ) )
					return false;

				if ( is_boss_catPosition.org_id.HasValue )
					is_boss_sXquery = XQuery( 'for $position in positions where $position/basic_collaborator_id = ' + iPersonIDParam + ' and $position/parent_object_id = ' + ( is_boss_catPosition.parent_object_id.HasValue ? is_boss_catPosition.parent_object_id : 'null()' ) + ' and $position/org_id = ' + is_boss_catPosition.org_id + ' return $position' );
				else
					is_boss_sXquery = XQuery( 'for $position in positions where $position/basic_collaborator_id = ' + iPersonIDParam + ' and $position/parent_object_id = ' + is_boss_catPosition.parent_object_id + ' return $position' );

				return ( ArrayOptFirstElem( is_boss_sXquery ) != undefined );
			}
			catch ( is_boss_err )
			{
				alert( is_boss_err );
				return false;
			}
	"/>

	<is_user_boss PROPERTY="1" CALLER-ENV="1" PARAM="iManagerIdParam" PARAM="iUserIdParam" PARAM="_catalog_names" PARAM="vBossType" EXPR="
			try
				{
					switch (vBossType)
					{
						case true: vBossType = ' and $elem/is_native = true()'; break;
						case false: vBossType = ' and $elem/is_native = false()'; break;
						default:
							vBossType = OptInt(vBossType);
							if (vBossType != undefined)
								vBossType = ' and $elem/boss_type_id = ' + vBossType;
							else
								vBossType = '';
					}
				}
				catch(_noType_)
				{
					vBossType = '';
				}
				_manager_array = XQuery( 'for $elem in func_managers where $elem/person_id = ' + iManagerIdParam + vBossType + ' order by $elem/catalog return $elem' );
				_manager_array_num = ArrayCount( _manager_array );

				if ( _manager_array_num == 0 )
					return false;

				_manager_array = ArrayDirect( _manager_array );
				try
				{
					switch ( _catalog_names )
					{
						case 'not_native':
							_catalog_names = 'collaborator,group,org,subdivision';
							break;

						case 'native':
							_catalog_names = 'position';
							break;

						case '':
						case null:
						case undefined:
							throw '_no_names_';
							break;
					}
				}
				catch ( _no_names_ )
				{
					_catalog_names = 'collaborator,group,org,position,subdivision';
				}

				_result_array = Array();
				_index = 0;
				_cur_elem = _manager_array[ 0 ];
				_sel_array = Array();
				if ( StrContains( _catalog_names, 'collaborator' ) )
				{
					while ( _cur_elem.catalog == 'collaborator' )
					{
						if(_cur_elem.object_id == iUserIdParam)
							return true;
						_sel_array[ _index ] = _cur_elem;
						_index++;
						if ( _index >= _manager_array_num )
							break;

						_cur_elem = _manager_array[ _index ];
					}
					if ( _index != 0 )
					{
						_result_array = ArrayExtractKeys( _sel_array, 'object_id' );
					}
				}
				else
				{
					while ( _cur_elem.catalog == 'collaborator' )
					{
						_index++;
						if ( _index >= _manager_array_num )
							return false;

						_cur_elem = _manager_array[ _index ];
					}
				}
				if ( _index >= _manager_array_num )
					return false;

				if ( StrContains( _catalog_names, 'group' ) )
				{
					while ( _cur_elem.catalog == 'group' )
					{
						if(ArrayOptFirstElem(XQuery( 'for $elem in group_collaborators where $elem/group_id = ' + _cur_elem.object_id + ' and $elem/collaborator_id=' + iUserIdParam +' return $elem' )) != undefined)
							return true;
						_index++;
						if ( _index >= _manager_array_num )
							return false;

						_cur_elem = _manager_array[ _index ];
					}
				}
				else
				{
					while ( _cur_elem.catalog == 'group' )
					{
						_index++;
						if ( _index >= _manager_array_num )
							return false;

						_cur_elem = _manager_array[ _index ];
					}
				}

				_org_counter = 0;
				_org_array = Array();
				if ( StrContains( _catalog_names, 'org' ) )
				{
					while ( _cur_elem.catalog == 'org' )
					{
						if(ArrayOptFirstElem(XQuery( 'for $elem in collaborators where $elem/org_id = ' + _cur_elem.object_id + ' and $elem/id=' + iUserIdParam +' return $elem' )) != undefined)
							return true;
						_org_array[ _org_counter ] = _cur_elem;
						_org_counter++;

						_index++;
						if ( _index >= _manager_array_num )
							return false;

						_cur_elem = _manager_array[ _index ];
					}
				}
				else
				{
					while ( _cur_elem.catalog == 'org' )
					{
						_index++;
						if ( _index >= _manager_array_num )
							return false;

						_cur_elem = _manager_array[ _index ];
					}
				}

				if ( StrContains( _catalog_names, 'position' ) )
				{
					while ( _cur_elem.catalog == 'position' )
					{
						if ( ArrayOptFindByKey( _org_array, _cur_elem.org_id, 'object_id' ) == undefined )
						{
							if ( _cur_elem.parent_id.HasValue || _cur_elem.org_id.HasValue )
							{
								if ( ArrayOptFirstElem( tools.xquery( 'for $elem in subs where IsHierChild( $elem/id, ' + ( _cur_elem.parent_id.HasValue ? _cur_elem.parent_id : _cur_elem.org_id ) + ' ) and $elem/basic_collaborator_id = ' + iUserIdParam + ' order by $elem/Hier() return $elem/basic_collaborator_id' ) ) != undefined )
									return true;
							}
						}

						_index++;
						if ( _index >= _manager_array_num )
							return false;

						_cur_elem = _manager_array[ _index ];
					}
				}
				else
				{
					while ( _cur_elem.catalog == 'position' )
					{
						_index++;
						if ( _index >= _manager_array_num )
							return false;

						_cur_elem = _manager_array[ _index ];
					}
				}
				if ( StrContains( _catalog_names, 'subdivision' ) )
				{
					while ( _cur_elem.catalog == 'subdivision' )
					{
						if ( ArrayOptFindByKey( _org_array, _cur_elem.org_id, 'object_id' ) == undefined )
						{
							if ( ArrayOptFirstElem( tools.xquery( 'for $elem in subs where IsHierChild( $elem/id, ' + _cur_elem.object_id + ' ) and $elem/basic_collaborator_id = ' + iUserIdParam + ' order by $elem/Hier() return $elem/basic_collaborator_id' ) ) != undefined )
								return true;
							_result_array = ArrayUnion( _result_array, _sel_array );
						}

						_index++;
						if ( _index >= _manager_array_num )
							return false;

						_cur_elem = _manager_array[ _index ];
					}
				}
				return false;
	"/>

	<is_self_cur_user PROPERTY="1" CALLER-ENV="1" PARAM="iUserIDParam" EXPR="
			try
			{
				teUser = OpenDoc( UrlFromDocID( iUserIDParam ) ).TopElem;
			}
			catch ( err2 )
			{
				iUserIDParam = curUserID;
				teUser = curUser;
			}
			try
			{
				_cur_user = 0;
				try
				{
					_cur_user = COLLABORATOR_USER_ID;
				}
				catch(ex)
				{
					try
					{
						if (curObject.Name=='request')
						{
							_cur_user = curObject.person_id.ForeignElem.id;
						}
					}
					catch(ex2)
					{
					}
				}

				if ( _cur_user==iUserIDParam)
				{
					return true;
				}

				return false;
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>





	<is_main_boss PROPERTY="1" CALLER-ENV="1" EXPR="
			try
			{
				if ( ! curUser.position_id.HasValue )
					return false;

				_cur_position = curUser.position_id.ForeignElem;
				if ( ! _cur_position.is_boss || ! _cur_position.parent_object_id.HasValue )
					return false;

				_cur_parent_object_id = OpenDoc( UrlFromDocID( _cur_position.parent_object_id ) ).TopElem.parent_object_id;
				if ( _cur_parent_object_id != null )
					return false;

				_sub_counter = 0;
				_cur_position_id = curObject.person_id.ForeignElem.position_id;
				if ( ! _cur_position_id.HasValue )
					return false;

				_cur_object_id = _cur_position_id.ForeignElem.parent_object_id;
				if ( ! _cur_object_id.HasValue )
					return false;

				_cur_parent_id = OpenDoc( UrlFromDocID( _cur_object_id ) ).TopElem.parent_object_id;
				while( _cur_parent_id != null &amp;&amp; _sub_counter &lt; 50 )
				{
					_cur_object_id = _cur_parent_id;
					_cur_parent_id = OpenDoc( UrlFromDocID( _cur_parent_id ) ).TopElem.parent_object_id;
					_sub_counter++;
				}
				if ( _cur_parent_id != null )
					return false;

				_xquery = XQuery( 'for $position in positions where $position/basic_collaborator_id = ' + curUserID + ' and $position/parent_object_id = ' + _cur_object_id + ' return $position' );

				return ( ArrayCount( _xquery ) &gt; 0 );
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>

	<is_real_boss PROPERTY="1" CALLER-ENV="1" EXPR="
			try
			{
				_boss_catalog = tools.get_user_boss(curObject.person_id);
				if (_boss_catalog != undefined &amp;&amp; _boss_catalog.id == curUserID)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>

	<is_cost_center_boss PROPERTY="1" CALLER-ENV="1" EXPR="
			try
			{
				_cost_center_bossArray = tools.get_cost_center_boss_by_person_id(curObject.person_id);
				for( _cost_center_boss_id in _cost_center_bossArray )
				{
					if ( _cost_center_boss_id == curUserID)
						return true;
				}
				return false;
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>

	<is_next_boss PROPERTY="1" CALLER-ENV="1" EXPR="
			try
			{
				_cur_user = curObject.person_id.ForeignElem;
				if ( ! _cur_user.position_id.HasValue )
					return false;

				_sub = _cur_user.position_parent_id.OptForeignElem;
				if (_sub != undefined && _sub.parent_object_id.HasValue &amp;&amp; ArrayOptFirstElem( XQuery( 'for $elem in func_managers where $elem/person_id = ' + curUserID + ' and $elem/object_id = ' + _sub.parent_object_id + ' and $elem/is_native = true() return $elem' ) ) != undefined )
				{
					return true;
				}
				else if ( ! curUser.position_id.HasValue )
				{
					return false;
				}

				if ( ! curUser.position_id.HasValue )
					return false;

				_cur_position = curUser.position_id.ForeignElem;
				if ( ! _cur_position.is_boss || ! _cur_position.parent_object_id.HasValue )
					return false;

				_cur_user_position = _cur_user.position_id.ForeignElem;
				if ( ! _cur_user_position.parent_object_id.HasValue )
					return false;

				_cur_user_parent_object_id = OpenDoc( UrlFromDocID( _cur_user_position.parent_object_id ) ).TopElem.parent_object_id;
				return ( _cur_user_parent_object_id == _cur_position.parent_object_id );
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>

	<is_boss_by_subdivision_id PROPERTY="1" CALLER-ENV="1" PARAM="_sub_id" EXPR="
			try
			{
				catPosition = ArrayOptFirstElem( XQuery( 'for $elem in positions where $elem/basic_collaborator_id = ' + curUserID + ' and $elem/parent_object_id = ' + _sub_id + ' and $elem/is_boss = true() return $elem' ) );
				if ( catPosition == undefined )
					catPosition = ArrayOptFirstElem( XQuery( 'for $elem in func_managers where $elem/person_id = ' + curUserID + ' and $elem/object_id = ' + _sub_id + ' and $elem/is_native = true() return $elem' ) );

				return catPosition != undefined;
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>

	<is_by_position_id PROPERTY="1" CALLER-ENV="1" PARAM="_position_id" EXPR="
			try
			{
				return ( OpenDoc( UrlFromDocID( Int( _position_id ) ) ).TopElem.basic_collaborator_id == curUserID );
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>

	<is_by_group_id PROPERTY="1" CALLER-ENV="1" PARAM="_group_id" EXPR="
			try
			{
				return OpenDoc( UrlFromDocID( Int( _group_id ) ) ).TopElem.collaborators.ChildByKeyExists( OptInt( curUserID, 0 ) );
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>


	<is_person_func_manager PROPERTY="1" CALLER-ENV="1" EXPR="
			try
			{
				if ( ! curObject.person_id.HasValue )
					return false;

				return OpenDoc( UrlFromDocID( curObject.person_id ) ).TopElem.func_managers.ChildByKeyExists( OptInt( curUserID, 0 ) );
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>

	<is_person_org_func_manager PROPERTY="1" CALLER-ENV="1" EXPR="
			try
			{
				if ( ! curObject.person_id.HasValue )
					return false;

				personDoc = OpenDoc( UrlFromDocID( curObject.person_id ) ).TopElem;
				if ( ! personDoc.org_id.HasValue )
					return false;

				return OpenDoc( UrlFromDocID( personDoc.org_id ) ).TopElem.func_managers.ChildByKeyExists( OptInt( curUserID, 0 ) );
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>

	<is_func_manager PROPERTY="1" CALLER-ENV="1" EXPR="
			try
			{
				personArray = tools.get_sub_person_ids_by_func_manager_id( curUserID );
				return ( ArrayOptFind( personArray, 'This==' + curObject.person_id ) != undefined );
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>
	<is_project_manager PROPERTY="1" CALLER-ENV="1" EXPR="
			try
			{
				catProjectManagerBossType = ArrayOptFirstElem( XQuery( 'for $elem in boss_types where $elem/code = \'project_manager\' return $elem' ) );
				if( catProjectManagerBossType != undefined )
				{
					return ArrayOptFirstElem( XQuery( 'for $elem in project_participants where $elem/object_id = ' + curUserID + ' and $elem/project_id = ' + curObject.project_id + ' and ( $elem/status_id = \'active\' or $elem/status_id = null() )  return $elem' ) ) != undefined;
				}
				return false;
			}
			catch ( err1 )
			{
				alert( err1 );
				return false;
			}
	"/>

	<is_statement_date PROPERTY="1" CALLER-ENV="1" PARAM="iActivityIDParam" PARAM="sValueParam" PARAM="sUslParam" EXPR="
			sDateCondition = '$elem/create_date ';
			if ( sValueParam == '' )
			{
				sDateCondition += '= null()';
			}
			else
			{
				sDateCondition += StrReplace( common.all_option_types.GetOptChildByKey( sUslParam ).caption, '==', '=' );
				if ( StrContains( sValueParam, 'CurDateOffset(' ) )
				{
					oDateDelta = StrReplace( sValueParam, 'CurDateOffset(', '' );
					oDateDelta = StrReplace( sValueParam, ')', '' );
					oDateDelta = Int( Trim( oDateDelta ) );
					sDateCondition += ' date(\'' + DateOffset( CurDate, oDateDelta ) + '\')';
				}
				else if ( sValueParam == 'CurDate' )
				{
					sDateCondition += ' date(\'' + CurDate + '\')';
				}
				else
				{
					sDateCondition += ' date(' + XQueryLiteral( sValueParam ) + ')';
				}
			}
			return ArrayOptFirstElem( XQuery( alert('for $elem in statements where $elem/person_id = ' + curUserID + ' and $elem/activity_id = ' + iActivityIDParam + ' and ' + sDateCondition + ' return $elem/Fields(\'id\')') ) ) != undefined;
	"/>



	<object_filling PROPERTY="1" PARAM="_type" PARAM="_source" PARAM="_object_id" PARAM="_object_doc" EXPR="
				try
				{
					try
					{
						if ( _object_doc == null || _object_doc == '' )
							throw 'no_obj';

						objectDoc = _object_doc;
					}
					catch ( hg )
					{
						objectDoc = OpenDoc( UrlFromDocID( _object_id ) ).TopElem;
					}
				}
				catch ( ee )
				{
					return false;
				}

				try
				{
					if ( _source.ChildExists( 'workflow_id' ) )
					{
						_wf_id = objectDoc.get_workflow_id();
						if ( _wf_id != null )
							_source.workflow_id = _wf_id;
					}
				}
				catch ( ee )
				{
				}

				if ( _source.ChildExists( 'object_name' ) )
					try
					{
						_source.object_name = tools.get_disp_name_value( objectDoc );
					}
					catch ( err )
					{
					}

				if ( _source.ChildExists( 'object_code' ) &amp;&amp; objectDoc.ChildExists( 'code' ) )
					_source.object_code = objectDoc.code;

				if ( _source.ChildExists( 'object_start_date' ) &amp;&amp; objectDoc.ChildExists( 'start_date' ) )
					_source.object_start_date = objectDoc.start_date;

				return true;
	"/>

	<common_filling PROPERTY="1" CALLER-ENV="1" PARAM="_type" PARAM="_source" PARAM="_object_id" PARAM="_object_doc" PARAM="_custom_flag" EXPR="
				var iObjectID = OptInt( _object_id, null );
				try
				{
					try
					{
						if ( _object_doc == null || _object_doc == '' )
							throw 'no_obj';

						objectDoc = _object_doc;
					}
					catch ( hg )
					{
						objectDoc = null;
						if ( iObjectID != null )
						{
							objectDoc = OpenDoc( UrlFromDocID( iObjectID ) ).TopElem;
						}
					}
				}
				catch ( ee )
				{
					return false;
				}
				try
				{
					_custom_flag;
				}
				catch ( ff )
				{
					_custom_flag = true;
				}

				arrCommonFillingFields = [];
				switch( _type )
				{
					case 'subdivision':
						if ( _source.ChildExists( 'subdivision_name' ) )
							_source.subdivision_name = objectDoc.name;
						break;

					case 'org':
						if ( _source.ChildExists( 'org_name' ) )
							_source.org_name = objectDoc.name;
						break;

					case 'position':
					{
						arrCommonFillingFields = [ { 'source': 'name', 'target': 'position_name' } ];
						break;
					}

					case 'event':
						if ( _source.ChildExists( 'event_name' ) )
							_source.event_name = objectDoc.name;

						if ( _source.ChildExists( 'event_start_date' ) )
							_source.event_start_date = objectDoc.start_date;

						if ( _source.ChildExists( 'event_result_type_id' ) &amp;&amp; objectDoc.default_event_result_type_id.HasValue )
							_source.event_result_type_id = objectDoc.default_event_result_type_id;
						tools.admin_access_copying( null, _source, iObjectID, objectDoc );
						break;

					case 'course':
						if ( _source.ChildExists( 'course_name' ) )
							_source.course_name = objectDoc.name;

						if ( _source.ChildExists( 'course_code' ) )
							_source.course_code = objectDoc.code;

						if ( _source.ChildExists( 'duration' ) )
							_source.duration = objectDoc.duration;

						if ( _source.ChildExists( 'no_encoding_core_lesson' ) )
							_source.no_encoding_core_lesson = objectDoc.no_encoding_core_lesson;
						tools.admin_access_copying( null, _source, iObjectID, objectDoc );
						break;

					case 'assessment':
						if ( _source.ChildExists( 'assessment_name' ) )
							_source.assessment_name = objectDoc.title;

						if ( _source.ChildExists( 'assessment_code' ) )
							_source.assessment_code = objectDoc.code;

						if ( _source.ChildExists( 'duration' ) )
							_source.duration = objectDoc.duration_days;

						if ( _source.ChildExists( 'attempts_num' ) )
							_source.attempts_num = objectDoc.attempts_num;
						tools.admin_access_copying( null, _source, iObjectID, objectDoc );
						break;

					case 'request_type':
						if ( _source.ChildExists( 'request_type_id' ) )
							_source.request_type_id = iObjectID;

						if ( _source.ChildExists( 'type' ) )
							_source.type = objectDoc.object_type;

						if ( _source.ChildExists( 'workflow_id' ) &amp;&amp; ! _source.workflow_id.HasValue )
							_source.workflow_id = objectDoc.workflow_id;

						if ( _source.ChildExists( 'is_group' ) &amp;&amp; ! _source.is_group )
							_source.is_group = objectDoc.is_group;
						break;
					case 'task_type':
						if ( _source.ChildExists( 'task_type_id' ) )
							_source.task_type_id = iObjectID;

						if ( _source.ChildExists( 'workflow_id' ) &amp;&amp; ! _source.workflow_id.HasValue )
							_source.workflow_id = objectDoc.workflow_id;

						if ( _source.ChildExists( 'source_object_type' ) &amp;&amp; ! _source.source_object_type.HasValue )
							_source.source_object_type = objectDoc.related_object_type;

						break;
					case 'presence_state':
						if ( _source.ChildExists( 'presence_state_id' ) )
							_source.presence_state_id = iObjectID;

						if ( _source.ChildExists( 'workflow_id' ) &amp;&amp; ! _source.workflow_id.HasValue )
							_source.workflow_id = objectDoc.workflow_id;

						break;
					case 'project':
						if ( _source.ChildExists( 'project_id' ) )
							_source.project_id = iObjectID;

						if ( _source.ChildExists( 'workflow_id' ) &amp;&amp; ! _source.workflow_id.HasValue )
							_source.workflow_id = objectDoc.workflow_id;

						break;

					case 'response_type':
						if ( _source.ChildExists( 'response_type_id' ) )
							_source.response_type_id = iObjectID;

						if ( _source.ChildExists( 'type' ) )
							_source.type = objectDoc.object_type;
						break;

					case 'education_method':
						if ( _source.ChildExists( 'duration_plan' ) )
							_source.duration_plan = objectDoc.duration;

						if ( _source.ChildExists( 'duration_fact' ) &amp;&amp; ! _source.duration_fact.HasValue )
							_source.duration_fact = _source.duration_plan;

						if ( _source.ChildExists( 'duration_days_plan' ) )
							_source.duration_days_plan = objectDoc.duration_days;

						if ( _source.ChildExists( 'duration_days_fact' ) &amp;&amp; ! _source.duration_days_fact.HasValue )
							_source.duration_days_fact = _source.duration_days_plan;

						if ( _source.ChildExists( 'max_person_num' ) )
							_source.max_person_num = objectDoc.person_num;

						if ( _source.ChildExists( 'name' ) &amp;&amp; ! _source.name.HasValue )
							_source.name = objectDoc.name;

						if ( _source.ChildExists( 'default_response_type_id' ) &amp;&amp;  objectDoc.ChildExists( 'default_response_type_id' ))
							_source.default_response_type_id = objectDoc.default_response_type_id ;

						if ( _source.ChildExists( 'mandatory_fill_response' ) &amp;&amp;  objectDoc.ChildExists( 'mandatory_fill_response' ))
							_source.mandatory_fill_response = objectDoc.mandatory_fill_response ;

						if ( _source.ChildExists( 'cost' ) &amp;&amp; ( !_source.cost.HasValue || _source.cost == 0.0 ) )
						{
							_source.cost = objectDoc.cost;
							_source.currency = objectDoc.currency;
							_source.cost_type = objectDoc.cost_type;
						}

						if ( _source.ChildExists( 'education_org_id' ) )
						{
							if ( objectDoc.type == 'org' )
							{
								_source.education_org_id = objectDoc.education_org_id;
								if ( _source.ChildExists( 'education_org_type' ) )
									_source.education_org_type = 'id';
							}
							else
							{
								_source.education_org_id.Clear();
							}
						}

						if ( _source.ChildExists( 'event_form' ) &amp;&amp; ! _source.event_form.HasValue )
							_source.event_form = objectDoc.event_form;

						_lector_count = 0;
						if ( _source.ChildExists( 'lectors' ) &amp;&amp; objectDoc.lectors.ChildNum &gt; 0 )
							for ( _lector in objectDoc.lectors )
								if ( ! _source.lectors.ChildByKeyExists( _lector.PrimaryKey ) )
								{
									_source.lectors.ObtainChildByKey( _lector.PrimaryKey );
									_lector_count++;
								}

						if ( _source.ChildExists( 'prev_testing' ) &amp;&amp; _source.prev_testing.assessments.ChildNum == 0 )
							_source.prev_testing.AssignElem( objectDoc.prev_testing );
						if ( _source.ChildExists( 'post_testing' ) &amp;&amp; _source.post_testing.assessments.ChildNum == 0 )
							_source.post_testing.AssignElem( objectDoc.post_testing );

						if ( _source.ChildExists( 'expense_items' ) &amp;&amp; _source.expense_items.ChildNum == 0 )
							_source.expense_items.AssignElem( objectDoc.expense_items );

						try
						{
							if ( _custom_flag &amp;&amp; _lector_count &gt; 0 )
								Screen.MsgBox( ms_tools.get_const('1rjpznxjku'), ms_tools.get_const('c_info'), 'info', 'ok' );
						}
						catch ( dd )
						{
						}
						break;

					case 'education_org':
						if ( _source.ChildExists( 'education_org_name' ) )
							_source.education_org_name = objectDoc.disp_name;
/*
						_lector_count = 0;
						if ( _source.ChildExists( 'lectors' ) &amp;&amp; objectDoc.lectors.ChildNum &gt; 0 )
							for ( _lector in objectDoc.lectors )
								if ( ! _source.lectors.ChildByKeyExists( _lector.PrimaryKey ) )
								{
									_source.lectors.ObtainChildByKey( _lector.PrimaryKey );
									_lector_count++;
								}

						try
						{
							if ( _custom_flag &amp;&amp; _lector_count &gt; 0 )
								Screen.MsgBox( ms_tools.get_const('gflbo1lj3u'), ms_tools.get_const('c_info'), 'info', 'ok' );
						}
						catch ( dd )
						{
						}
*/
						break;

					case 'collaborator':
						arrCommonFillingFields = [ { 'source': 'fullname', 'target': 'person_fullname' },
							{ 'source': 'fullname', 'target': 'collaborator_fullname' },
							{ 'source': 'fullname', 'target': 'person_name' },
							{ 'source': 'current_state', 'target': 'person_current_state' },
							{ 'source': 'code', 'target': 'person_code' } ];

						if ( _source.ChildExists( 'person_position_name' ) || _source.ChildExists( 'person_position_id' ) || _source.ChildExists( 'person_position_code' ) || _source.ChildExists( 'position_name' ) )
						{
							if ( objectDoc.position_id.HasValue )
							{
								catPosition = objectDoc.position_id.OptForeignElem;
								if ( catPosition != undefined )
								{
									if ( _source.ChildExists( 'person_position_id' ) )
										_source.person_position_id = catPosition.id;
									if ( _source.ChildExists( 'person_position_name' ) )
										_source.person_position_name = catPosition.name;
									if ( _source.ChildExists( 'position_name' ) )
										_source.position_name = catPosition.name;
									if ( _source.ChildExists( 'person_position_code' ) )
										_source.person_position_code = catPosition.code;

									if ( _source.ChildExists( 'person_subdivision_name' ) || _source.ChildExists( 'person_subdivision_id' ) || _source.ChildExists( 'person_subdivision_code' ) )
									{
										if ( catPosition.parent_object_id.HasValue )
										{
											catSubdivision = catPosition.parent_object_id.OptForeignElem;
											if ( catSubdivision != undefined )
											{
												if ( _source.ChildExists( 'person_subdivision_id' ) )
													_source.person_subdivision_id = catSubdivision.id;
												if ( _source.ChildExists( 'person_subdivision_name' ) )
													_source.person_subdivision_name = catSubdivision.name;
												if ( _source.ChildExists( 'person_subdivision_code' ) )
													_source.person_subdivision_code = catSubdivision.code;
											}
										}
										else
										{
											if ( _source.ChildExists( 'person_subdivision_name' ) )
												_source.person_subdivision_name.Clear();
											if ( _source.ChildExists( 'person_subdivision_id' ) )
												_source.person_subdivision_id.Clear();
											if ( _source.ChildExists( 'person_subdivision_code' ) )
												_source.person_subdivision_code.Clear();
										}
									}
								}
							}
							else
							{
								if ( _source.ChildExists( 'person_position_name' ) )
									_source.person_position_name.Clear();
								if ( _source.ChildExists( 'person_position_id' ) )
									_source.person_position_id.Clear();
								if ( _source.ChildExists( 'person_position_code' ) )
									_source.person_position_code.Clear();
								if ( _source.ChildExists( 'position_name' ) )
									_source.position_name.Clear();
								if ( _source.ChildExists( 'person_subdivision_name' ) )
									_source.person_subdivision_name.Clear();
								if ( _source.ChildExists( 'person_subdivision_id' ) )
									_source.person_subdivision_id.Clear();
								if ( _source.ChildExists( 'person_subdivision_code' ) )
									_source.person_subdivision_code.Clear();
							}
						}

						if ( _source.ChildExists( 'person_org_name' ) || _source.ChildExists( 'person_org_id' ) || _source.ChildExists( 'person_org_code' ) )
						{
							if ( objectDoc.org_id.HasValue )
							{
								catOrg = objectDoc.org_id.OptForeignElem;
								if ( catOrg != undefined )
								{
									if ( _source.ChildExists( 'person_org_id' ) )
										_source.person_org_id = catOrg.id;
									if ( _source.ChildExists( 'person_org_name' ) )
										_source.person_org_name = catOrg.name;
									if ( _source.ChildExists( 'person_org_code' ) )
										_source.person_org_code = catOrg.code;
								}
							}
							else
							{
								if ( _source.ChildExists( 'person_org_name' ) )
									_source.person_org_name.Clear();
								if ( _source.ChildExists( 'person_org_id' ) )
									_source.person_org_id.Clear();
								if ( _source.ChildExists( 'person_org_code' ) )
									_source.person_org_code.Clear();
							}
						}

						if ( _source.ChildExists( 'person_instance_id' ) )
						{
							if ( objectDoc.ChildExists( 'doc_info' ) )
								_source.person_instance_id = objectDoc.doc_info.creation.app_instance_id;
							else
								_source.person_instance_id = objectDoc.app_instance_id;
						}
						break;

					case 'item':
						arrCommonFillingFields = [ { 'source': 'title', 'target': 'title' },
							{ 'source': 'question_text', 'target': 'question_text' },
							{ 'source': 'type_id', 'target': 'type_id' },
							{ 'source': 'question_points', 'target': 'question_points' } ];
						break;

					case 'submission_type':
						arrCommonFillingFields = [ { 'source': 'name', 'target': 'submission_type_name' } ];
						break;

					case 'activity':
						arrCommonFillingFields = [ { 'source': 'code', 'target': 'activity_code' },
							{ 'source': 'name', 'target': 'activity_name' } ];
						break;

					case 'object':
						if ( _source.ChildExists( 'object_type' ) )
						{
							if ( iObjectID == null )
							{
								_source.object_type.Clear();
							}
							else
							{
								_source.object_type = objectDoc.Name;
							}
						}

						if ( _source.ChildExists( 'object_name' ) )
						{
							if ( iObjectID == null )
							{
								_source.object_name.Clear();
							}
							else
							{
								_source.object_name = tools.get_object_name_field_value( objectDoc );
							}
						}

						arrCommonFillingFields = [ { 'source': 'code', 'target': 'object_code' },
							{ 'source': 'start_date', 'target': 'object_start_date' } ];
						break;

					case 'tag':
						if ( _source.ChildExists( 'tag_name' ) )
							_source.tag_name = objectDoc.name;
						break;

					case 'object_data_type':
						arrCommonFillingFields = [ { 'value': iObjectID, 'target': 'object_data_type_id' },
							{ 'source': 'object_type', 'target': 'object_type' },
							{ 'source': 'sec_object_type', 'target': 'sec_object_type' } ];
						break;

					case 'custom_web_template':
						arrCommonFillingFields = [ { 'source': 'name', 'target': 'custom_web_template_name' } ];
						break;
				}

				for ( oCommonFillingFieldElem in arrCommonFillingFields )
				{
					oValue = oCommonFillingFieldElem.GetOptProperty( 'value' );
					if ( _source.ChildExists( oCommonFillingFieldElem.target ) &amp;&amp; ( oValue != undefined || objectDoc.ChildExists( oCommonFillingFieldElem.source ) || objectDoc.PropertyExists( oCommonFillingFieldElem.source ) ) )
					{
						if ( iObjectID == null )
						{
							_source.Child( oCommonFillingFieldElem.target ).Clear();
						}
						else
						{
							_source.Child( oCommonFillingFieldElem.target ).Value = ( oValue == undefined ? GetObjectProperty( objectDoc, oCommonFillingFieldElem.source ) : oValue );
						}
					}
				}
				return true;
	"/>


	<common_clear PROPERTY="1" PARAM="_type" PARAM="_source" PARAM="_ps" PARAM="_doc" EXPR="
				try
				{
					if ( _ps.ChildExists( 'sd' ) )
						_ps.sd.Clear();
				}
				catch ( dd )
				{
				}

				switch( _type )
				{
					case 'subdivision':
					{
						if ( _source.ChildExists( 'subdivision_name' ) )
						{
							_source.subdivision_name.Clear();
						}
						break;
					}

					case 'org':
					{
						if ( _source.ChildExists( 'org_name' ) )
						{
							_source.org_name.Clear();
						}
						break;
					}

					case 'position':
					{
						if ( _source.ChildExists( 'position_name' ) )
						{
							_source.position_name.Clear();
						}
						break;
					}

					case 'event':
						if ( _source.ChildExists( 'event_name' ) )
							_source.event_name.Clear();

						if ( _source.ChildExists( 'event_start_date' ) )
							_source.event_start_date.Clear();
						break;

					case 'education_org':
						if ( _source.ChildExists( 'education_org_name' ) )
							_source.education_org_name = Clear();

					case 'course':
						if ( _source.ChildExists( 'course_name' ) )
							_source.course_name.Clear();

						if ( _source.ChildExists( 'course_code' ) )
							_source.course_code.Clear();
						break;

					case 'assessment':
						if ( _source.ChildExists( 'assessment_name' ) )
							_source.assessment_name.Clear();

						if ( _source.ChildExists( 'assessment_code' ) )
							_source.assessment_code.Clear();
						break;

					case 'request_type':
						if ( _source.ChildExists( 'request_type_id' ) )
							_source.request_type_id.Clear();

						if ( _source.Doc.NeverSaved )
						{
							if ( _source.ChildExists( 'type' ) )
								_source.type.Clear();

							if ( _source.ChildExists( 'workflow_id' ) &amp;&amp; ! _source.workflow_id.HasValue )
								_source.workflow_id.Clear();

							if ( _source.ChildExists( 'is_group' ) )
								_source.is_group.Clear();
						}
						break;

					case 'task_type':
						if ( _source.ChildExists( 'task_type_id' ) )
						{
							_source.task_type_id.Clear();
						}

						if ( _source.Doc.NeverSaved )
						{
							if ( _source.ChildExists( 'workflow_id' ) )
							{
								_source.workflow_id.Clear();
							}
						}
						break;

					case 'response_type':
						if ( _source.ChildExists( 'response_type_id' ) )
							_source.response_type_id.Clear();

						if ( _source.Doc.NeverSaved )
						{
							if ( _source.ChildExists( 'type' ) )
								_source.type.Clear();
						}
						break;

					case 'collaborator':
						if ( _source.ChildExists( 'person_fullname' ) )
							_source.person_fullname.Clear();

						if ( _source.ChildExists( 'collaborator_fullname' ) )
							_source.collaborator_fullname.Clear();

						if ( _source.ChildExists( 'person_name' ) )
							_source.person_name.Clear();

						if ( _source.ChildExists( 'person_org_name' ) )
							_source.person_org_name.Clear();

						if ( _source.ChildExists( 'person_position_name' ) )
							_source.person_position_name.Clear();

						if ( _source.ChildExists( 'person_position_id' ) )
							_source.person_position_id.Clear();

						if ( _source.ChildExists( 'person_org_id' ) )
							_source.person_org_id.Clear();

						if ( _source.ChildExists( 'person_subdivision_id' ) )
							_source.person_subdivision_id.Clear();

						if ( _source.ChildExists( 'person_org_code' ) )
							_source.person_org_code.Clear();

						if ( _source.ChildExists( 'person_subdivision_name' ) )
							_source.person_subdivision_name.Clear();

						if ( _source.ChildExists( 'person_instance_id' ) )
							_source.person_instance_id.Clear();

						if ( _source.ChildExists( 'person_current_state' ) )
							_source.person_current_state.Clear();

						if ( _source.ChildExists( 'person_code' ) )
							_source.person_code.Clear();
						break;

					case 'object':
						if ( _source.ChildExists( 'object_type' ) )
							_source.object_type.Clear();

						if ( _source.ChildExists( 'object_name' ) )
							_source.object_name.Clear();

						if ( _source.ChildExists( 'object_code' ) )
							_source.object_code.Clear();

						if ( _source.ChildExists( 'object_start_date' ) )
							_source.object_start_date.Clear();
						break;
					case 'education_type':
						if ( _source.ChildExists( 'educ_type_id' ) )
						{
							_source.educ_type_id.Clear();
						}
						break;
				}
				return true;
	"/>




	<active_learning_finish PROPERTY="1" PARAM="_learning_id" PARAM="_source" PARAM="_course_doc" EXPR="
			activeLearningID = Int( _learning_id );
			try
			{
				if ( _source == null || _source == '' )
					throw 'ne_active_learning_doc';

				activeLearningDoc = _source;
			}
			catch ( err )
			{
				activeLearningDoc = OpenDoc( UrlFromDocID( activeLearningID ) ).TopElem;
			}

			iFinishTestCount = 0;
			for ( fldPartElem in activeLearningDoc.parts )
			{
				try
				{
					if ( fldPartElem.type == 'test' &amp;&amp; fldPartElem.assessment_id.HasValue &amp;&amp; fldPartElem.cur_state_id &gt; 0 )
					{
						bAttemptFlag = tools.active_test_learning_finish_attempt( activeLearningID, fldPartElem.code, null, true, null );
						iFinishTestCount++;
					}
				}
				catch ( err )
				{
					if ( LdsIsServer )
						alert('ERROR: wtv_tools.xml: active_learning_finish: ' +  err );
					else
						LogEvent( 'spxml', 'ERROR: wtv_tools.xml: active_learning_finish: ' +  err );
				}
			}
			if ( iFinishTestCount != 0 )
				activeLearningDoc = OpenDoc( UrlFromDocID( activeLearningID ) ).TopElem;

			try
			{
				if ( _course_doc == null || _course_doc == '' )
					throw 'ne_course_doc';

				courseDoc = _course_doc;
			}
			catch ( err )
			{
				courseDoc = OpenDoc( UrlFromDocID( activeLearningDoc.course_id ) ).TopElem;
			}

			docLearning = OpenNewDoc( 'x-local://wtv/wtv_learning.xmd' );
			learningDoc = docLearning.TopElem;
			learningDoc.AssignElem( activeLearningDoc );
			if ( ! learningDoc.last_usage_date.HasValue )
				learningDoc.last_usage_date = Date();
			learningDoc.state_id = ( learningDoc.score &gt;= courseDoc.mastery_score ? 4 : 3 );

			for ( _part in learningDoc.parts )
				try
				{
					path = tools.get_qti_path( courseDoc, _part );
					activeLearningPart = activeLearningDoc.parts.GetChildByKey( _part.PrimaryKey );
					_part.lesson_report = StrSimpleEncrypt( tools.report_decrypt( _part, path, activeLearningPart.qti_text ) );
				}
				catch ( err )
				{
					//alert( err );
				}

			learningDoc.active_learning_id = activeLearningID;
			learningDoc.active_learning_deleted = true;

			//define level
			min = 1000000;
			for ( _level in courseDoc.estimation_levels )
			{
				try
				{
					Real( _level.score );
					delta = learningDoc.score - _level.score;
					if ( delta &gt;= 0 &amp;&amp; delta &lt; min )
					{
						min = delta;
						learningDoc.text_result = _level.desc;
					}
				}
				catch ( err )
				{
					continue;
				}
			}

			docLearning.BindToDb( DefaultDb );
			docLearning.Save();

			tools_proctor.finish_learning_record_thread( activeLearningID, docLearning.DocID, docLearning.TopElem, courseDoc );

			try
			{
				if ( learningDoc.education_plan_id.HasValue )
				{
					tools.call_code_library_method( 'libEducation', 'update_education_plan', [ learningDoc.education_plan_id, null, learningDoc.person_id ] );
				}
			}
			catch ( err )
			{
				if ( LdsIsServer )
					alert( err );
				else
					LogEvent( 'spxml', err );
			}

			ms_tools.raise_system_event( 'common_finish_course', null, docLearning.DocID, docLearning );

			DeleteDoc( UrlFromDocID( activeLearningID ), ! global_settings.settings.save_deleted_in_trash );

			return docLearning.DocID;
	"/>

	<active_test_learning_finish PROPERTY="1" PARAM="_learning_id" PARAM="_source" PARAM="_assessment_doc" PARAM="iPersonIDParam" PARAM="bFinishTest" EXPR="
			activeLearningID = Int( _learning_id );
			try
			{
				if ( _source == null || _source == '' )
					throw '_source_null_';

				activeLearningDoc = _source;
			}
			catch ( kjh )
			{
				activeLearningDoc = OpenDoc( UrlFromDocID( activeLearningID ) ).TopElem;
			}
			assessmentID = activeLearningDoc.assessment_id.Value;
			try
			{
				if ( _assessment_doc == null || _assessment_doc == '' )
					throw '_source_null_';

				assessmentDoc = _assessment_doc;
			}
			catch ( kjh )
			{
				assessmentDoc = OpenDoc( UrlFromDocID( assessmentID ) ).TopElem;
			}
			try
			{
				if ( bFinishTest == null || bFinishTest == '' || bFinishTest == undefined )
					throw '';

				bFinishTest = tools_web.is_true( bFinishTest );
			}
			catch ( kjh )
			{
				bFinishTest = true;
			}

			docLearning = OpenNewDoc( 'x-local://wtv/wtv_test_learning.xmd' );
			learningDoc = docLearning.TopElem;
			learningDoc.AssignElem( activeLearningDoc, true );
			if ( ! learningDoc.last_usage_date.HasValue )
				learningDoc.last_usage_date = Date();
			if ( ! learningDoc.start_learning_date.HasValue &amp;&amp; learningDoc.start_usage_date.HasValue )
				learningDoc.start_learning_date = learningDoc.start_usage_date;

			iPersonID = null;
			if ( ! learningDoc.person_id.HasValue )
			{
				if ( activeLearningDoc.ChildExists( 'person_id' ) )
				{
					iPersonID = activeLearningDoc.person_id;
				}
				else
				{
					try
					{
						if ( iPersonIDParam != undefined )
							iPersonID = Int( iPersonIDParam );
					}
					catch ( e )
					{
					}
				}
				if ( iPersonID != null )
				{
					learningDoc.person_id = iPersonID;
					tools.common_filling( 'collaborator', learningDoc, iPersonID );
				}
			}

			if ( activeLearningDoc.Name == 'active_test_learning' )
			{
				learningDoc.active_test_learning_id = activeLearningID;
				learningDoc.active_test_learning_deleted = true;
			}
			else
			{
				if ( ! activeLearningDoc.ChildExists( 'question_num' ) )
				{
					learningDoc.question_num = qti_tools.get_question_num( learningDoc.objects, '' );
					learningDoc.question_answered_num = qti_tools.get_question_num( learningDoc.objects, 'answered' );
					learningDoc.question_passed_num = qti_tools.get_question_num( learningDoc.objects, 'passed' );
				}
			}

			docLearning.BindToDb( DefaultDb );

			teAnnals = null;
			teTestingSystem = qti_tools.get_testing_system( assessmentDoc );
			if ( teTestingSystem.test_launch_type == 'webtutor' )
			{
				teAnnals = tools.annals_decrypt( learningDoc, tools.get_qti_path( activeLearningDoc ), null, assessmentDoc.not_sent_correct_answer );
				if ( teAnnals != null )
				{
					if ( learningDoc.ChildExists( 'sections' ) )
					{
						for ( fldObjectElem in teAnnals.au.history.objects )
							for ( fldSectionElem in fldObjectElem.section )
								if ( fldSectionElem.ws_score.HasValue )
								{
									fldLearningSectionChild = learningDoc.sections.ObtainChildByKey( fldSectionElem.PrimaryKey );
									fldLearningSectionChild.AssignElem( fldSectionElem );
									fldLearningSectionChild.score = fldSectionElem.ws_score;
								}
					}

					//learningDoc.lesson_report = StrSimpleEncrypt( tools.get_annals_text_from_annals( teAnnals ) );
					for ( fldObjectElem in learningDoc.objects )
					{
						fldObjectElem.data.active.Clear();
						fldObjectElem.data.sequence.Clear();
					}

					if ( assessmentDoc.use_scale_calculation )
					{
						sectionArray = ArrayOptFirstElem( teAnnals.au.history.objects );
						if ( sectionArray != undefined )
						{
							for ( _section in sectionArray.section )
							{
								secID = String( _section.id ).split( '_s_' );
								secID = ArrayCount( secID ) &gt; 1 ? secID[1] : secID[0];

								_assessmentSection = ArrayOptFind( assessmentDoc.sections, 'id==' + secID );
								if ( _assessmentSection == undefined )
									continue;

								for ( _question in _section.question )
								{
									try
									{
										if ( _question.state == 'passed' || true )
										{
											_assessmentItem = ArrayOptFind( _assessmentSection.items, 'id==' + _question.ident );
											if ( _assessmentItem == undefined )
												continue;

											for ( _scale in _assessmentItem.scales )
											{
												curScale = learningDoc.scales.ObtainChildByKey( _scale.scale_id );
												curScale.value = ( curScale.value.HasValue ? curScale.value : 0.0 ) + ( _question.points.HasValue ? Real( _question.points ) : 0.0 );
												if ( ! curScale.name.HasValue )
												{
													_child = assessmentDoc.scales.GetOptChildByKey( _scale.scale_id );
													curScale.name = _child == undefined ? _scale.scale_id : _child.name;
												}
											}
										}
									}
									catch ( Exception )
									{
										alert( Exception );
									}
								}//for
							}
						}
					}
				}
			}
			else
			{
				try
				{
					oRes = qti_tools.call_testing_system_method( teTestingSystem, 'GetResultsReport', ({ 'iActiveTestLearningID': activeLearningID }) );
					if ( oRes.error == 0 )
					{
						if ( oRes.sReportContent != '' )
						{
							docResource = OpenNewDoc( 'x-local://wtv/wtv_resource.xmd' );
							docResource.TopElem.type = 'pdf';
							docResource.TopElem.person_id = learningDoc.person_id;
							tools.common_filling( 'collaborator', docResource.TopElem, docResource.TopElem.person_id );
							docResource.BindToDb();
							docResource.TopElem.put_str( oRes.sReportContent, 'test_report_' + docLearning.DocID + '.pdf' );

							learningDoc.AddFile( docResource.DocID, docResource );
						}
					}
				}
				catch ( err )
				{
					if ( global_settings.debug )
						alert( 'Debug ERROR: ' + err );
				}
			}
			if ( assessmentDoc.not_sent_correct_answer )
			{
				learningDoc.state_id = 1;
				if ( teAnnals == null )
				{
					learningDoc.score = 0.0;
				}
				else
				{
					fldFirstObject = ArrayOptFirstElem( teAnnals.au.history.objects );
					if ( fldFirstObject != undefined )
					{
						learningDoc.score = fldFirstObject.ws_score.HasValue ? fldFirstObject.ws_score : 0.0;
						fldObject = ArrayOptFirstElem( learningDoc.objects );
						if ( fldObject != undefined )
						{
							tools_web.obtain_item_objectives_value( fldObject.data, learningDoc.score );

							if ( learningDoc.question_passed_num &lt;= 0 )
							{
								learningDoc.question_passed_num = 0;
								for ( fldItemElem in fldObject.data.items )
									if ( tools_web.get_item_objectives_value( fldItemElem ) &gt; 0.0 )
										learningDoc.question_passed_num++;
							}
						}
					}
				}
			}
			else
			{
				learningDoc.score = activeLearningDoc.cur_score;
				learningDoc.state_id = activeLearningDoc.cur_state_id;
			}

			if ( learningDoc.state_id &lt; 2 || ( learningDoc.state_id == 2 &amp;&amp; assessmentDoc.passing_score.HasValue ) )
				learningDoc.state_id = learningDoc.score &gt;= assessmentDoc.passing_score ? 4 : 3;

			if ( assessmentDoc.before_finish_eval.HasValue )
				eval( assessmentDoc.before_finish_eval );

			//define level
			min = 1000000;
			for ( _level in assessmentDoc.estimation_levels )
			{
				try
				{
					Real( _level.score );
					delta = learningDoc.score - _level.score;
					if ( delta &gt;= 0 &amp;&amp; delta &lt; min )
					{
						min = delta;
						learningDoc.text_result = _level.desc;
					}
				}
				catch ( err )
				{
					continue;
				}
			}

			docLearning.Save();
			if( bFinishTest )
			{
				tools.active_test_learning_finish_link( activeLearningID, docLearning.DocID, docLearning.TopElem, assessmentDoc );
			}

			ms_tools.raise_system_event( 'common_finish_test', null, docLearning.DocID, docLearning );

			return docLearning;
	"/>

	<active_test_learning_finish_link PROPERTY="1" PARAM="activeLearningID" PARAM="learningID" PARAM="teLearning" PARAM="teAssessment" EXPR="
			try
			{
				activeLearningID = Int( activeLearningID );
			}
			catch ( err )
			{
				return false
			}
			try
			{
				learningID = Int( learningID );
			}
			catch ( err )
			{
				return false
			}
			try
			{
				teLearning.Name
			}
			catch ( err )
			{
				try
				{
					teLearning = OpenDoc( UrlFromDocID( learningID ) ).TopElem;
				}
				catch ( err )
				{
					return false
				}
			}
			try
			{
				teAssessment.Name
			}
			catch ( err )
			{
				try
				{
					teAssessment = OpenDoc( UrlFromDocID( teLearning.assessment_id ) ).TopElem;
				}
				catch ( err )
				{
					return false
				}
			}

			try
			{
				if ( teLearning.education_plan_id.HasValue )
				{
					tools.call_code_library_method( 'libEducation', 'update_education_plan', [ teLearning.education_plan_id, null, teLearning.person_id ] );
				}
			}
			catch ( err )
			{
				if ( LdsIsServer )
					alert( err );
				else
					LogEvent( 'spxml', err );
			}

			tools_proctor.finish_learning_record_thread( activeLearningID, learningID, teLearning, teAssessment );
	"/>

	<active_test_learning_finish_attempt PROPERTY="1" PARAM="_learning_id" PARAM="_learning_code" PARAM="_assessment_doc" PARAM="_flag_create_learning" PARAM="docActiveLearning" EXPR="
			try
			{
				if ( docActiveLearning == null || docActiveLearning == '' )
					throw 'no_doc';
			}
			catch ( err )
			{
				docActiveLearning = OpenDoc( UrlFromDocID( Int( _learning_id ) ) );
			}
			try
			{
				flagCreateLearning = _flag_create_learning != false;
			}
			catch ( err )
			{
				flagCreateLearning = true;
			}
			activeLearningDoc = docActiveLearning.TopElem;

			partActiveLearning = ( _learning_code == '' || _learning_code == null ? activeLearningDoc : activeLearningDoc.parts.GetChildByKey( _learning_code ) )

			bExpertEval = partActiveLearning.ChildExists( 'expert_eval' ) &amp;&amp; partActiveLearning.expert_eval == true &amp;&amp; partActiveLearning.state_id &lt;= 2;

			assessmentDocID = Int( partActiveLearning.assessment_id );
			learningDoc = null;
			iSelectedLearningID = null;
			assessmentDoc = null;
			bNoFullAttempts = true;
			if ( bExpertEval )
			{
				partActiveLearning.state_id = 2;
				partActiveLearning.score = partActiveLearning.cur_score;
				partActiveLearning.score_str = partActiveLearning.cur_score_str;
			}
			else
			{
				try
				{
					if ( _assessment_doc == '' || _assessment_doc == null || _assessment_doc == undefined )
						throw 'net_doc';

					assessmentDoc = _assessment_doc;
				}
				catch ( err )
				{
					assessmentDoc = OpenDoc( UrlFromDocID( assessmentDocID ) ).TopElem;
				}

				var docLearning = null;
				if ( flagCreateLearning || partActiveLearning.cur_state_id != 0 || partActiveLearning.test_learnings.ChildNum == 0 )
				{
					docLearning = tools.active_test_learning_finish( _learning_id, partActiveLearning, assessmentDoc, activeLearningDoc.person_id, false );
					learningDoc = docLearning.TopElem;
					_child = partActiveLearning.test_learnings.AddChild();
					_child.PrimaryKey.Value = docLearning.DocID;
					_child.state_id = learningDoc.state_id;
					_child.score = learningDoc.score;
					_child.start_usage_date = partActiveLearning.start_usage_date;
					_child.last_usage_date = Date();

					partActiveLearning.state_id = _child.state_id;

					if ( partActiveLearning.ChildExists( 'cur_attempt_num' ) )
						partActiveLearning.cur_attempt_num += 1;

					iSelectedLearningID = docLearning.DocID;
				}

				bNoFullAttempts = partActiveLearning.attempts_num &gt; partActiveLearning.test_learnings.ChildNum;

				for ( _learning in partActiveLearning.test_learnings )
					try
					{
						if ( _learning.state_id == 0 )
						{
							_cur_learning = _learning.PrimaryKey.ForeignElem;
							_learning.state_id = _cur_learning.state_id;
							_learning.score = _cur_learning.score;
						}

						if ( _learning.score &gt; partActiveLearning.score )
						{
							partActiveLearning.score = _learning.score;
							iSelectedLearningID = _learning.PrimaryKey.Value;
						}

						if ( _learning.state_id == 2 || _learning.state_id == 4 )
							partActiveLearning.state_id = 4;
					}
					catch ( err )
					{
					}
				if ( ! bNoFullAttempts )
					try
					{
						if ( iSelectedLearningID != docLearning.DocID )
							docLearning = OpenDoc( UrlFromDocID( iSelectedLearningID ) );
						docLearning.TopElem.active_test_learning_sel = true;
						docLearning.Save();
					}
					catch ( err )
					{
					}

				if ( partActiveLearning.state_id != 4 )
					partActiveLearning.state_id = bNoFullAttempts ? 1 : 3;

				partActiveLearning.cur_state_id.Clear();
				partActiveLearning.cur_score = 0;
				partActiveLearning.cur_score_str.Clear();
				partActiveLearning.lesson_location.Clear();
				partActiveLearning.core_lesson.Clear();
				partActiveLearning.lesson_report.Clear();
				partActiveLearning.qti_text.Clear();
				if ( partActiveLearning.ChildExists( 'objects' ) )
					partActiveLearning.objects.Clear();
				partActiveLearning.start_usage_date = Date();
				partActiveLearning.last_usage_date = Date();
				if ( activeLearningDoc.ChildExists( 'view' ) &amp;&amp; activeLearningDoc.view.ChildExists( 'assessment_object' ) )
					activeLearningDoc.view.assessment_object = assessmentDoc;
			}

			if ( docActiveLearning.TopElem.PropertyExists( 'calc_score' ) )
			{
				docActiveLearning.TopElem.calc_score();
			}

			docActiveLearning.Save();

			if( ( !bNoFullAttempts || !flagCreateLearning ) && !bExpertEval )
				tools.active_test_learning_finish_link( _learning_id, ( iSelectedLearningID == null ? ArrayOptFirstElem( partActiveLearning.test_learnings ).PrimaryKey : iSelectedLearningID ), ( docLearning != null ? docLearning.TopElem : null ), assessmentDoc );


			if ( bExpertEval )
				tools.create_notification( '12', _learning_id, '', activeLearningDoc.person_id, partActiveLearning );

			ms_tools.raise_system_event( 'common_finish_test_attempt', null, docActiveLearning.DocID, docActiveLearning );

			return bNoFullAttempts;
	"/>





<!-- BEGIN lesson report and annals -->
	<core_decrypt PROPERTY="1" PARAM="_core" PARAM="_qti_path" PARAM="_qti_text" PARAM="_learning_doc" EXPR="
			tod = StrSimpleDecrypt( _core );
			tod = Trim( tod );

			annals = '';
			objectives = '';
			interactions = '';

			iobj = tod.indexOf( '[OBJECTIVES_STATUS]' );
			ieval = tod.indexOf( '[EVALUATION]' );
			iof = 0;

			if ( StrBegins( tod, 'ws_' ) )
			{
				if ( iobj == 0-1 &amp;&amp; ieval == 0-1 )
					annals = tod.slice( iof );
				else if ( iobj != 0-1 &amp;&amp; ieval != 0-1 )
						annals = tod.slice( iof, ( iobj &lt; ieval ? iobj : ieval ) );
				else if ( iobj != 0-1 )
						annals = tod.slice( iof, iobj );
				else
						annals = tod.slice( iof, ieval );
			}

			annals = tools.get_annals_from_core( tod );

			if ( annals != '<annals/>' )
			{
				try
				{
					_qti_path;
				}
				catch ( o )
				{
					_qti_path = '';
				}
				try
				{
					_qti_text;
				}
				catch ( o )
				{
					_qti_text = '';
				}
				try
				{
					_learning_doc;
				}
				catch ( o )
				{
					_learning_doc = null;
				}
				if ( ( _qti_path != '' &amp;&amp; _qti_path != null ) || ( _qti_text != '' &amp;&amp; _qti_text != null ) )
					annals = tools.get_annals_text( annals, _qti_path, _qti_text, _learning_doc );
			}

			if ( iobj != 0-1 )
			{
				if ( ieval &gt; iobj )
					objectives = Trim( tod.slice( iobj + 19, ieval ) );
				else
					objectives = Trim( tod.slice( iobj + 19 ) );

				if ( objectives == '' )
					objectives = '<objectives><lines/></objectives>';
				else
					objectives = '<objectives>' + OpenDocFromStr( objectives, 'format=sv' ).TopElem.Xml + '</objectives>';
			}

			if ( ieval != 0-1 )
			{
				if ( iobj &gt; ieval )
					interactions = Trim( tod.slice( ieval + 12, iobj ) );
				else
					interactions = Trim( tod.slice( ieval + 12 ) );

				if ( interactions == '' )
					interactions = '<interactions><lines/></interactions>';
				else
					interactions = '<interactions>' + UrlDecode( OpenDocFromStr( interactions, 'format=sv' ).TopElem.Xml ) + '</interactions>';
			}

			return StrReplace( annals, '</annals>', objectives + interactions + '</annals>' );
	"/>

	<get_annals_from_core PROPERTY="1" PARAM="sSourceParam" EXPR="
			//annals = Trim( StrSimpleDecrypt( sSourceParam ) ); //UnifySpaces( annals );
//alert(sSourceParam)
				if ( StrBegins( sSourceParam, 'ws_' ) )
				{
					sSourceParam = StrRightRangePos( sSourceParam, StrLen( 'ws_' ) );

					ctx = Array('<annals>','^0','</annals>','|0',
						'<au>','^1','</au>','|1',
						'<modified>','^2','</modified>','|2',
						'<settings>','^3','</settings>','|3',
						'<sound>','^4','</sound>','|4',
						'<trackvisited>','^5','</trackvisited>','|5',
						'<aicc>','^6','</aicc>','|6',
						'<putmethod>','^7','</putmethod>','|7',
						'<puttimer>','^8','</puttimer>','|8',
						'<history>','^9','</history>','|9',
						'<visits>','^a','</visits>','|a',
						'<objects>','^b','</objects>','|b',
						'<object','^B','</object>','|B',
						'<file>','^c','</file>','|c',
						'<objtype>','^d','</objtype>','|d',
						'<title>','^e','</title>','|e',
						'<scoring>','^f','</scoring>','|f',
						'<scoreboards>','^g','</scoreboards>','|g',
						'<scoringtype>','^h','</scoringtype>','|h',
						'<cutvalue>','^i','</cutvalue>','|i',
						'<state>','^j','</state>','|j',
						'<scoreboard','^k','</scoreboard>','|k',
						'<timer>','^l','</timer>','|l',
						'<section','^m','</section>','|m',
						'<question','^n','</question>','|n',
						'<variant','^o','</variant>','|o',
						'<maxattempts>','^p','</maxattempts>','|p',
						'<attemptslast>','^q','</attemptslast>','|q',
						'<maxweight>','^r','</maxweight>','|r',
						'<maxpoints>','^R','</maxpoints>','|R',
						'<points>','^s','</points>','|s',
						'<finalfeedback>','^t','</finalfeedback>','|t',
						'<statusrules>','^u','</statusrules>','|u',
						'<status','^U','</status>','|U',
						'<incomplete','^v','</incomplete>','|v',
						'<passed','^w','</passed>','|w',
						'<completed','^x','</completed>','|x',
						'<value','^y','</value>','|y',
						'<task','^z',
						'mask=&quot;','@M',
						'ident=&quot;','@0',
						'scored=&quot;','@1',
						'qtype=&quot;','@2',
						'state=&quot;','@3',
						'maxvalue=&quot;','@4',
						'cutvalue=&quot;','@5',
						'normalize=&quot;','@6',
						'operator=&quot;','@7',
						'id=&quot;','@8',
						'correct=&quot;','@9',
						'false','@a',
						'true','@b',
						'passed','@c',
						'attempted','@d',
						'timeout','@e',
						'exhausted','@f',
						'straight','@g',
						'regressive','@h',
						'yes','@i',
						'normal','@j',
						'total&quot;','@k',
						'choice&quot;','@m',
						'select&quot;','@n',
						'range&quot;','@o',
						'numeric&quot;','@p',
						'text&quot;','@q',
						'oto&quot;','@r',
						'startvalue=&quot;','@s',
						'SLIDE_','@S',
						'images/','@I');

					for( i = ArrayCount( ctx ) - 1; i &gt; 0; i = i-2 )
						sSourceParam = StrReplace( sSourceParam, ctx[ i ], ctx[ i-1 ] );
				}

			iann = StrOptSubStrPos( sSourceParam, '&lt;annals&gt;' );
			if ( iann == undefined )
			{
				return '&lt;annals/&gt;';
			}
			else
			{
				ixml = StrOptSubStrPos( sSourceParam, '&lt;?xml' );
				if ( ixml != undefined &amp;&amp; ( iann - ixml ) &lt; 50 )
					iann = ixml;
			}

			return StrRangePos( sSourceParam, iann, StrOptSubStrPos( sSourceParam, '&lt;/annals&gt;' ) + StrLen( '&lt;/annals&gt;' ) );
	"/>

	<get_annals_text_from_annals PROPERTY="1" PARAM="fldAnnalsParam" EXPR="
			return fldAnnalsParam == null ? '' : tools.xml_header() + fldAnnalsParam.GetXml( { 'tabs': false } );
	"/>
	<get_qti_path PROPERTY="1" PARAM="oSource" PARAM="fldPartParam" EXPR="
			iSourceID = OptInt( oSource );
			if ( iSourceID != undefined )
				oSource = OpenDoc( UrlFromDocID( iSourceID ) ).TopElem;

			if ( oSource.Name != 'course' &amp;&amp; oSource.Name != 'assessment' )
			{
				if ( oSource.ChildExists( 'course_id' ) )
					oSource = OpenDoc( UrlFromDocID( oSource.course_id ) ).TopElem;
				else
					oSource = OpenDoc( UrlFromDocID( oSource.assessment_id ) ).TopElem;
			}

			if ( oSource.Name == 'course' )
				sQtiPath = oSource.GetPartUrl( fldPartParam.PrimaryKey, fldPartParam.ChildIndex );
			else if ( oSource.Name == 'assessment' )
				sQtiPath = oSource.publish_url;
			else
				return '';

			return UrlParent( UrlAppendPath( 'x-local://wt/web', sQtiPath ) );
	"/>
	<xml_header PROPERTY="1" EXPR="'&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;'"/>

	<annals_decrypt PROPERTY="1" PARAM="oSourceParam" PARAM="sQtiPathParam" PARAM="sQtiTextParam" PARAM="bNoSendCorrectAnswerParam" EXPR="
			fldAnnals = null;
			sReport = null;
			bDoFill = true;
			fldObjectsSource = null;
			if ( oSourceParam.ChildExists( 'lesson_report' ) &amp;&amp; oSourceParam.lesson_report.HasValue )
			{
				sReport = Trim( StrSimpleDecrypt( oSourceParam.lesson_report ) );
				bDoFill = false;
			}
			else if ( oSourceParam.ChildExists( 'objects' ) &amp;&amp; oSourceParam.objects.ChildNum != 0 )
			{
				fldAnnals = OpenNewDoc( 'x-local://wtv/wtv_form_annals_text.xmd' ).TopElem;
				fldAnnals.au.history.objects.AssignElem( oSourceParam.objects );
				fldObjectsSource = oSourceParam.objects;
			}
			else if ( oSourceParam.ChildExists( 'core_lesson' ) &amp;&amp; oSourceParam.core_lesson.HasValue )
			{
				sReport = tools.get_annals_from_core( Trim( StrSimpleDecrypt( oSourceParam.core_lesson ) ) );
			}
			if ( sReport != null )
			{
				if ( StrBegins( sReport, '&lt;annals' ) )
					sReport = DecodeCharset( sReport, 'windows-1251' );
				try
				{
					fldAnnals = OpenDocFromStr( sReport, 'form=x-local://wtv/wtv_form_annals_text.xmd' ).TopElem;
				}
				catch ( err )
				{
				}
			}
			if ( bDoFill &amp;&amp; fldAnnals != null )
			{
				try
				{
					if ( sQtiTextParam == null )
						throw 'no_text';
				}
				catch ( err )
				{
					if ( oSourceParam.ChildExists( 'qti_text' ) &amp;&amp; oSourceParam.qti_text.HasValue )
					{
						sQtiTextParam = oSourceParam.qti_text.Value;
						iPos = String( sQtiTextParam ).indexOf( 'encoding=&quot;windows-1251&quot;' );
						if ( iPos &gt; 0 &amp;&amp; iPos &lt; 30 )
							sQtiTextParam = StrLeftRange( sQtiTextParam, iPos ) + 'encoding=&quot;utf-8&quot;' + StrRightRangePos( sQtiTextParam, iPos + StrLen( 'encoding=&quot;windows-1251&quot;' ) )
					}
					else
					{
						sQtiTextParam = '';
					}
				}
				try
				{
					if ( sQtiPathParam == null )
						throw 'no_str';
				}
				catch ( err )
				{
					sQtiPathParam = '';
				}
				try
				{
					bNoSendCorrectAnswerParam = bNoSendCorrectAnswerParam == true;
				}
				catch ( err )
				{
					bNoSendCorrectAnswerParam = false;
				}

				tools.fill_annals_text( fldAnnals.au.history.objects, sQtiPathParam, sQtiTextParam, fldObjectsSource, bNoSendCorrectAnswerParam );
			}
			return fldAnnals;
	"/>

	<!-- obsolete function -->
	<report_decrypt PROPERTY="1" PARAM="_source" PARAM="_qti_path" PARAM="_qti_text" EXPR="
			try
			{
				oAnnalsTarget;
			}
			catch ( err )
			{
				oAnnalsTarget = null;
			}
			if ( _source.ChildExists( 'lesson_report' ) &amp;&amp; _source.lesson_report.HasValue )
			{
				sReport = Trim( StrSimpleDecrypt( _source.lesson_report ) );
//alert(sReport)
				if ( StrBegins( sReport, '&lt;annals' ) )
					sReport = tools.xml_header() + DecodeCharset( sReport, 'windows-1251' );
				return sReport;
			}
			else
			{
				try
				{
					if ( _qti_path == null )
						throw 'no_str';
				}
				catch ( err )
				{
					_qti_path = '';
				}
				try
				{
					_qti_text;
				}
				catch ( err )
				{
					_qti_text = null;
				}
				fldAnnals = tools.annals_decrypt( _source, _qti_path, _qti_text );
				return tools.get_annals_text_from_annals( fldAnnals );
			}
			return tools.xml_header() + '&lt;annals/&gt;';
	"/>


	<fill_annals_timings PROPERTY="1" PARAM="fldTarget" PARAM="fldSource" EXPR="
		fldTarget.duration = fldSource.duration.Value;
		iElapsed = OptInt( fldSource.latency.value );
		if ( iElapsed != undefined )
		{
			fldTarget.elapsed = ( iElapsed / 1000 );
			iDuration = OptInt( fldSource.duration.value );
			if ( iDuration != undefined )
				fldTarget.timer = iDuration - iElapsed;
		}
	"/>


	<get_data_answers PROPERTY="1" PARAM="fldDataItem" EXPR="
			iAttemtCount = ArrayCount( fldDataItem.attempts.attempt );
			if ( iAttemtCount == 0 )
				return [];

			fldAttempt = ArraySelectAll( fldDataItem.attempts.attempt )[ iAttemtCount - 1 ];
			if ( ! fldAttempt.HasValue )
				return [];

			arrRes = [];
			arrAnswers = fldAttempt.Value.split( '[,]' );
			for ( sAnswerElem in arrAnswers )
			{
				arrAnswerFields = sAnswerElem.split( '[.]' );
				if ( ArrayCount( arrAnswerFields ) == 1 )
				{
					sIdent = null;
					sValue = arrAnswerFields[ 0 ];
				}
				else
				{
					sIdent = arrAnswerFields[ 0 ];
					sValue = arrAnswerFields[ 1 ];
				}
				arrRes.push( { 'ident': sIdent, 'value': sValue } );
			}
			return arrRes;
	"/>

	<get_item_points PROPERTY="1" PARAM="fldQuestion" EXPR="
			for ( fldResprocessingElem in fldQuestion )
			{
				if ( fldResprocessingElem.Name != 'resprocessing' )
					continue;

				for ( fldRespconditionElem in fldResprocessingElem )
				{
					if ( fldRespconditionElem.Name != 'respcondition' )
						continue;

					for ( fldSetvarElem in fldRespconditionElem )
					{
						if ( fldSetvarElem.Name != 'setvar' )
							continue;

						rVar = OptReal( Trim( fldSetvarElem ) );
						if ( rVar &gt; 0.0 )
							return rVar;
					}
				}
			}
			return null;
	"/>

	<fill_annals_text PROPERTY="1" PARAM="fldAnnalsObjectsTarget" PARAM="sQtiPathParam" PARAM="sQtiTextParam" PARAM="fldAnnalsObjectsSource" PARAM="bNoSendCorrectAnswerParam" EXPR="
		try
		{
			if ( fldAnnalsObjectsSource == '' )
				throw 'no_data';
		}
		catch ( err )
		{
			fldAnnalsObjectsSource = null;
		}
		try
		{
			bNoSendCorrectAnswerParam = bNoSendCorrectAnswerParam == true;
		}
		catch ( err )
		{
			bNoSendCorrectAnswerParam = false;
		}

		function fill_conditionvar( fldVariant, arrConditionvar )
		{
			for ( fldVarElem in arrConditionvar )
				if ( fldVarElem.respident == fldVariant.ident )
				{
					fldCondChild = fldVariant.cond.Add();
					fldCondChild.Value = fldVarElem.Value;
					switch ( fldVarElem.Name )
					{
						case 'varsubstring':
							fldCondChild.operator = 'cn';
							break;
						default:
							fldCondChild.operator = common.grading_option_types.GetChildByKey( fldVarElem.Name, 'qti_tag' ).option_id;
							break;
					}
					if ( fldVarElem.ChildExists( '\case' ) &amp;&amp; fldVarElem.Child( '\case' ).HasValue )
						fldCondChild.Child( '\case' ).Value = StrLowerCase( fldVarElem.Child( '\case' ).Value ) == 'yes' ? '1' : '0';
				}
		}

		for ( fldObjectElem in fldAnnalsObjectsTarget )
		{
			try
			{
				if ( fldObjectElem.objtype == 'qti' || fldObjectElem.objtype == 'qtitext' )
				{
					if ( sQtiTextParam == '' &amp;&amp; sQtiPathParam != '' )
						qtiDoc = OpenDoc( UrlAppendPath( sQtiPathParam, fldObjectElem.file ), 'form=x-local://wtv/wtv_form_qti_text.xmd' ).TopElem.assessment;
					else
						qtiDoc = OpenDocFromStr( sQtiTextParam, 'form=x-local://wtv/wtv_form_qti_text.xmd' ).TopElem.assessment;

					if ( fldAnnalsObjectsSource != null )
					{
						fldObjectSource = fldAnnalsObjectsSource.GetChildByKey( fldObjectElem.PrimaryKey );
						tools.fill_annals_timings( fldObjectElem, fldObjectSource.data.assessment );
						for ( fldQtiSectionElem in qtiDoc.section )
						{
							fldDataSectionElem = fldObjectSource.data.sections.GetOptChildByKey( fldQtiSectionElem.PrimaryKey );
							if ( fldDataSectionElem == undefined ) //  || fldDataSectionElem.completed == 'n'
								continue;

							fldSection = fldObjectElem.section.ObtainByKey( fldDataSectionElem.PrimaryKey );
							fldSection.state = fldDataSectionElem.completed == 'c' ? 'passed' : 'attempted';
							tools.fill_annals_timings( fldSection, fldDataSectionElem );

							for ( fldQtiItemElem in fldQtiSectionElem.item )
							{
								fldDataItem = fldObjectSource.data.items.GetOptChildByKey( fldQtiItemElem.PrimaryKey );
								if ( fldDataItem == undefined || fldDataItem.completed != 'c' )
									continue;

								fldItem = fldSection.question.ObtainByKey( fldDataItem.PrimaryKey );
								fldItem.qtype = common.annals_item_types.GetChildByKey( fldDataItem.type, 'data_id' ).id;
								fldItem.state = fldDataSectionElem.completed == 'c' ? 'passed' : 'attempted';
								tools.fill_annals_timings( fldItem, fldDataItem );

								if ( fldDataItem.comment.HasValue )
									fldItem.comment = fldDataItem.comment;

								iMax = OptInt( fldDataItem.attempts.max );
								if ( iMax != undefined )
									fldItem.attemptslast = iMax - ArrayCount( ArraySelectByKey( fldDataItem.attempts.attempt, 'c', 'status' ) );

					//maxweight = qti
								rPoints = tools_web.get_item_objectives_value( fldDataItem );
								if ( fldQtiItemElem.ws_eval != 'expert' &amp;&amp; ! tools_web.is_true( fldQtiItemElem.ws_eval ) &amp;&amp; ( rPoints == null || bNoSendCorrectAnswerParam ) )
								{
									if ( tools_web.is_correct_question( fldDataItem, fldQtiItemElem ) )
									{
										rPoints = tools.get_item_points( fldQtiItemElem );
										if ( rPoints != null )
											tools_web.obtain_item_objectives_value( fldDataItem, rPoints );
									}

								}
								if ( rPoints != null )
								{
									fldItem.points = rPoints;
									fldItem.state = 'passed';
								}
							}
						}
					}

					fldObjectElem.ws_score = 0.0;
					for ( _section in fldObjectElem.section )
					{
						try
						{
							_section.ws_score = 0.0;
							if ( _section.state != 'na' &amp;&amp; _section.state != 'skipped' )
							{
								qtiSection = ArrayOptFindByKey( qtiDoc.section, _section.id, 'PrimaryKey' );

								_section.title = qtiSection.title;
								_section.duration = tools.get_time_from_duration( qtiSection.duration );
								_section.timer = tools.get_time_from_seconds( _section.timer );

								for ( _question in _section.question )
								{
									try
									{
										if ( fldAnnalsObjectsSource != null )
											fldDataItem = fldObjectSource.data.items.GetChildByKey( _question.PrimaryKey );

										qtiItem = ArrayOptFindByKey( qtiSection.item, _question.ident, 'PrimaryKey' );
										teItem = null;
										bExpertEval = false;
										if ( qtiItem == undefined )
										{
											try
											{
												teItem = OpenDoc( UrlFromDocID( Int( _question.ident ) ) ).TopElem;
											}
											catch ( err )
											{
												if ( global_settings.debug )
													alert( 'Debug ERROR: ' + err );
											}

											if ( teItem != null )
											{
												_question.text = teItem.question_text;
												_question.duration = tools.get_time_from_seconds( teItem.duration );
												_question.ws_eval = teItem.expert_eval ? 'expert' : '';
												_question.ws_eval_type = teItem.expert_eval_type;
												_question.ws_question_points = teItem.question_points;
												_question.maxattempts = teItem.max_attempts_num;
												bExpertEval = teItem.expert_eval.Value;
											}
										}
										else
										{
											_question.text = Trim( qtiItem.presentation.material.mattext );
											_question.duration = tools.get_time_from_duration( qtiItem.duration );
											_question.ws_eval = qtiItem.ws_eval;
											_question.ws_eval_type = qtiItem.ws_eval_type;
											_question.ws_question_points = qtiItem.ws_question_points;
											_question.maxattempts = qtiItem.maxattempts;
											bExpertEval = qtiItem.ws_eval == 'expert' || tools_web.is_true( qtiItem.ws_eval );

											if ( ! bExpertEval &amp;&amp; qtiItem.resprocessing.GetXml( { 'tabs': false } ) == '&lt;resprocessing/&gt;' )
											{
												_question.ws_not_calc_correct = true;
												try
												{
													teItem = OpenDoc( UrlFromDocID( Int( _question.ident ) ) ).TopElem;
												}
												catch ( err )
												{
													if ( global_settings.debug )
														alert( 'Debug ERROR: ' + err );
												}
											}
										}

										fldQtiResponses = null;
										if ( qtiItem != undefined &amp;&amp; ArrayCount( _question.variant ) == 0 )
										{
											switch ( _question.qtype )
											{
												case 'numeric':
													fldQtiResponses = qtiItem.presentation.response_num;
													break;

												case 'text':
													fldQtiResponses = qtiItem.presentation.response_str;
													break;

												case 'oto':
													fldQtiResponses = qtiItem.presentation.response_lid;
													break;

												default:
													fldQtiResponses = ArrayFirstElem( qtiItem.presentation.response_lid ).render_choice.response_label;
													break;
											}

											for ( fldQtiResponseElem in fldQtiResponses )
											{
												fldVariant = _question.variant.ObtainByKey( fldQtiResponseElem.PrimaryKey );
												switch ( _question.qtype )
												{
													case 'choice':
													case 'select':
														fldVariant.Value = '0';
														break;
												}
											}

											arrAnswers = tools.get_data_answers( fldDataItem );
											if ( ArrayCount( arrAnswers ) != 0 )
											{
												i = 0;
												arrVariants = ArraySelectAll( _question.variant );
												for ( oAnswerElem in arrAnswers )
												{
													switch ( _question.qtype )
													{
														case 'choice':
														case 'select':
															fldVariant = _question.variant.ObtainByKey( oAnswerElem.value );
															fldVariant.Value = '1';
															break;

														case 'range':
															fldVariant = arrVariants[ i ];
															fldVariant.Value = oAnswerElem.value;
															break;

														default:
															fldVariant = oAnswerElem.ident == null ? arrVariants[ i ] : _question.variant.ObtainByKey( oAnswerElem.ident );
															fldVariant.Value = oAnswerElem.value;
															fldVariant.value = oAnswerElem.value;
															break;
													}
													i++;
												}
											}
										}

										rWsAnswerScore = null;
										arrValues = null;
										for ( _variant in _question.variant )
										{
											try
											{
												if ( ( qtiItem == undefined || _question.ws_not_calc_correct ) &amp;&amp; teItem != null )
												{
													arrIdent = String( _variant.ident ).split( '_' );
													fldAnswerChild = teItem.answers.GetChildByKey( arrIdent[ ArrayCount( arrIdent ) - 1 ] );

													_variant.text = fldAnswerChild.text;
													_variant.correct = fldAnswerChild.is_correct_answer ? '1' : '0';
													_variant.ws_score = fldAnswerChild.ws_score;
													_variant.varscore = fldAnswerChild.ws_score;
													switch ( _question.qtype )
													{
														case 'range':
															arrIdent = Trim( _variant.Value ).split( '_' );
															sVariantIdent = arrIdent[ ArrayCount( arrIdent ) - 1 ];
															if ( sVariantIdent == '' )
																break;

															_variant.value = teItem.answers.GetChildByKey( sVariantIdent, 'id' ).text;
															break;

														case 'oto':
															arrIdent = Trim( _variant.Value ).split( '_' );
															sVariantIdent = arrIdent[ ArrayCount( arrIdent ) - 1 ];
															if ( sVariantIdent == '' )
																break;

															if ( arrValues == null )
															{
																arrValues = [];
																for ( fldAnswerElem in teItem.answers )
																	for ( fldValueElem in fldAnswerElem.values )
																		arrValues.push( fldValueElem );
															}
															fldValue = ArrayOptFindByKey( arrValues, sVariantIdent, 'id' );
															if ( fldValue != undefined )
																_variant.value = fldValue.text;

															if ( ! _variant.cor_value.HasValue )
																_variant.cor_value = ArrayFirstElem( fldAnswerChild.values ).text;
															break;

														case 'numeric':
														case 'text':
															if ( ArrayCount( _variant.cond ) == 0 )
															{
																for ( fldConditionElem in fldAnswerChild.conditions )
																{
																	fldCondChild = _variant.cond.Add();
																	fldCondChild.Value = fldConditionElem.value;
																	switch ( _question.qtype )
																	{
																		case 'numeric':
																			fldCondChild.operator = fldConditionElem.grading_option_id.ForeignElem.option_id;
																			break;
																		case 'text':
																			fldCondChild.operator = fldConditionElem.sentence_option_id == 'equal' ? 'eq' : 'cn';
																			break;
																	}
																	fldCondChild.Child( '\case' ).Value = fldConditionElem.case_sensitive ? '1' : '0';
																}
															}
															break;
													}
												}
												else
												{
													qtiLabel = fldQtiResponses.GetByKey( _variant.ident );
													if ( qtiLabel.ChildExists( 'ws_right' ) )
														_variant.correct = qtiLabel.ws_right;
													if ( qtiLabel.ChildExists( 'ws_score' ) )
													{
														_variant.ws_score = qtiLabel.ws_score;
														_variant.varscore = qtiLabel.ws_score;
													}
													switch ( _question.qtype )
													{
														case 'numeric':
														case 'text':
															_variant.cond.Clear();
															for ( fldRespconditionElem in qtiItem.resprocessing.respcondition )
															{
																fill_conditionvar( _variant, fldRespconditionElem.conditionvar.varsubstring );
																fill_conditionvar( _variant, fldRespconditionElem.conditionvar.varequal );
																fill_conditionvar( _variant, fldRespconditionElem.conditionvar.vargt );
																fill_conditionvar( _variant, fldRespconditionElem.conditionvar.vargte );
																fill_conditionvar( _variant, fldRespconditionElem.conditionvar.varlt );
																fill_conditionvar( _variant, fldRespconditionElem.conditionvar.varlte );
															}
															break;

														case 'range':
															_render_choice = ArrayFirstElem( qtiItem.presentation.response_lid ).render_choice;
															_variant.value = _render_choice.response_label.GetByKey( Trim( _variant.Value ) ).material.mattext;
															break;

														case 'oto':
															_variant.value = qtiLabel.render_choice.response_label.GetByKey( Trim( _variant.Value ) ).material.mattext;
															if ( ! _variant.correct.HasValue )
															{
																fldResponseLabel = ArrayOptFind( qtiLabel.render_choice.response_label, 'StrBegins(ident,' + CodeLiteral( qtiLabel.ident ) + ')' );
																if ( fldResponseLabel != undefined )
																	_variant.correct = fldResponseLabel.ident;
															}
															if ( _variant.correct.HasValue )
																_variant.cor_value = qtiLabel.render_choice.response_label.GetByKey( _variant.correct ).material.mattext;
															break;
													}
													_variant.text = Trim( qtiLabel.material.mattext );
												}

												if ( ( _question.qtype == 'choice' || _question.qtype == 'select' ) &amp;&amp; _variant.ws_score.HasValue &amp;&amp; Trim( _variant.Value ) == '1' )
													try
													{
														rWsAnswerScore = rWsAnswerScore == null ? Real( _variant.ws_score ) : rWsAnswerScore + Real( _variant.ws_score );
													}
													catch ( sel_err )
													{
														if ( global_settings.debug )
															alert( 'Debug ERROR: ' + sel_err );
													}
											}
											catch ( err1 )
											{
												if ( global_settings.debug )
													alert( 'Debug ERROR: ' + err1 );
											}
										}

										_question.timer = tools.get_time_from_seconds( _question.timer );

										if ( ! bExpertEval )
										{
											bCorrect = tools_web.is_correct_question( _question, teItem );
											if ( ! _question.comment.HasValue )
											{
												if ( qtiItem == undefined )
												{
													if ( teItem != null )
														_question.comment = bCorrect ? teItem.feedback_correct : teItem.feedback_wrong;
												}
												else
												{
													fldItemFeedback = ArrayOptFindByKey( qtiItem.itemfeedback, ( _question.ident + ( bCorrect ? '_Correct' : '_Wrong' ) ), 'ident' );
													if ( fldItemFeedback != undefined )
														_question.comment = fldItemFeedback.material.mattext;
												}
											}
											if ( bCorrect &amp;&amp; _question.ws_not_calc_correct )
											{
												_question.state = 'passed';
												if ( teItem != null &amp;&amp; teItem.question_points.HasValue )
													_question.points = '' + teItem.question_points;
											}
											if ( rWsAnswerScore != null )
												_question.points = '' + rWsAnswerScore;
										}

										try
										{
											if ( _question.points.HasValue )
												_section.ws_score += Real( _question.points );
										}
										catch ( err2 )
										{
											if ( global_settings.debug )
												alert( 'Debug ERROR: ' + err2 );
										}
									}
									catch ( err3 )
									{
										if ( global_settings.debug )
											alert( 'Debug ERROR: ' + err3 );
									}
								}
							}
							else
							{
								_section.Delete();
							}
							fldObjectElem.ws_score += _section.ws_score;
						}
						catch ( err4 )
						{
							if ( global_settings.debug )
								alert( 'Debug ERROR: ' + err4 );
						}
					}
				}
				else if ( fldObjectElem.objtype == 'survey' )
				{
				}
				else
				{
					fldObjectElem.Delete();
				}
			}
			catch ( w )
			{
				if ( global_settings.debug )
					alert( 'Debug ERROR: ' + w );
			}
		}
	"/>

	<!-- obsolete function -->
	<get_annals_text PROPERTY="1" PARAM="_annals" PARAM="_qti_path" PARAM="_qti_text" PARAM="_learning_doc" PARAM="oAnnalsTarget" EXPR="
		try
		{
			oAnnalsTarget = OpenDocFromStr( _annals, 'form=x-local://wtv/wtv_form_annals_text.xmd' ).TopElem;
		}
		catch ( o )
		{
			return '';
		}
		try
		{
			_qti_text;
		}
		catch ( o )
		{
			_qti_text = null;
		}

		tools.fill_annals_text( oAnnalsTarget.au.history.objects, _qti_path, _qti_text );
		return oAnnalsTarget.GetXml( { 'tabs': false } );
	"/>
<!-- END lesson report and annals -->




	<close_request PROPERTY="1" CALLER-ENV="1" PARAM="_request_id" EXPR="
			docRequest = ObtainUiDoc( UrlFromDocID( _request_id ) );

			try
			{
				tools.request_processing( docRequest.DocID, docRequest );

				UpdateUiDoc( docRequest );
				if ( docRequest.IsChanged )
					docRequest.Save();

				return true;
			}
			catch ( def )
			{
				alert( def );
				return false;
			}
	"/>




	<workflow_action_process PROPERTY="1" CALLER-ENV="1" PARAM="_source" PARAM="_action_code" PARAM="_workflow_id" PARAM="_workflow_doc" PARAM="_alterCurObjectID" PARAM="dConditionProcess" EXPR="
				_workflow_id = Int( _workflow_id );
				try
				{
					workflowDoc = _workflow_doc;
				}
				catch ( err )
				{
					workflowDoc = OpenDoc( UrlFromDocID( _workflow_id ) ).TopElem;
				}
				try
				{
					alterCurObjectID = _alterCurObjectID;
				}
				catch( err )
				{
					alterCurObjectID = undefined;
				}
				try
				{
					if ( dConditionProcess != true )
						throw 'no_data';
				}
				catch( err )
				{
					dConditionProcess = false;
				}

				var WORKFLOW_SUCCESS_ACTION = '';
				var WORKFLOW_ACTION_MESSAGE = '';
				var WORKFLOW_ACTION_BREAK = false;
				var WORKFLOW_CREATE_BREAK = false;

				curAction = workflowDoc.actions.GetOptChildByKey( _action_code );
				if ( curAction == undefined )
					return ({ 'error': 1, 'error_text': 'Unknown action ' + _action_code + '.', 'workflow_success_action': WORKFLOW_SUCCESS_ACTION, 'workflow_action_message': WORKFLOW_ACTION_MESSAGE, 'workflow_create_break': WORKFLOW_CREATE_BREAK });
				if ( dConditionProcess &amp;&amp; ! tools.safe_execution( curAction.condition_eval_str ) )
					return ({ 'error': 2, 'error_text': 'Action ' + _action_code + ' access denied.', 'workflow_success_action': WORKFLOW_SUCCESS_ACTION, 'workflow_action_message': WORKFLOW_ACTION_MESSAGE, 'workflow_create_break': WORKFLOW_CREATE_BREAK });

				try
				{
					bIsActionParam = ISACTION == true;
				}
				catch( err )
				{
					bIsActionParam = false;
				}

				for ( _operation in curAction.operations )
				{
					switch ( _operation.type )
					{
						case 'set_workflow_state':
							_source.TopElem.workflow_state = _operation.workflow_state_id;
							_source.TopElem.workflow_state_name = _source.TopElem.get_workflow_state_name( workflowDoc );
							break;

						case 'set_workflow_field_value':
							oValue = _operation.workflow_field_value == 'CurDate' ? StrXmlDate( CurDate ) : _operation.workflow_field_value;
							_source.TopElem.workflow_fields.ObtainChildByKey( _operation.workflow_field_id ).value = oValue;
							break;

						case 'set_request_status':
							try
							{
								_source.TopElem.status_id = _operation.request_status_id;
							}
							catch ( sdf )
							{
								alert( sdf );
							}
							break;

						case 'event_insert':
							try
							{
								docObject = OpenDoc( UrlFromDocID( _source.TopElem.object_id ) );
								if ( _source.TopElem.is_group )
								{
									for ( _person in _source.TopElem.persons )
										tools.add_person_to_event( _person.PrimaryKey, _source.TopElem.object_id, null, docObject, null, _source.TopElem.person_id );
								}
								else
								{
									tools.add_person_to_event( _source.TopElem.person_id, _source.TopElem.object_id, null, docObject );
								}
							}
							catch ( sdf )
							{
								alert( sdf );
							}
							break;

						case 'eval_str':
							sLastWorkflowState = _source.TopElem.workflow_state.Value;
							sLastWorkflowStateName = _source.TopElem.workflow_state_name.Value;
							tools.safe_execution( _operation.eval_str );
							if ( sLastWorkflowState != _source.TopElem.workflow_state &amp;&amp; sLastWorkflowStateName == _source.TopElem.workflow_state_name )
								_source.TopElem.workflow_state_name = _source.TopElem.get_workflow_state_name( workflowDoc );
							break;

						case 'send_notification':
							tools.create_notification( _operation.notification_id, _source.DocID, null, '', _source.TopElem );
							break;

						case 'request_processing':
							tools.request_processing( _source.DocID, _source );
							break;

						case 'request_rejecting':
							tools.request_rejecting( _source.DocID, _source, null, false );
							break;

						case 'print_form':
							try
							{
								alterCurObjectID = OptInt( alterCurObjectID );
								if ( alterCurObjectID == undefined )
									throw 'no_data';
							}
							catch( err1 )
							{
								try
								{
									alterCurObjectID = OptInt( curObjectID );
								}
								catch( err2 )
								{
									alterCurObjectID = undefined;
								}
							}
							if ( _operation.print_form_id.HasValue )
							{
								sPrintFormUrl = 'view_print_form.html?print_form_id=' + _operation.print_form_id + '&amp;sid=' + tools_web.get_sum_sid( _operation.print_form_id, Request.Session.sid ) + '&amp;object_id=' + alterCurObjectID;
								Response.Write( '&lt;script language=&quot;javascript&quot;&gt;window.open(&quot;' + sPrintFormUrl + '&quot;,&quot;form' + _operation.print_form_id + '&quot;);&lt;/script&gt;' );
								WORKFLOW_SUCCESS_ACTION = 'OPENWINDOW=' + sPrintFormUrl;
							}
							break;

						case 'set_workflow_custom_state':
							if ( bIsActionParam )
							{
								if ( ArrayCount( _source.TopElem.workflow_custom_states ) == 0 )
								{
									_source.TopElem.workflow_state.Clear();
									_source.TopElem.workflow_state_name.Clear();
								}
								else
								{
									fldCustomStateChild = ArrayOptFirstElem( _source.TopElem.workflow_custom_states );
									_source.TopElem.workflow_state = fldCustomStateChild.PrimaryKey;
									_source.TopElem.workflow_state_name = fldCustomStateChild.name;
								}
							}
							else
							{
								try
								{
									_stage_num = Int( Request.Form.stage_max_num );
									_person_num = Int( Request.Form.person_max_num );
								}
								catch ( err )
								{
									break;
								}

								_source.TopElem.workflow_custom_states.Clear();

								_prev_state = null;
								_counter_state = 0;
								for ( _stage_counter=0; _stage_counter &lt;= _stage_num; _stage_counter++ )
								{
									if ( ! Request.Form.HasProperty( 'stage_name_' + _stage_counter ) )
										continue;

									_custom_state = _source.TopElem.workflow_custom_states.AddChild();
									_custom_state.code = 'cs' + StrInt( _counter_state, 5 );
									_custom_state.name = Request.Form.GetProperty( 'stage_name_' + _stage_counter );
									_custom_state.common_state_code = _operation.workflow_state_id;

									for ( _person_counter=0; _person_counter &lt;= _person_num; _person_counter++ )
										try
										{
											_person_id = Int( Request.Form.GetProperty( 'stage_' + _stage_counter + '_person_' + _person_counter ) );

											_condition = _custom_state.conditions.AddChild();
											_condition.type = 'if_cur_user';
											_condition.cur_user_type = 'cur_person';
											_condition.person_id = _person_id;
										}
										catch ( ss )
										{
										}

									_custom_state.condition_eval_str = tools.build_condition_eval_str( _custom_state.conditions, _workflow_id, workflowDoc );

									if ( _prev_state == null )
									{
										_source.TopElem.workflow_state = _custom_state.PrimaryKey;
										_source.TopElem.workflow_state_name = _source.TopElem.get_workflow_state_name( workflowDoc );
									}
									else
									{
										_prev_state.next_workflow_custom_state_code = _custom_state.PrimaryKey;
									}

									_prev_state = _custom_state;
									_counter_state++;
								}
							}
							break;

						case 'set_next_workflow_custom_state':
							_custom_state = ArrayOptFind( _source.TopElem.workflow_custom_states, 'PrimaryKey == _source.TopElem.workflow_state' );
							if ( _custom_state != undefined &amp;&amp; _custom_state.next_workflow_custom_state_code.HasValue )
							{
								_source.TopElem.workflow_state = _custom_state.next_workflow_custom_state_code;
								_source.TopElem.workflow_state_name = _source.TopElem.get_workflow_state_name( workflowDoc );
							}
							break;

						case 'exec_operation':
							if ( _operation.operation_id.HasValue )
							{
								operationDoc = OpenDoc( UrlFromDocID( _operation.operation_id ) ).TopElem;
								operationDoc.execute( _operation.operation_id.parameters );
							}
							break;
					}

					if ( WORKFLOW_ACTION_BREAK == true )
						break;
				}

			return ({ 'error': 0, 'error_text': '', 'workflow_success_action': WORKFLOW_SUCCESS_ACTION, 'workflow_action_message': WORKFLOW_ACTION_MESSAGE, 'workflow_create_break': WORKFLOW_CREATE_BREAK });
	"/>



	<obtain_lists PROPERTY="1" PARAM="_url" PARAM="_list_name" EXPR="
			listDoc = OpenDoc( _url ).TopElem;

			try
			{
				_cur_list = lists.Child( _list_name );
				for ( _child in listDoc.Child( _list_name ) )
					if ( ! _cur_list.ChildByKeyExists( _child.PrimaryKey ) )
					{
						_cur_child = _cur_list.ObtainChildByKey( _child.PrimaryKey );
						_cur_child.AssignElem( _child );
					}

				return true;
			}
			catch ( swe )
			{
			}

			for ( _list in listDoc )
				try
				{
					_cur_list = lists.Child( _list.Name );
					for ( _child in _list )
						if ( ! _cur_list.ChildByKeyExists( _child.PrimaryKey ) )
						{
							_cur_child = _cur_list.ObtainChildByKey( _child.PrimaryKey );
							_cur_child.AssignElem( _child );
						}
				}
				catch ( der )
				{
				}

			return true;
	"/>

	<!-- Deprecated, moved to wtv_event.xmd, function set_status -->
	<event_finish PROPERTY="1" PARAM="_event_id" PARAM="_event_doc" PARAM="oScreenParam" EXPR="
			eventID = Int( _event_id );
			try
			{
				if ( oScreenParam == null || oScreenParam == '' )
					throw 'error';
			}
			catch ( edc )
			{
				oScreenParam = Screen;
			}
			try
			{
				if ( _event_doc == null || _event_doc == '' )
					throw 'net_doc';

				docEvent = _event_doc;
			}
			catch ( edc )
			{
				docEvent = OpenDoc( UrlFromDocID( eventID ) );
			}
			eventDoc = docEvent.TopElem;
			eventDoc.status_id = 'close';

			for ( _person in eventDoc.collaborators )
			{
				result_array = XQuery( 'for $event_result in event_results where $event_result/event_id = ' + eventID + ' and  $event_result/person_id = ' + _person.collaborator_id + ' return $event_result' );

				if ( ArrayCount( result_array ) != 0 )
				{
					_cur_result = ArrayFirstElem( result_array );
				}
				else
				{
					docResult = OpenNewDoc( 'x-local://wtv/wtv_event_result.xmd' );
					docResult.BindToDb( DefaultDb );
					docResult.TopElem.person_id = _person.collaborator_id;
					docResult.TopElem.event_id = eventID;
					docResult.TopElem.AssignElem( _person );
					tools.common_filling( 'event', docResult.TopElem, eventID, eventDoc );
					docResult.BindToDb( DefaultDb );
					docResult.Save();

					_cur_result = docResult.TopElem;
				}

				if( eventDoc.course_id != null &amp;&amp; _cur_result.score != null )
				{
					docLearning = tools.activate_course_to_person( _person.PrimaryKey, eventDoc.course_id, _person );
					try
					{
						docLearning.DocID;
					}
					catch ( wer )
					{
						docLearning = OpenDoc( UrlFromDocID( docLearning ) );
					}
					_event = docLearning.TopElem.events.ObtainChildByKey( eventID );
					_event.score = _cur_result.score;
					docLearning.Save();
				}

				if( _person.education_plan_id != null )
					try
					{
						docEducationPlan = OpenDoc( UrlFromDocID( _person.education_plan_id ) );

						if( docEducationPlan.TopElem.type == 'collaborator' )
							if ( _cur_result.is_assist )
								try
								{
									_program = ArrayFind( docEducationPlan.TopElem.programs, 'type==\'event\' &amp;&amp; object_id==eventID' );
									if ( _program.state_id &lt; 2 )
									{
										_program.state_id = 2;
										docEducationPlan.Save();
									}
								}
								catch ( hjk )
								{
								}
					}
					catch ( ff )
					{
						oScreenParam.MsgBox( StrReplace( ms_tools.get_const('ge6tsvb9dv'), '{PARAM1}', _person.person_fullname ), ms_tools.get_const('c_error'), 'error', 'ok' );
					}
			}
			docEvent.Save();
			//ms_tools.raise_system_event( 'common_finish_event', null, eventID, docEvent );
			ms_tools.raise_system_event_env( 'common_finish_event', {
					'curSystemEventObjectID': eventID,
					'iEventId': eventID,
					'docEvent': docEvent,
					'curUser': tools.get_cur_user(),
					'curUserID': tools.cur_user_id
				} );
			return docEvent;
	"/>

	<!-- Deprecated, moved to wtv_event.xmd, function set_status -->
	<event_start PROPERTY="1" PARAM="_event_id" PARAM="_event_doc" PARAM="oScreenParam" EXPR="
			eventID = Int( _event_id );
			try
			{
				if ( _event_doc == null || _event_doc == '' )
					throw 'net_doc';

				docEvent = _event_doc;
			}
			catch ( edc )
			{
				docEvent = OpenDoc( UrlFromDocID( eventID ) );
			}
			eventDoc = docEvent.TopElem;
			eventDoc.status_id = 'active';

			for ( _person in eventDoc.collaborators )
			{
				if( eventDoc.course_id.HasValue )
				{
					docLearning = tools.activate_course_to_person( _person.PrimaryKey, eventDoc.course_id, _person );
					try
					{
						docLearning.DocID;
					}
					catch ( wer )
					{
						docLearning = OpenDoc( UrlFromDocID( docLearning ) );
					}
					_event = docLearning.TopElem.events.ObtainChildByKey( eventID );
					docLearning.Save();
				}
				if ( _person.education_plan_id.HasValue )
					try
					{
						docEducationPlan = OpenDoc( UrlFromDocID( _person.education_plan_id ) );

						if( docEducationPlan.TopElem.type == 'collaborator' )
							try
							{
								_program = ArrayFind( docEducationPlan.TopElem.programs, 'type==\'event\' &amp;&amp; object_id==eventID' );
								if ( _program.state_id == 0 )
								{
									_program.state_id = 1;
									docEducationPlan.Save();
								}
							}
							catch ( hjk )
							{
							}
					}
					catch ( vv )
					{
						if (!LdsIsServer)
							oScreenParam.MsgBox( ms_tools.get_const('0yzvhpdp54') + _person.person_fullname + '.', ms_tools.get_const('c_error'), 'error', 'ok' );
						else
							alert(ms_tools.get_const('0yzvhpdp54') + _person.person_fullname + '.');
					}
			}

			docEvent.Save();
			ms_tools.raise_system_event( 'common_start_event', null, eventID, docEvent );
			return docEvent;
	"/>


	<check_access PROPERTY="1" CALLER-ENV="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_source_doc" PARAM="_user_id" EXPR="
			try
			{
				iUserId = Int( _user_id )
			}
			catch( _no_user_ )
			{
				try
				{
					iUserId = CurAuthObject.id;
				}
				catch( _no_lds_user_ )
				{
					iUserId = null;
				}
			}
			try
			{
				oSession = Request.Session;
			}
			catch( _no_request_ )
			{
				oSession = tools_web.get_admin_request().Session;
			}
			return tools_web.check_access( _source_doc, iUserId, null, oSession );
	"/>





	<get_object_form_url PROPERTY="1" PARAM="sCatalogNameParam" PARAM="bIsCatalogParam" EXPR="
			if ( sCatalogNameParam == 'item' || sCatalogNameParam == 'assessment' || sCatalogNameParam == 'role' || sCatalogNameParam == 'testing_system' )
				return 'x-local://qti/qti_' + sCatalogNameParam + ( bIsCatalogParam ? 's' : '' ) + '.xmd';

			if ( StrBegins( sCatalogNameParam, 'cc_' ) )
				return 'x-local://udt/ud' + ( bIsCatalogParam ? 'c' : 't' ) + '_' + sCatalogNameParam + ( bIsCatalogParam ? 's' : '' ) + '.xmd';

			return 'x-local://wtv/wtv_' + sCatalogNameParam + ( bIsCatalogParam ? 's' : '' ) + '.xmd';
	"/>

	<get_screen_form_url PROPERTY="1" PARAM="sCatalogNameParam" EXPR="
			if ( StrBegins( sCatalogNameParam, 'cc_' ) )
			{
				return 'x-local://wtv/udt_doc_form.xms';
			}
			if ( sCatalogNameParam == 'item' || sCatalogNameParam == 'assessment' || sCatalogNameParam == 'role' || sCatalogNameParam == 'testing_system' )
			{
				return 'x-local://qti/qti_' + sCatalogNameParam + '.xms';
			}
			return 'x-local://wtv/wtv_' + sCatalogNameParam + '.xms';
	"/>

	<new_doc_by_name PROPERTY="1" PARAM="sCatalogNameParam" PARAM="bIsCatalogParam" EXPR="
			if ( ! StrBegins( sCatalogNameParam, 'cc_' ) &amp;&amp; StrEnds( sCatalogNameParam, 's' ) )
			{
				sCatalogNameParam = StrLeftRange( sCatalogNameParam, StrLen( sCatalogNameParam ) - 1 );
				bIsCatalogParam = true;
			}
			else
			{
				try
				{
					bIsCatalogParam = bIsCatalogParam == true;
				}
				catch ( err )
				{
					bIsCatalogParam = false;
				}
			}
			return OpenNewDoc( tools.get_object_form_url( sCatalogNameParam, bIsCatalogParam ) );
	"/>


	<create_package PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_pak_url" PARAM="_report_id" PARAM="_param_source" PARAM="sPackIDParam" PARAM="sModeParam" PARAM="bStdParam" EXPR="
			ModalTaskMsg( ms_tools.get_const('uhzuk2g94j') + '...' );

			try
			{
				_proc_cust = _param_source.process_custom_templates;
			}
			catch ( err )
			{
				_proc_cust = false;
			}
			try
			{
				_proc_access_roles = _param_source.process_access_roles;
			}
			catch ( err )
			{
				_proc_access_roles = false;
			}
			try
			{
				sPackIDParam;
			}
			catch ( err )
			{
				sPackIDParam = null;
			}
			try
			{
				sModeParam;
			}
			catch ( err )
			{
				sModeParam = 'std';
			}
			try
			{
				bStdParam = ( bStdParam == true );
			}
			catch ( err )
			{
				bStdParam = false;
			}

			docForm = tools.get_form_upload_data( sPackIDParam );
			formDoc = docForm.TopElem;

			docReport = tools.add_report( _report_id, 'Version of exchange server: ' + formDoc.basic.server_version + '.' );

			try
			{
				fldPackage = _param_source;
			}
			catch ( err )
			{
				fldPackage = package_objects.GetChildByKey( local_settings.package_id );
			}

			counter = 0;
			_msg_str = ms_tools.get_const('uhzuk2g94j') + '...\n';
			oRepostStream = new BufStream;
			oRepostStream.WriteStr( 'Objects:\n' );

			for ( fldObjectElem in fldPackage.objects )
			{
				ModalTaskMsg( _msg_str + counter + ': ' + fldObjectElem.name );
				oRepostStream.WriteStr( ( fldObjectElem.modify ? '+ ' : '  ' ) + fldObjectElem.id + '\t' + fldObjectElem.type + '\t' + fldObjectElem.name );

				try
				{
					iObjectID = Int( fldObjectElem.id );
					tools.set_field_to_form_upload_data( formDoc, null, iObjectID, {
						bInvariable: ( ! fldObjectElem.modify ),
						bClearLastData: ( sModeParam == 'demo' ),
						bStd: ( bStdParam == true )
					} );

					counter++;
					oRepostStream.WriteStr( '\tOK.\n' );
				}
				catch ( err )
				{
					docReport = tools.add_report( _report_id, err, docReport );
				}
			}
			oRepostStream.WriteStr( 'Objects OK.\n' );
			docReport = tools.add_report( _report_id, oRepostStream.DetachStr(), docReport );


			if ( _proc_cust &amp;&amp; ArrayCount( fldPackage.custom_templates ) != 0 )
			{
				oRepostStream = new BufStream;
				oRepostStream.WriteStr( 'Custom templates:\n' );
				ModalTaskMsg( ms_tools.get_const('uhzuk2g94j') + '...\n' + ms_tools.get_const('wlcwah2eod') + '.' );

				for ( fldTemplateElem in fldPackage.custom_templates )
				{
					fldCustomTemplate = custom_templates.OptChild( fldTemplateElem.PrimaryKey );
					if ( fldCustomTemplate != undefined )
						if ( ( fldCustomTemplate.ChildExists( 'fields' ) &amp;&amp; fldCustomTemplate.fields.ChildNum != 0 ) || ( fldCustomTemplate.ChildExists( 'items' ) &amp;&amp; fldCustomTemplate.items.ChildNum != 0 ) )
							tools.set_field_to_form_upload_data( formDoc, fldCustomTemplate, 'custom_templates' );
					oRepostStream.WriteStr( 'Custom template &quot;' + fldTemplateElem.PrimaryKey + '&quot; OK.\n' );
				}

				oRepostStream.WriteStr( 'Custom templates OK.\n' );
				docReport = tools.add_report( _report_id, oRepostStream.DetachStr(), docReport );
			}

			if ( _proc_access_roles )
			{
				ModalTaskMsg( ms_tools.get_const('uhzuk2g94j') + '...\n' + ms_tools.get_const('etvzbzahks') + '.' );
				tools.set_field_to_form_upload_data( formDoc, access_roles );
				tools.add_report( _report_id, ms_tools.get_const('dhcq7a5m1z') );
			}

			_form_str = formDoc.GetXml( { 'ForceDecimal': true, 'DocHeader': true } );

			docReport = tools.add_report( _report_id, ms_tools.get_const('rfjm6mjz66') + ': ' + Date() + '.', docReport );

			ModalTaskMsg( ms_tools.get_const('1j11ecyi6j') + '...' );

			_cur_temp_dir = ObtainSessionTempFile();
			CreateDirectory( _cur_temp_dir );
			_temp_url = _cur_temp_dir + '/update.xml';
			PutUrlText( _temp_url, _form_str );

			tools.zip_create( UrlToFilePath(_cur_temp_dir + '/temp.zip'), UrlToFilePath(_temp_url) );
			tools.copy_url( _pak_url, _cur_temp_dir + '/temp.zip' );
			DeleteDirectory( _cur_temp_dir );

			return counter;
	"/>

	<create_list_package PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sResultUrlParam" PARAM="fldPackage" EXPR="
		oRes = ({ 'error': 0, 'error_text': '', 'counter': 0 })
		_child_num = fldPackage.objects.ChildNum;

		reportDoc = OpenNewDoc( 'x-local://wtv/wtv_action_report.xmd' );
		reportDoc.BindToDb( DefaultDb );
		reportDoc.TopElem.create_date = Date();
		reportDoc.TopElem.type = 'create_package';
		_report_id = reportDoc.DocID;

		_cur_id = tools.random_string( 10 );

		_report = 'ID: ' + _cur_id + '.\n';
		_report = _report + ms_tools.get_const('7pou8tbmuo') + ': ' + Date() + '.\n';
		_report = _report + ms_tools.get_const('ykcvdigr37') + ': ' + _child_num + '.\n';
		reportDoc.TopElem.report_text = _report;
		reportDoc.Save();

		_pak_name = 'update_' + tools.date_str() + '_' + _cur_id + '.zip';
		descDoc = OpenNewDoc( 'x-local://wtv/wtv_form_download_packages.xmd' );
		_child = descDoc.TopElem.AddChild();
		_child.id = _cur_id;
		_child.type = 'objects';
		_child.package_date = Date();
		_child.url = _pak_name;

		_temp_dir = ObtainSessionTempFile();
		CreateDirectory( _temp_dir );

		oRes.counter = tools.create_package( _temp_dir + '/' + _pak_name, _report_id, fldPackage, _cur_id );

		_log_str = ms_tools.get_const('1j11ecyi6j') + '...\n';
		for ( _file in fldPackage.files )
		try
		{
			ModalTaskMsg( _log_str + _file.url );
			_pak_name = 'download_' + tools.date_str() + '_' + _file.code + '.zip';
			tools.copy_url( _temp_dir + '/' + _pak_name, _file.url );

			_child = descDoc.TopElem.AddChild();
			_child.id = _file.code;
			_child.type = _file.type;
			_child.base_url = _file.base_url;
			_child.package_date = Date();
			_child.url = _pak_name;
		}
		catch ( dd )
		{
			alert( dd + '\n' + _file.url );
		}

		descDoc.Save( _temp_dir + '/desc.xml' );

		tools.zip_create( UrlToFilePath( sResultUrlParam ), UrlToFilePath( _temp_dir ) + '/*.*' );
		DeleteDirectory( _temp_dir );

		_repDoc = OpenDoc( UrlFromDocID( _report_id  ) );
		_repDoc.TopElem.data_file_url = sResultUrlParam;
		_repDoc.TopElem.report_text = _repDoc.TopElem.report_text + ms_tools.get_const('mzyvt9pwvg') + ': ' + sResultUrlParam + '.\n';
		_repDoc.TopElem.completed = ( oRes.counter == _child_num );
		_repDoc.Save();

		return oRes;
	"/>


	<get_doc_by_key PROPERTY="1" PARAM="sObjectNameParam" PARAM="oKeyParam" PARAM="oKeyValueParam" EXPR="
			sQueryCondition = '';
			if ( IsArray( oKeyParam ) )
			{
				for ( sConditionElem in oKeyParam )
					sQueryCondition += ( sQueryCondition == '' ? '' : ' and ' ) + '$elem/' + sConditionElem + ' = ' + XQueryLiteral( oKeyValueParam.GetProperty( sConditionElem ) );
			}
			else
			{
				sQueryCondition = '$elem/' + oKeyParam + ' = ' + XQueryLiteral( oKeyValueParam );
			}
			catObject = ArrayOptFirstElem( XQuery( 'for $elem in ' + sObjectNameParam + 's where ' + sQueryCondition + ' return $elem/Fields(\'id\')' ) );
			if ( catObject == undefined )
			{
				return null;
			}
			else
			{
				switch ( sObjectNameParam )
				{
					case 'user_data':
						try
						{
							return OpenDoc( UrlFromDocID( catObject.id, 'trash' ) );
						}
						catch ( err )
						{
							if ( LdsIsServer )
								alert( 'WARNING. Function: get_doc_by_key. OpenDoc deleted object ID ' + catObject.id + '. ' + err );
							return null;
						}
						break;
					case 'object_version':
						//return OpenDoc( UrlFromDocID( catObject.id, 'trash' ) );
						return OpenDoc( UrlFromDocID( catObject.id, DefaultDb ) );
						break;
					case 'active_web_template':
						return OpenDoc( UrlFromDocID( catObject.id, 'trash' ) );
						break;
					default:
						return OpenDoc( UrlFromDocID( catObject.id ) );
						break;
				}
			}
	"/>
	<obtain_doc_by_key PROPERTY="1" PARAM="sObjectNameParam" PARAM="oKeyParam" PARAM="oKeyValueParam" EXPR="
			try
			{
				oKeyValueParam;
			}
			catch ( err )
			{
				oKeyValueParam = null;
			}
			docObject = tools.get_doc_by_key( sObjectNameParam, oKeyParam, oKeyValueParam );
			if ( docObject == null )
			{
				docObject = tools.new_doc_by_name( sObjectNameParam, false );
				if ( IsArray( oKeyParam ) )
				{
					for ( sConditionElem in oKeyParam )
						docObject.TopElem.Child( sConditionElem ).Value = oKeyValueParam.GetProperty( sConditionElem );
				}
				else
				{
					docObject.TopElem.Child( oKeyParam ).Value = oKeyValueParam;
				}
				switch ( sObjectNameParam )
				{
					case 'object_version':
						docObject.BindToDb( DefaultDb );
						break;
					case 'user_data':
					case 'active_web_template':
						docObject.BindToDb( 'trash' );
						break;
					default:
						docObject.BindToDb( DefaultDb );
						break;
				}
				return docObject;
			}
			else
			{
				return docObject;
			}
	"/>


		<get_seconds_from_duration PROPERTY="1" PARAM="_duration" EXPR="
			if ( _duration == '' )
				return 0;

			_str = StrLowerCase( Trim( _duration ) );
			_str = StrReplace( _str, 'p', '' );
			if ( StrBegins( _str, 't' ) )
			{
				_str = StrRightRangePos( _str, 1 );
				bTime = true;
			}
			else
			{
				bTime = false;
			}

			iRes = 0.0;
			iLen = StrLen( _str );
			sDigits = '';
			for ( i=0; i &lt; iLen; i++ )
			{
				sCurChar = StrRangePos( _str, i, i + 1 );
				if ( sCurChar == 't' )
				{
					bTime = true;
				}
				else if ( sCurChar == 'y' )
				{
					iRes += Int( sDigits ) * 31536000;
					sDigits = '';
				}
				else if ( sCurChar == 'm' )
				{
					iRes += Int( sDigits ) * ( bTime ? 60 : 2592000 );
					sDigits = '';
				}
				else if ( sCurChar == 'd' )
				{
					iRes += Int( sDigits ) * 86400;
					sDigits = '';
				}
				else if ( sCurChar == 'h' )
				{
					iRes += Int( sDigits ) * 3600;
					sDigits = '';
				}
				else if ( sCurChar == 's' )
				{
					iRes += Real( sDigits );
					sDigits = '';
				}
				else
				{
					sDigits += sCurChar;
				}
			}
			return iRes;
	"/>

	<assessment_filling_from_qti PROPERTY="1" PARAM="_assessment_id" PARAM="_source" PARAM="_qti_text" EXPR="
			if ( _source == '' || _source == null )
			{
				docAssessment = OpenDoc( UrlFromDocID( _assessment_id ) );
				_source = docAssessment.TopElem;
			}

			qtiDoc = OpenDocFromStr( _qti_text, 'form=x-local://wtv/wtv_form_qti_text.xmd' ).questestinterop.assessment;

			_source.title = qtiDoc.title;
			_source.code = qtiDoc.ident;
			_source.comment = qtiDoc.qticomment;
			//_source.passing_score = qtiDoc.ws_passing_score;  //Для РосГосСтраха??? ;-)
			_source.passing_score = qtiDoc.outcomes_processing.outcomes.decvar.cutvalue;


			_dur = tools.get_seconds_from_duration( qtiDoc.duration );
			_source.duration = ( _dur == 0 ? null : _dur / 60 );

			_source.rubric.candidate = qtiDoc.rubric.material.mattext;
			_source.objectives.candidate = qtiDoc.objectives.material.mattext;
			_source.display_correct_answer = ( StrLowerCase( qtiDoc.assessmentcontrol.solutionswitch ) == 'yes' ? true : false );
			_source.not_display_feedback = ( StrLowerCase( qtiDoc.assessmentcontrol.feedbackswitch ) == 'no' ? true : false );


			_source.sections.Clear();
			for ( _section in qtiDoc.section )
			{
				try
				{
					_section_child = ArrayFind( _source.sections, 'code == _section.ident' )
				}
				catch ( ss )
				{
					_section_child = _source.sections.AddChild();
					_section_child.code = _section.ident;
				}

				_section_child.title = _section.title;
				_section_child.comment = _section.qticomment;

				_dur = tools.get_seconds_from_duration( _section.duration );
				_section_child.duration = ( _dur == 0 ? null : _dur / 60 );

				_section_child.display_correct_answer = ( StrLowerCase( _section.sectioncontrol.solutionswitch ) == 'yes' ? true : false );
				_section_child.not_display_feedback = ( StrLowerCase( _section.sectioncontrol.feedbackswitch ) == 'no' ? true : false );
				_section_child.rubric.candidate = _section.rubric.material.mattext;
				_section_child.objectives.candidate = _section.objectives.material.mattext;
				_section_child.selection_ordering.order = _section.selection_ordering.order.order_type;

				for ( _item in _section.item )
				{
					_is_id = false;
					try
					{
						Int( _item.ident );
						_id = ArrayFirstElem( XQuery( 'for $item in items where $item/id = ' + _item.ident + ' return $item' ) ).id;
						_is_id = true;
					}
					catch ( dd )
					{
					}

					if ( _is_id )
						docItem = OpenDoc( UrlFromDocID( _id ) );
					else
						docItem = tools.obtain_doc_by_key( 'item', 'code', _item.ident.Value );

					itemDoc = docItem.TopElem;

					itemDoc.code = _item.ident;
					itemDoc.title = _item.title;
					itemDoc.comment = _item.qticomment;
					itemDoc.max_attempts_num = _item.maxattempts;
					itemDoc.question_points = _item.ws_question_points;

					_dur = tools.get_seconds_from_duration( _item.duration );
					itemDoc.duration = ( _dur == 0 ? null : _dur / 60 );

					itemDoc.objectives.candidate = _item.objectives.material.mattext;
					itemDoc.question_text = _item.presentation.material.mattext;

					itemDoc.display_correct_answer = ( StrLowerCase( _item.itemcontrol.solutionswitch ) == 'yes' ? true : false );

					_respcondition = null;
					for ( fldRespconditionElem in _item.resprocessing.respcondition )
						for ( fldSetvarElem in fldRespconditionElem.setvar )
							if ( Trim( fldSetvarElem ) != '' &amp;&amp; Real( fldSetvarElem ) &gt; 0.0 )
							{
								_respcondition = fldRespconditionElem;
								if ( _item.ws_question_points == null )
									itemDoc.question_points = Real( fldSetvarElem );
								break;
							}

					_response_lid = ArrayOptFirstElem( _item.presentation.response_lid );
					itemDoc.answers.Clear();

					if ( _response_lid != undefined )
					{
						_rcardinality = StrLowerCase( _response_lid.rcardinality );
						if ( _rcardinality == 'multiple' )
							itemDoc.type_id = 'multiple_response';

						_shuffle = StrLowerCase( _response_lid.render_choice.shuffle );
						if ( _shuffle == 'yes' || _shuffle == 'random' )
							itemDoc.order = 'Random';

						for ( _answer in _response_lid.render_choice.response_label )
						{
							_answer_child = itemDoc.answers.AddChild();
							_answer_child.text = _answer.material.mattext;
							if ( _respcondition != null )
								_answer_child.is_correct_answer = ArrayOptFind( _respcondition.conditionvar.varequal, 'Trim(Value)==_answer.ident' ) != undefined;
						}
					}

					docItem.Save();
					_section_child.items.ObtainChildByKey( docItem.DocID );
				}

			}
	"/>




	<submit_subscriptions PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_document_id" PARAM="documentDoc" PARAM="iPersonIDParam" EXPR="
			try
			{
				if ( documentDoc == '' || documentDoc == undefined )
					throw 'no_data';
			}
			catch ( dd )
			{
				documentDoc = null;
			}
			try
			{
				if ( iPersonIDParam == '' || iPersonIDParam == undefined )
					throw 'no_data';
			}
			catch ( err )
			{
				iPersonIDParam = null;
			}

			if ( LdsIsServer )
			{
				if ( documentDoc == null )
					documentDoc = OpenDoc( UrlFromDocID( _document_id ) ).TopElem;
				sPersonCondition = iPersonIDParam == null ? '' : ' and $elem/person_id != ' + iPersonIDParam;

				subscrioptionArray = XQuery(  'for $elem in subscriptions where $elem/document_id = ' + _document_id + sPersonCondition + ' and ( $elem/date_to = null() or $elem/date_to > ' + XQueryLiteral( Date() ) + ' ) return $elem' );
				if ( documentDoc.Name == 'document' )
				{
					_cur_doc = documentDoc;
					while ( _cur_doc.parent_document_id.HasValue )
					{
						_cur_doc = _cur_doc.parent_document_id.OptForeignElem;
						if ( _cur_doc == undefined )
							break;
						_cur_id = _cur_doc.id;

						subscrioptionArray = ArrayUnion( subscrioptionArray, XQuery( 'for $elem in subscriptions where $elem/document_id = ' + _cur_id + sPersonCondition + ' and $elem/include_subdocs = true() and ( $elem/date_to = null() or $elem/date_to > ' + XQueryLiteral( Date() ) + ' ) return $elem' ) );
					}
				}

				_s_code = '41';
				switch ( documentDoc.Name )
				{
					case 'forum':
						_s_code = '42';
						break;
					case 'blog':
						_s_code = '43';
						break;
					case 'forum_entry':
						_s_code = '44';
						break;
				}

				for ( _sudscription in subscrioptionArray )
					tools.create_notification( _s_code, _sudscription.id, '', _document_id, null, documentDoc );
			}
			else
			{
				CallServerMethod( 'tools', 'submit_subscriptions', [ RValue( _document_id ), documentDoc, RValue( iPersonIDParam ) ] );
			}
	"/>





	<create_filter_xquery PROPERTY="1" PARAM="_conditions" PARAM="_cond" PARAM="_elem_name" EXPR="
			try
			{
				if ( _cond == null )
					_cond = '';
			}
			catch ( err )
			{
				_cond = '';
			}
			try
			{
				if ( _elem_name == null || _elem_name == '' )
					_elem_name = 'elem';
			}
			catch ( err )
			{
				_elem_name = 'elem';
			}

			sConditionsQual = '';
			try
			{
				sConditionsQual = _conditions.Parent.conditions_qual.Value;
			}
			catch ( err )
			{
			}
			if ( sConditionsQual != '' )
			{
				_cond += ( _cond == '' ? '' : ' and ' ) + sConditionsQual;
			}

			for ( _condition in _conditions )
			{
				_cond += _cond == '' ? ' ' : ' ' + _condition.and_or;

				if ( _condition.bracket == '(' )
					_cond += ' (';

				if ( _condition.is_custom_field )
				{
					sValue = _condition.value.Value;
					sTemplateFieldType = '';
					if ( (tools.sys_db_capability & tools.UNI_CAP_BASIC) )
					{
						fldTemplateFieldType = common.template_field_types.GetOptChildByKey( _condition.type );
						if ( fldTemplateFieldType != undefined )
						{
							sTemplateFieldType = '~' + fldTemplateFieldType.field_type;
							if ( fldTemplateFieldType.field_type == 'date' )
							{
								try
								{
									sValue = StrXmlDate( Date( sValue ) );
								}
								catch ( ee )
								{
								}
							}
						}
					}
					_cond += ' doc-contains($' + _elem_name + '/id,\'' + DefaultDb + '\',' + XQueryLiteral( '[' + _condition.field + ( _condition.option_type == 'neq' ? '!=' : ( StrContains( _condition.option_type, 'cn' ) ? ' ' + _condition.option_type.ForeignElem.name + ' ' : _condition.option_type.ForeignElem.name ) ) + tools.get_ft_value( sValue ) + sTemplateFieldType + ']' ) + ')';
				}
				else if ( _condition.is_multiple )
				{
					switch ( _condition.type )
					{
						case 'string':
							if( _condition.value_multiple.HasValue )
							{
								_cond += ' MatchSome($' + _elem_name + '/' + _condition.field + ',' + _condition.value_multiple.XQueryLiteral + ')' + ( _condition.option_type == 'neq' || _condition.option_type == 'ncn' ? ' = false()' : '' );
							}
							else
							{
								_cond += ' IsEmpty($' + _elem_name + '/' + _condition.field + ')' + ( _condition.option_type == 'neq' || _condition.option_type == 'ncn' ? ' = false()' : ' = true()' );
							}
							break;
						case 'integer':
							if( OptInt( _condition.value ) != undefined )
							{
								_cond += ' MatchSome($' + _elem_name + '/' + _condition.field + ',' + OptInt( _condition.value ) + ')' + ( _condition.option_type == 'neq' || _condition.option_type == 'ncn' ? ' = false()' : '' );
							}
							else
							{
								_cond += ' IsEmpty($' + _elem_name + '/' + _condition.field + ')' + ( _condition.option_type == 'neq' || _condition.option_type == 'ncn' ? ' = false()' : ' = true()' );
							}
							break;
					}
				}
				else if ( StrContains( _condition.option_type, 'cn' ) )
				{
					_cond += ' contains($' + _elem_name + '/' + _condition.field + ',' + _condition.value.XQueryLiteral + ')' + ( _condition.option_type == 'ncn' ? ' = false()' : '' );
				}
				else
				{
					_cond += ' $' + _elem_name + '/' + _condition.field;
					switch ( _condition.option_type )
					{
						case 'neq':
							_cond += ' !=';
							break;
						default:
							_cond += ' ' + _condition.option_type.ForeignElem.name;
							break;
					}
					switch ( _condition.type )
					{
						case 'bool':
							_cond += _condition.value == 'true' ? ' true()' : ' false()';
							break;
						case 'string':
							_cond += ' ' + _condition.value.XQueryLiteral;
							break;
						case 'date':
							_cond += _condition.value.HasValue ? ' date(\'' + _condition.value + '\')' : ' null()';
							break;
						default:
							_cond += _condition.value.HasValue ? ' ' + _condition.value : ' null()';
							break;
					}
				}

				if ( _condition.bracket == ')' )
					_cond += ' )';
			}

			return _cond;
	"/>


	<create_condition_field PROPERTY="1" PARAM="fldConditionParam" PARAM="sElemNameParam" EXPR="
			try
			{
				if ( sElemNameParam == null )
				{
					throw 'no_data';
				}
			}
			catch ( err )
			{
				sElemNameParam = 'curObject.';
			}

			var sField = '';
			if ( fldConditionParam.top_elem.HasValue )
			{
				if ( fldConditionParam.top_elem == 'curContext' )
				{
					var arrField = String( fldConditionParam.field ).split( '.' );
					sField = StrContains( fldConditionParam.field, '.' ) ?
						'(_c=ArrayOptFindByKey(Env.curContext,' + CodeLiteral( arrField[ 0 ] ) + ',\'name\'),(_c==undefined?undefined:(StrBegins(_c.value_str,\'{\')?(\'\'+ParseJson(_c.value_str).GetOptProperty(' + CodeLiteral( arrField[ 1 ] ) + ')):(\'\'+_c.value))))'
						: '(_c=ArrayOptFindByKey(Env.curContext,' + CodeLiteral( arrField[ 0 ] ) + ',\'name\'),(_c==undefined?undefined:(\'\'+_c.GetOptProperty(\'value\'))))';
				}
				else
				{
					sField = 'Env.' + fldConditionParam.top_elem + '.' + fldConditionParam.field;
				}
			}
			else
			{
				sField = sElemNameParam + ( fldConditionParam.is_custom_field ? 'custom_elems.ObtainChildByKey(' + CodeLiteral( fldConditionParam.field ) + ').value' : fldConditionParam.field );
			}
			return sField;
	"/>

	<create_filter_javascript PROPERTY="1" PARAM="_conditions" PARAM="_first_cond" PARAM="_elem_name" EXPR="
			try
			{
				if ( _first_cond == null )
					_first_cond = '';
			}
			catch ( dd )
			{
				_first_cond = '';
			}
			try
			{
				if ( _elem_name == null )
					throw 'neto';
			}
			catch ( dd )
			{
				_elem_name = 'curObject.';
			}

			_cond = '';
			for ( _condition in _conditions )
			{
				_cond += ( _cond == '' ? '' : ( _condition.and_or == 'and' ? ' &amp;&amp;' : ' ||' ) );

				if ( _condition.bracket == '(' )
				{
					_cond += '(';
				}

				if ( _condition.is_multiple &amp;&amp; StrContains( _condition.option_type, 'cn' ) )
				{
					_cond += _elem_name + _condition.field + '.ByValueExists(' + CodeLiteral( _condition.value ) + ')';
				}
				else
				{
					_field = tools.create_condition_field( _condition, _elem_name );
					if ( System.IsWebClient &amp;&amp; ( _condition.option_type == 'eq' || _condition.option_type == 'neq' ) &amp;&amp; _condition.type == 'integer' )
					{
						_field = 'XQueryLiteral( ' + _field + ' )';
					}

					switch ( _condition.option_type )
					{
						case 'eq':
							_cond += ' ' + _field + '==';
							break;
						case 'neq':
							_cond += ' ' + _field + '!=';
							break;
						case 'cn':
						case 'ncn':
							_cond += ( _condition.option_type == 'ncn' ? ' !' : '' ) + ' StrContains(' + _field + ',' + CodeLiteral( _condition.value ) + ')';
							break;
						default:
							_cond += ' ' + _field + _condition.option_type.ForeignElem.name;
							break;
					}

					if ( StrBegins( _condition.value, '{{' ) &amp;&amp; StrEnds( _condition.value, '}}' ) )
					{
						sValueCond = StrRangePos( _condition.value, 2, ( StrLen( _condition.value ) - 2 ) );
						sValueCond = StrReplace( sValueCond, 'curUser.', 'Env.curUser.' );
						sValueCond = StrReplace( sValueCond, 'curObject.', 'Env.curObject.' );
						sValueCond = StrReplace( sValueCond, 'curDoc.', 'Env.curDoc.' );
						sValueCond = StrReplace( sValueCond, 'curContext.', 'Env.curContext.' );

						if ( ! StrContains( _condition.option_type, 'cn' ) )
						{
							switch ( _condition.type )
							{
								case 'bool':
								{
									_cond += 'tools_web.is_true(' + sValueCond + ')';
									break;
								}
								case 'string':
								{
									_cond += '\'\'+RValue(' + sValueCond + ')';
									break;
								}
								case 'date':
								{
									_cond += 'OptDate(' + sValueCond + ',null)';
									break;
								}
								case 'integer':
								{
									if ( System.IsWebClient &amp;&amp; ( _condition.option_type == 'eq' || _condition.option_type == 'neq' ) )
									{
										_cond += 'XQueryLiteral( OptInt(' + sValueCond + ',null) )';
									}
									else
									{
										_cond += 'OptInt(' + sValueCond + ',null)';
									}
									break;
								}
								case 'real':
								{
									_cond += 'OptReal(' + sValueCond + ',null)';
									break;
								}
								default:
								{
									_cond += sValueCond;
									break;
								}
							}
						}
					}
					else
					{
						if ( ! StrContains( _condition.option_type, 'cn' ) )
						{
							switch ( _condition.type )
							{
								case 'bool':
								{
									_cond += ( _condition.is_custom_field ? ( tools_web.is_true( _condition.value ) ? '\'true\'' : '\'false\'' ) : ( tools_web.is_true( _condition.value ) ? 'true' : 'false' ) );
									break;
								}
								case 'string':
								{
									_cond += CodeLiteral( _condition.value );
									break;
								}
								case 'date':
								{
									_cond += ( _condition.value.HasValue ? 'OptDate(' + CodeLiteral( _condition.value ) + ')' : 'null' );
									break;
								}
								case 'integer':
								{
									if ( System.IsWebClient &amp;&amp; ( _condition.option_type == 'eq' || _condition.option_type == 'neq' ) )
									{
										_cond += ( _condition.value.HasValue ? 'XQueryLiteral( OptInt(' + CodeLiteral( _condition.value ) + ') )' : 'null' );
									}
									else
									{
										_cond += ( _condition.value.HasValue ? 'OptInt(' + CodeLiteral( _condition.value ) + ')' : 'null' );
									}
									break;
								}
								case 'real':
								{
									_cond += ( _condition.value.HasValue ? 'OptReal(' + CodeLiteral( _condition.value ) + ')' : 'null' );
									break;
								}
								default:
								{
									_cond += ( _condition.is_custom_field ? CodeLiteral( _condition.value ) : ( _condition.value.HasValue ? _condition.value : 'null' ) );
									break;
								}
							}
						}
					}
				}

				if ( _condition.bracket == ')' )
				{
					_cond += ')';
				}
			}

			return _first_cond == '' ? _cond : _first_cond + ( _cond != '' ? '&amp;&amp;(' + _cond + ')' : '' );
	"/>





	<obtain_custom_templates PROPERTY="1" PARAM="_url" PARAM="_source" EXPR="
			try
			{
				if ( _url == null || _url == '' )
					throw 'no url';

				listDoc = OpenDoc( _url ).TopElem;
			}
			catch ( err )
			{
				listDoc = _source;
			}

			function update_field( _list, _cur_list )
			{
				if ( _list.ChildExists( 'fields' ) )
					for ( _field in _list.fields )
					{
						_child = _cur_list.fields.ObtainChildByKey( _field.name );
						_child.AssignElem( _field );
					}

				if ( _list.ChildExists( 'sheets' ) )
					for ( _sheet in _list.sheets )
					{
						_child = _cur_list.sheets.ObtainChildByKey( _sheet.id );
						_child.AssignElem( _sheet );
					}
			}

			_complete_counter = 0;
			for ( _list in listDoc )
				try
				{
					_cur_list = custom_templates.Child( _list.Name );
					update_field( _list, _cur_list );

					if ( _list.ChildExists( 'items' ) )
						for ( _item in _list.items )
						{
							_cur_item = _cur_list.items.ObtainChildByKey( _item.id );
							update_field( _item, _cur_item );
						}

					_complete_counter++;

				}
				catch ( der )
				{
				}

			return _complete_counter;
	"/>


	<obtain_access_roles PROPERTY="1" PARAM="_url" PARAM="_list" EXPR="
			try
			{
				if ( _list == '' || _list == null )
					throw 'net_lista';

				listDoc = _list;
			}
			catch ( err )
			{
				listDoc = OpenDoc( _url ).TopElem;
			}

			_complete_flag = 0;
			for ( _list in listDoc )
				if ( ! access_roles.ChildByKeyExists( _list.PrimaryKey ) )
					try
					{
						_cur_list = access_roles.ObtainChildByKey( _list.PrimaryKey );
						_cur_list.AssignElem( _list );
						_complete_flag++;
					}
					catch ( der )
					{
					}

			return _complete_flag;
	"/>



	<import_course PROPERTY="1" PARAM="_file" EXPR="
			_import_file = '';
			_crs_url = '';
			_xml_url = '';
			if ( UrlPathSuffix( _file ) == '.zip' )
			{
				_temp_url = ObtainSessionTempFile();
				tools.zip_extract( _file, _temp_url );

				_url_array = ReadDirectory( _temp_url );
				_xml_url = '';
				for ( _url in _url_array )
				{
					if ( IsDirectory( _url ) )
						continue;

					sUrlLower = StrLowerCase( _url );
					sFileImportSuffix = UrlPathSuffix( sUrlLower );
					sFileImportName = UrlFileName( sUrlLower );
					if ( sFileImportName == 'imsmanifest.xml' || sFileImportName == 'cmi5.xml' )
					{
						_xml_url = _url;
						break;
					}

					if ( sFileImportSuffix == '.crs' )
						_crs_url = _url;
				}

				if ( _xml_url != '' )
				{
					_file = _xml_url;
					_crs_url = '';
				}
				else if ( _crs_url != '' )
					{
						_file = _crs_url;
					}
			}

			if ( _crs_url == '' &amp;&amp; _xml_url == '' )
				return false;

			oRes = tools.load_course( _file );
			teCourse = oRes.course;
			docCourse = tools.obtain_doc_by_key( 'course', 'code', teCourse.code.Value );
			docCourse.TopElem.AssignElem( teCourse );
			docCourse.Save();

			if ( UrlPathSuffix( _file ) == '.xml' )
				tools.copy_manifest_resources( _file, docCourse.TopElem.base_url );

			return true;
	"/>




	<process_skk PROPERTY="1" PARAM="_inst_flag" EXPR="
			try
			{
				_inst_flag = ( _inst_flag == false ? false : true )
			}
			catch ( ee )
			{
				_inst_flag = true;
			}

			if ( tools.file_url_exists( 'x-local://custom/cur_server_select.xml' ) )
			{
				_file_flag = true;
				temp_doc = OpenDoc( 'x-local://custom/cur_server_select.xml', 'form=//wtv/wtv_form_select_server.xmd' ).TopElem;
			}
			else
			{
				_file_flag = false;
				temp_doc = OpenDoc( 'x-local://custom/server_select.xml', 'form=//wtv/wtv_form_select_server.xmd' ).TopElem;
			}

			if ( _inst_flag &amp;&amp; _file_flag &amp;&amp; global_settings.old_skk_code == '' &amp;&amp; global_settings.skk_code == '' )
			{
				_first_flag = true;
				_cur_code = temp_doc.code.Value;
			}
			else
			{
				_first_flag = false;
				_cur_code = global_settings.skk_code.Value;
			}

			if ( _cur_code == '' || ( _inst_flag &amp;&amp; ! _first_flag &amp;&amp; global_settings.old_skk_code == global_settings.skk_code ) )
				return false;

			if ( temp_doc.create_exchange_server )
			{
				docExchangeServer = null;
				if ( temp_doc.package_url.HasValue )
				{
					_temp_flag = ( global_settings.update_exist_package_obj ? true : false );
					global_settings.update_exist_package_obj = false;

					packageDoc = tools.package_process( UrlAppendPath( 'x-local://custom/', temp_doc.package_url ), 'objects' );

					global_settings.update_exist_package_obj = _temp_flag;

					for ( _server in packageDoc.exchange_servers )
						try
						{
							docExchangeServer = OpenDoc( UrlFromDocID( _server.id ) );
							alert( 'Update custom exchange server &quot;' + docExchangeServer.TopElem.name + '&quot;: old CODE = &quot;' + docExchangeServer.TopElem.code + '&quot;, new CODE = &quot;' + _cur_code + '&quot;.' );
							docExchangeServer.TopElem.code = _cur_code;

							if ( _first_flag )
							{
								alert( 'Update custom exchange server &quot;' + docExchangeServer.TopElem.name + '&quot;: old PASSWORD = &quot;' + docExchangeServer.TopElem.server_password + '&quot;, new PASSWORD = &quot;' + temp_doc.password + '&quot;.' );
								docExchangeServer.TopElem.server_password = temp_doc.password;
							}
							docExchangeServer.Save();
						}
						catch ( err )
						{
							alert( err );
						}

					if ( temp_doc.disp_select_replication_time )
					{
						intervalArray = String( Trim( temp_doc.replication_time ) ).split( '-' );
						_start_time = tools.get_time( intervalArray[0] );
						_start_date = Date( DateNewTime( Date() ) + ' ' + _start_time );
						_end_time = ( ArrayCount( intervalArray ) &gt; 1 ? tools.get_time( intervalArray[1] ) : null );

						if ( _end_time != null )
						{
							_end_date = Date( DateNewTime( Date() ) + ' ' + _end_time );
							_end_date = ( _start_date &gt; _end_date ? DateOffset( _end_date, 86400 ) : _end_date );
							_delta = DateToRawSeconds( _end_date ) - DateToRawSeconds( _start_date );
							_start_date = DateOffset( _start_date, Random( 0, _delta ) );
							_start_time = StrTime( _start_date );
						}
						_end_time = StrTime( DateOffset( _start_date, 3600 ) );

						for ( _server_agent in packageDoc.server_agents )
							try
							{
								if ( _server_agent.code == 'exchange_upload_data' || _server_agent.code == 'exchange_download_data' )
								{
									docServerAgent = OpenDoc( UrlFromDocID( _server_agent.id ) );
									_time = ( _server_agent.code == 'exchange_upload_data' ? _start_time : _end_time )
									docServerAgent.TopElem.start_time = _time;
									docServerAgent.Save();
									alert( 'Update custom server agent &quot;' + docServerAgent.TopElem.name + '&quot;: new START_TIME = &quot;' + _time + '&quot;.' );
								}
							}
							catch ( err )
							{
								alert( err );
							}
					}
				}

				if ( docExchangeServer == null )
				{
					docExchangeServer = tools.obtain_doc_by_key( 'exchange_server', 'code', String( _cur_code ) );
					alert( 'Create custom exchange server &quot;' + docExchangeServer.TopElem.name + '&quot;: old CODE = &quot;' + docExchangeServer.TopElem.code + '&quot;, new CODE = &quot;' + _cur_code + '&quot;.' );
					docExchangeServer.TopElem.code = _cur_code;

					if ( _first_flag )
					{
						alert( 'Create custom exchange server &quot;' + docExchangeServer.TopElem.name + '&quot;: old PASSWORD = &quot;' + docExchangeServer.TopElem.server_password + '&quot;, new PASSWORD = &quot;' + temp_doc.password + '&quot;.' );
						docExchangeServer.TopElem.server_password = temp_doc.password;
						docExchangeServer.TopElem.name = temp_doc.name;
					}
					docExchangeServer.Save();
				}

				global_settings.default_exchange_server_id = docExchangeServer.DocID;
			}

			global_settings.old_skk_code = _cur_code;
			global_settings.skk_code = _cur_code;

			AppInstanceID = global_settings.skk_code.Value;
			alert( 'Set SKK CODE &quot;' + AppInstanceID + '&quot;.' );


			if ( temp_doc.custom_templates_url.HasValue )
			{
				iCounter = tools.obtain_custom_templates( UrlAppendPath( 'x-local://custom/', temp_doc.custom_templates_url ) );
				if ( iCounter &gt; 0 )
					ms_tools.obtain_shared_list_elem( 'custom_templates ', null, custom_templates );
				alert( 'Import custom templates.' );
			}

			if ( temp_doc.access_roles_url.HasValue )
			{
				iObtained = tools.obtain_access_roles( UrlAppendPath( 'x-local://custom/', temp_doc.access_roles_url ) );
				access_roles.Doc.Save();  // RUN ONLY BY SERVER
				alert( 'Import custom access roles. Obtained ' + iObtained + ' roles.' );
			}

			if ( temp_doc.lngs_url.HasValue )
			{
				tools.add_lng( UrlAppendPath( 'x-local://custom/', temp_doc.lngs_url ), true );
				lngs.Doc.Save();
				alert( 'Import custom web constants.' );
			}

			if ( global_settings.first_install )
			{
				if ( temp_doc.lists_url.HasValue )
				{
					tools.obtain_lists( UrlAppendPath( 'x-local://custom/', temp_doc.lists_url ) );
					lists.Doc.Save();  // RUN ONLY BY SERVER
					alert( 'Import custom lists.' );
				}
			}

			if ( temp_doc.recovery_empty_lng_const &amp;&amp; tools.recovery_empty_lng_const( global_settings.settings.default_lng ) != 0 )
			{
				lngs.Doc.Save();
				alert( 'Recovery empty web language constants.' );
			}

			if ( temp_doc.customer.HasValue )
				global_settings.customer = temp_doc.customer;

			if ( temp_doc.default_lng.HasValue )
				global_settings.settings.default_lng = temp_doc.default_lng;

			if ( temp_doc.default_web_design.HasValue )
				global_settings.settings.default_web_design = temp_doc.default_web_design;

			return true;
	"/>




	<make_password PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="PASSWORD" PARAM="CHECK" EXPR="
			PASSWORD = Trim( PASSWORD );
			switch ( global_settings.settings.password_format )
			{
				case 'md5':
					if ( CHECK &amp;&amp; StrBegins( PASSWORD, '(' ) &amp;&amp; StrEnds( PASSWORD, ')' ) )
						return PASSWORD;
					else
						return '(' + Md5Hex( PASSWORD ) + ')';

				case 'sha1':
					if ( CHECK &amp;&amp; StrBegins( PASSWORD, '(' ) &amp;&amp; StrEnds( PASSWORD, ')' ) )
						return PASSWORD;
					else
						return '(' + HexData( SHA1( PASSWORD ) ) + ')';

				case 'sha1_base64':
					if ( CHECK &amp;&amp; StrBegins( PASSWORD, '(' ) &amp;&amp; StrEnds( PASSWORD, ')' ) )
						return PASSWORD;
					else
						return '(' + SHA1Base64( PASSWORD ) + ')';

				case 'sha256':
					if ( CHECK &amp;&amp; StrBegins( PASSWORD, '(' ) &amp;&amp; StrEnds( PASSWORD, ')' ) )
						return PASSWORD;
					else
						return '(' + HexData( SHA256( PASSWORD ) ) + ')';

				default:
					return PASSWORD;
			}
	"/>


	<get_version PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_type" PARAM="bDateFlag" EXPR="
			try
			{
				if ( _type == null || _type == '' )
					throw 'no_data';
			}
			catch ( dd )
			{
				_type = 'wtv';
			}
			try
			{
				bDateFlag = bDateFlag == true;
			}
			catch ( dd )
			{
				bDateFlag = true;
			}

			_url = '';
			switch ( _type )
			{
				case 'wtv':
					_url = 'x-local://wtv/history.xml';
					break;
				case 'qti':
					_url = 'x-local://qti/history.xml';
					break;
				case 'assessment':
					_url = 'x-local://wtv/history_ass.xml'
					break;
				case 'last':
					_url = 'x-local://last/history.xml'
					break;
			}

			var historyDoc = OpenDoc( _url ).TopElem;
			var sVersion = historyDoc.version + ( bDateFlag ? ( historyDoc.ChildExists( 'modification_date' ) ? ' (' + historyDoc.modification_date + ')' : '' ) : '' );
			return sVersion;
	"/>



	<get_custom_template PROPERTY="1" PARAM="_catalog" PARAM="_top_id" PARAM="_source" EXPR="
			var fldCatalogTemplate = custom_templates.OptChild( _catalog );
			if ( fldCatalogTemplate == undefined )
				return null;

			var fldCatalogTemplateRes = null;
			if ( fldCatalogTemplate.ChildExists( 'fields' ) )
			{
				var fldTemplateField = fldCatalogTemplate.OptChild( 'template_field' );
				if ( fldTemplateField != undefined &amp;&amp; fldTemplateField.HasValue )
				{
					fldCatalogTemplateRes = fldCatalogTemplate.Clone();
				}
				else
				{
					return fldCatalogTemplate;
				}
			}

			if ( ! fldCatalogTemplate.ChildExists( 'items' ) )
			{
				try
				{
					if ( _source == null )
					{
						throw 'no_data';
					}

					_top_id = _source.EvalPath( fldCatalogTemplate.template_field_id );
				}
				catch ( err )
				{
				}
				fldCatalogTemplate = custom_templates.Child( fldCatalogTemplate.template_field );
			}

			var fldItem = fldCatalogTemplate.items.GetOptChildByKey( _top_id );
			if ( fldItem != undefined )
			{
				if ( fldCatalogTemplateRes == null )
				{
					return fldItem;
				}
				else
				{
					for ( fldFieldElem in fldItem.fields )
					{
						fldCatalogTemplateRes.fields.ObtainChildByKey( fldFieldElem.PrimaryKey ).AssignElem( fldFieldElem );
					}
				}
			}
			return fldCatalogTemplateRes;
	"/>


	<set_web_ban PROPERTY="1" PARAM="_person_id" PARAM="_status" PARAM="_source" PARAM="_check_admin" EXPR="
			try
			{
				if ( _source == null || _source == '' )
					throw 'no_source';

				docPerson = _source;
			}
			catch ( dd )
			{
				docPerson = OpenDoc( UrlFromDocID( _person_id ) );
			}

			try
			{
				_check_admin;
			}
			catch ( dd )
			{
				_check_admin = true;
			}

			if ( ( _check_admin &amp;&amp; docPerson.TopElem.access.access_role == 'admin' ) || docPerson.TopElem.access.web_banned == _status )
				return false;

			docPerson.TopElem.access.web_banned = _status;
			docPerson.Save();

			tools.create_notification( '7', docPerson.DocID );

			return true;
	"/>



	<disp_block_filling_by_source PROPERTY="1" PARAM="_source" PARAM="_disp_block" PARAM="_disp_object_blocks" PARAM="_source_id" EXPR="
			if ( _disp_block.access_block_type.HasValue )
			{
				_disp_object_blocks.ObtainChildByKey( _disp_block.access_block_type );
				for ( _block in _disp_object_blocks )
				{
					_cur_block = _block.Child( _source.Name );
					if ( _block.PrimaryKey == _disp_block.access_block_type )
					{
						_child = _cur_block.objects.ObtainChildByKey( _source_id );
						_child.AssignElem( _disp_block );
						if ( ! _child.obj_title.HasValue &amp;&amp; _source.ChildExists( 'name' ) )
							_child.obj_title = _source.name;
						if ( _source.ChildExists( 'category' ) )
							_child.category = _source.category;
					}
					else
					{
						_cur_block.objects.DeleteChilds( 'PrimaryKey==Int(\'' + _source_id + '\')' );
					}
				}
			}
			else
			{
				for ( _block in _disp_object_blocks )
					_block.Child( _source.Name ).objects.DeleteChilds( 'PrimaryKey==Int(\'' + _source_id + '\')' );
			}
	"/>

	<disp_block_filling PROPERTY="1" PARAM="_source" PARAM="_disp_block" EXPR="
			disp_object_blocks.AssignElem( OpenDoc( disp_object_blocks.Doc.Url ).TopElem );

			tools.disp_block_filling_by_source( _source, _disp_block, disp_object_blocks, _source.Doc.DocID );

			disp_object_blocks.Doc.Save();
	"/>



	<get_order_query PROPERTY="1" PARAM="sOrderParam" PARAM="sDirParam" EXPR="
			try
			{
				if ( sDirParam == 'descending' )
					sDirParam = '-';
			}
			catch ( err )
			{
				sDirParam = '+';
			}

			sOrder = '';
			arrOrder = String( sOrderParam ).split( ',' );
			for ( sOrderElem in arrOrder )
			{
				if ( sOrder != '' )
					sOrder += ', ';

				sOrderElem = Trim( sOrderElem );
				if ( StrContains( sOrderElem, '.ForeignElem.' ) )
					sOrder += 'ForeignElem( $elem/' + StrReplace( sOrderElem, '.ForeignElem.', ' )/' );
				else
					sOrder += ( StrBegins( sOrderElem, '$elem/' ) || StrBegins( sOrderElem, 'ForeignElem' ) ? '' :  '$elem/' ) + sOrderElem;

				if ( sDirParam == '-' &amp;&amp; ! StrEnds ( sOrderElem, 'ascending' ) )
					sOrder += ' descending';
			}
			return sOrder;
	"/>

	<create_xquery PROPERTY="1" PARAM="_catalog_name" PARAM="_xquery_qual" PARAM="_filter_xquery" PARAM="_ft_filter" PARAM="_order_str" PARAM="_order_dir" PARAM="_is_hier" PARAM="_foreign_field" PARAM="oColumnsParam" PARAM="sSearchTypeParam" EXPR="
			try
			{
				iHierID = OptInt( _is_hier );
				_is_hier = _is_hier == true || iHierID != undefined;
			}
			catch ( gg )
			{
				_is_hier = false;
			}
			try
			{
				if ( _ft_filter == '' || _ft_filter == undefined )
					_ft_filter = null;
			}
			catch ( gg )
			{
				_ft_filter = null;
			}
			try
			{
				if ( _order_str == '' || _order_str == undefined )
					_order_str = null;
			}
			catch ( gg )
			{
				_order_str = null;
			}
			try
			{
				_order_dir = _order_dir == '-' || _order_dir == 'descending' || _order_dir == 'desc' ? '-' : '+';
			}
			catch ( gg )
			{
				_order_dir = '+';
			}
			try
			{
				if ( _foreign_field == null || _foreign_field == '' )
					_foreign_field = 'id';
			}
			catch ( gg )
			{
				_foreign_field = 'id';
			}
			var bElemQCMode = ( _xquery_qual != '' &amp;&amp; StrContains(_xquery_qual, '$elem_qc/') ) ;
			var sCursor = ( _xquery_qual != '' &amp;&amp; StrContains(_xquery_qual, '$elem_qc/') ) ? '$elem_qc' : '$elem';
			try
			{
				if ( oColumnsParam == null || (tools.sys_db_capability & tools.UNI_CAP_BASIC) == 0 )
					throw 'no_data';

				if ( ObjectType( oColumnsParam ) == 'JsArray' )
				{
					sReturnFields = sCursor + '/Fields(' + ArrayMerge( oColumnsParam, 'CodeLiteral(This)', ',' ) + ')';
				}
				else
				{
					function parse_fields( sSource, sTarget )
					{
						sSource = String( sSource );
						iIndex = sSource.indexOf( 'ListElem.' );
						iEndIndex = StrLen( sSource );
						while ( iIndex &gt;= 0 )
						{
							iFinishIndex = iStartIndex = iIndex + 9;
							for ( ; iFinishIndex &lt; iEndIndex ; iFinishIndex++ )
							{
								sChar = sSource.charAt( iFinishIndex );
								if ( sChar != '_' &amp;&amp; ( sChar &lt; 'a' || sChar &gt; 'z' ) )
									break;
							}

							sField = sCursor + '/' + StrRangePos( sSource, iStartIndex, iFinishIndex );
							if ( ! StrContains( sTarget, sField ) )
								sTarget += ', ' + sField;
							iIndex = sSource.indexOf( 'ListElem.', iFinishIndex );
						}
						return sTarget;
					}

					var sReturnFields = sCursor + '/id';
					for ( oColumnElem in oColumnsParam.columns )
					{
						sReturnFields += ', ' + sCursor + '/' + oColumnElem.order_field;
						if ( StrContains( oColumnElem.name, '?' ) || StrContains( oColumnElem.name, 'catch' ) )
						{
							sReturnFields = parse_fields( oColumnElem.name, sReturnFields );
						}
						for ( oTileItemElem in oColumnElem.tile_items )
						{
							sReturnFields = parse_fields( oTileItemElem.name, sReturnFields );
							sReturnFields = parse_fields( oTileItemElem.collor, sReturnFields );
						}
					}

					if ( oColumnsParam.data_fields.HasValue )
					{
						for ( sFieldElem in String( oColumnsParam.data_fields ).split( ',' ) )
						{
							sFieldElem = sCursor + '/' + sFieldElem;
							if ( ! StrContains( sReturnFields, sFieldElem ) )
								sReturnFields += ', ' + sFieldElem;
						}
					}
					if ( oColumnsParam.row_bk_color.HasValue )
					{
						sReturnFields = parse_fields( oColumnsParam.row_bk_color, sReturnFields );
					}
/*
					if ( oColumnsParam.row_image_url.HasValue )
					{
						sReturnFields = parse_fields( oColumnsParam.row_image_url, sReturnFields );
					}
*/
					if ( oColumnsParam.ChildExists( 'category_name' ) &amp;&amp; oColumnsParam.category_name.HasValue )
					{
						sReturnFields = parse_fields( oColumnsParam.category_name, sReturnFields );
					}
				}
			}
			catch ( err )
			{
				sReturnFields = sCursor;
			}

			var qual = String();
			var order = String();
			
			if ( _xquery_qual != '' )
			{
				sXqueryQual = String( _xquery_qual );
				iEmptyIndex = sXqueryQual.indexOf( '#empty#' );
				while ( iEmptyIndex &gt; 0 )
				{
					//iStartEmptyIndex = _xquery_qual.lastIndexOf( sCursor + '/', iEmptyIndex );
					iStartEmptyIndex = 0;
					iLastStartEmptyIndex = _xquery_qual.indexOf( sCursor + '/' );
					while ( iLastStartEmptyIndex &lt; iEmptyIndex )
					{
						iStartEmptyIndex = iLastStartEmptyIndex;
						iLastStartEmptyIndex = _xquery_qual.indexOf( sCursor + '/', iLastStartEmptyIndex + 6 );
						if ( iLastStartEmptyIndex &lt; 0 || iLastStartEmptyIndex &gt; iEmptyIndex )
							break;
					}

					iFinishEmptyIndex = iEmptyIndex + ( StrRangePos( _xquery_qual, iEmptyIndex + 9, iEmptyIndex + 9 ) == '\'' ? 9 : 8 );
					sFullEmpty = StrRangePos( _xquery_qual, iStartEmptyIndex, iFinishEmptyIndex );
					sXqueryQual = StrReplace( sXqueryQual, ' and ' + sFullEmpty, '' );
					sXqueryQual = StrReplace( sXqueryQual, ' or ' + sFullEmpty, '' );
					sXqueryQual = StrReplace( sXqueryQual, sFullEmpty, '' );
					iEmptyIndex = _xquery_qual.indexOf( '#empty#', iFinishEmptyIndex );
				}
				if ( StrBegins( sXqueryQual, ' and ' ) )
					sXqueryQual = StrRightRangePos( sXqueryQual, 5 );
				else if ( StrBegins( sXqueryQual, 'and ' ) )
					sXqueryQual = StrRightRangePos( sXqueryQual, 4 );
				else if ( StrBegins( sXqueryQual, ' or ' ) )
					sXqueryQual = StrRightRangePos( sXqueryQual, 4 );
				else if ( StrBegins( sXqueryQual, 'or ' ) )
					sXqueryQual = StrRightRangePos( sXqueryQual, 3 );

				if ( sXqueryQual != '' )
				{
					if ( StrContains( sXqueryQual, ' or ' ) )
						qual = ' where ( ' + sXqueryQual + ' )';
					else
						qual = ' where ' + sXqueryQual;
				}
			}

			if ( _filter_xquery != '' )
			{
				qual += qual == '' ? ' where ' : ' and ';
				if ( StrContains( _filter_xquery, ' or ' ) )
					qual += '( ' + _filter_xquery + ' )';
				else
					qual += _filter_xquery;
			}

			if ( _ft_filter != null )
			{
				try
				{
					if ( sSearchTypeParam == null || sSearchTypeParam == '' )
					{
						throw 'no_data';
					}
				}
				catch ( err )
				{
					sSearchTypeParam = 'global_settings';
				}

				if ( sSearchTypeParam == 'global_settings' )
				{
					bNotUseDocContains = global_settings.settings.not_use_doc_contains.Value;
					if ( ! bNotUseDocContains &amp;&amp; (tools.sys_db_capability &amp; tools.UNI_CAP_BASIC) != 0 )
					{
						fldObjectType = common.exchange_object_types.GetOptChildByKey( _catalog_name );
						if ( fldObjectType != undefined )
						{
							bNotUseDocContains = ! fldObjectType.ft_index;
						}
					}
				}
				else
				{
					bNotUseDocContains = sSearchTypeParam == 'indexed';
				}
				if ( bNotUseDocContains )
				{
					bNotUseDocContainsStrBegins = global_settings.settings.not_use_doc_contains_str_begins.Value;
					fldCatalogItem = tools.new_doc_by_name( _catalog_name, true ).TopElem.AddChild();
					sFTCond = '';
					sFTStr = XQueryLiteral( String( _ft_filter ) );
					for ( fldItemElem in fldCatalogItem )
					{
						if ( fldItemElem.Type == 'string' &amp;&amp; fldItemElem.FormElem.IsIndexed )
						{
							sFTCond += ( sFTCond == '' ? '' : ' or' ) + ' contains(' + sCursor + '/' + fldItemElem.Name + ',' + sFTStr + ( bNotUseDocContainsStrBegins ? ',true' : '' ) + ')';
						}
					}
					if ( sFTCond != '' )
					{
						qual += ( qual == '' ? ' where (' : ' and (' ) + sFTCond + ' )';
					}
				}
				else
				{
					sSearchByID = '';
					if( OptInt( _ft_filter ) != undefined &amp;&amp; ( StrLen( _ft_filter ) == 19 || ( StrBegins( _ft_filter, '0x' ) &amp;&amp; StrLen( _ft_filter ) == 18 ) ) )
					{
						sSearchByID = ' ' + sCursor + '/' + _foreign_field + ' = ' + OptInt( _ft_filter ) + ' or ';
					}
					qual += ( qual == '' ? ' where' : ' and' ) + ' ( ' + sSearchByID + ' doc-contains(' + sCursor + '/' + _foreign_field + ',\'' + DefaultDb + '\',' + XQueryLiteral( String( _ft_filter ) ) + ') )';
				}
			}

			if ( _order_str != null )
			{
				order = ' order by ' + ( _is_hier ? ( sCursor + '/Hier(' + ( iHierID == undefined ? '' : ( ( iHierID == 0 ? 'null()' : iHierID ) + ',\'-\'' ) ) + '), ' ) : '' ) + tools.get_order_query( _order_str, _order_dir );
			}

			sXQuery = 'for ' + sCursor + ' in ' + _catalog_name + 's' + qual + order + ' return ' + sReturnFields;
			
			if(bElemQCMode)
				sXQuery = StrReplace(sXQuery, '$elem/', '$elem_qc/');
				
//alert('tools.create_xquery(): sXQuery: '+sXQuery)
			return sXQuery;
	"/>

	<request_processing PROPERTY="1" PARAM="iRequestID" PARAM="docRequest" EXPR="
			try
			{
				if ( docRequest == null || docRequest == '' )
					throw 'no_source';
			}
			catch ( dd )
			{
				docRequest = OpenDoc( UrlFromDocID( iRequestID ) );
			}
			switch( docRequest.TopElem.Name )
			{
				case 'request':
					teRequestType = OpenDoc( UrlFromDocID( docRequest.TopElem.request_type_id ) ).TopElem;

					if ( teRequestType.use_standart_processing &amp;&amp; docRequest.TopElem.object_id.HasValue )
					{
						switch ( docRequest.TopElem.type )
						{
							case 'event':
								docEvent = ObtainUiDoc( UrlFromDocID( docRequest.TopElem.object_id ) );

								if ( docRequest.TopElem.is_group )
								{
									for ( _person in docRequest.TopElem.persons )
										tools.add_person_to_event( _person.PrimaryKey, docRequest.TopElem.object_id, null, docEvent, null, null, docRequest.DocID );

									for ( _group in docRequest.TopElem.groups )
										docEvent.TopElem.groups.ObtainChildByKey( _group.PrimaryKey );
								}
								else
								{
									tools.add_person_to_event( docRequest.TopElem.person_id, docRequest.TopElem.object_id, null, docEvent, null, null, docRequest.DocID );
								}

								UpdateUiDoc( docEvent );
								break;

							case 'course':
							{
								if ( docRequest.TopElem.is_group )
								{
									for ( _person in docRequest.TopElem.persons )
									{
										tools.activate_course_to_person( _person.PrimaryKey, docRequest.TopElem.object_id );
									}
								}
								else
								{
									tools.activate_course_to_person( {
										iPersonID: docRequest.TopElem.person_id.Value,
										iCourseID: docRequest.TopElem.object_id.Value,
										bSelfEnrolled: true
									} );
								}
								break;
							}

							case 'assessment':
							{
								if ( docRequest.TopElem.is_group )
								{
									for ( _person in docRequest.TopElem.persons )
									{
										tools.activate_test_to_person( _person.PrimaryKey, docRequest.TopElem.object_id );
									}
								}
								else
								{
									tools.activate_test_to_person( {
										iPersonID: docRequest.TopElem.person_id.Value,
										iAssessmentID: docRequest.TopElem.object_id.Value,
										bSelfEnrolled: true
									} );
								}
								break;
							}

							case 'library_material':
								if ( docRequest.TopElem.is_group )
								{
									for ( _person in docRequest.TopElem.persons )
									{
										tools.recommend_library_material_to_person(_person.PrimaryKey,docRequest.TopElem.object_id,null,null,false)
										tools.create_notification( '65', _person.PrimaryKey, '', docRequest.DocID, null, docRequest.TopElem );
									}
								}
								else
								{
									tools.recommend_library_material_to_person(docRequest.TopElem.person_id,docRequest.TopElem.object_id,null,null,false)
									tools.create_notification( '65', docRequest.TopElem.person_id, '', docRequest.DocID, null, docRequest.TopElem );
								}
								break;

							case 'object_version':
								tools.update_object_versions( null, docRequest.TopElem.object_id, null, docRequest.TopElem.person_id, null, docRequest.TopElem.comment )
								break;
						}

						if (teRequestType.code == 'request_personnel_reserve')
						{
							if ( docRequest.TopElem.is_group )
							{
								for ( _person in docRequest.TopElem.persons )
								{
									tools.include_person_to_personnel_reserve_position(_person.PrimaryKey, docRequest.TopElem);
								}
							}
							else
							{
								tools.include_person_to_personnel_reserve_position(docRequest.TopElem.person_id, docRequest.TopElem);
							}
						}
					}

					eval( Trim( teRequestType.processing_code ) );

					docRequest.TopElem.status_id = 'close';
					docRequest.TopElem.close_date = Date();

					ms_tools.raise_system_event_env( 'common_request_processing', {
						'iRequestID': iRequestID,
						'docRequest': docRequest,
						'teRequestType': teRequestType
					} );
					break;

				case 'interval_schedule':
					switch( docRequest.TopElem.workflow_type )
					{
						case 'cancel':
							docRequest.TopElem.status_id = 'cancel';
							break;
						case 'change':
							docRequest.TopElem.AssignElem( docRequest.TopElem.change );
							docRequest.TopElem.change.Clear();
						default:
							docRequest.TopElem.status_id = 'active';
							break;
					}
					break;
				case 'project_participant':
					docRequest.TopElem.status_id = 'active';
					switch( docRequest.TopElem.catalog )
					{
						case 'collaborator':
							var sApproveManagerFullname = '';
							if( ArrayOptFirstElem( docRequest.TopElem.workflow_log_entrys ) != undefined )
							{
								sApproveManagerFullname = ArrayMax( docRequest.TopElem.workflow_log_entrys, 'This.create_date' ).person_fullname;
							}
							alert('sApproveManagerFullname '+sApproveManagerFullname)
							tools.create_notification( 'approve_project_participant', docRequest.TopElem.object_id, sApproveManagerFullname, iRequestID, null, docRequest.TopElem );
							break;
					}
					break;
			}

			return docRequest;
	"/>

	<update_object_versions PROPERTY="1" PARAM="docVersion" PARAM="iVersionID" PARAM="docObject" PARAM="iPersonID" PARAM="tePerson" PARAM="sComment" EXPR="
		try{
			docVersion.TopElem
		}
		catch( ex )
		{
			//docVersion = OpenDoc( UrlFromDocID( Int( iVersionID ), 'trash' ) );
			docVersion = OpenDoc( UrlFromDocID( Int( iVersionID ), DefaultDb ) );
		}


		try{
			tePerson.Name
		}
		catch( ex )
		{
			tePerson = OpenDoc( UrlFromDocID( Int( iPersonID ) ) ).TopElem;
		}

		try{
			sComment
		}
		catch( ex )
		{
			sComment = '';
		}

		fldObjectType = common.exchange_object_types.GetChildByKey( docVersion.TopElem.catalog_name );

		try{
			docObject.TopElem
		}
		catch( ex )
		{
			if( docVersion.TopElem.object_id.HasValue )
				docObject = OpenDoc( UrlFromDocID( docVersion.TopElem.object_id ) );
			else
			{
				docObject = tools.new_doc_by_name( docVersion.TopElem.catalog_name, false );
				docObject.BindToDb( DefaultDb );
				if( docObject.TopElem.ChildExists( 'create_date' ) )
					docObject.TopElem.create_date = Date();
			}
		}
		iId = docObject.DocID;
		docObject.TopElem.AssignElem( OpenDocFromStr( docVersion.TopElem.object_xml, 'form=' + fldObjectType.form_url ).TopElem );
		docObject.TopElem.id = iId;
		docVersion.TopElem.status = 'active';

		switch( docVersion.TopElem.catalog_name )
		{
			case 'wiki_article':
				if( sComment != '' )
				{
					docChange = OpenNewDoc( 'x-local://wtv/wtv_change.xmd' );
					docChange.TopElem.object_id = docObject.DocID;
					tools.common_filling( 'object', docChange.TopElem, docObject.DocID, docObject.TopElem );
					docChange.TopElem.person_id = iPersonID;
					tools.common_filling( 'collaborator', docChange.TopElem, iPersonID, tePerson );
					docChange.TopElem.comment = sComment;
					docChange.TopElem.name = ms_tools.get_const('nkhboap9zg') + ': ' + docChange.TopElem.object_name;
					docChange.BindToDb( DefaultDb );
					docChange.Save();
				}

				for( elem in XQuery( 'for $elem in object_versions where $elem/object_id = ' + docObject.DocID + ' and $elem/status = \'active\' and $elem/id != ' + docVersion.DocID + ' return $elem' ) )
					try
					{
						//docOldVersion = OpenDoc( UrlFromDocID( elem.id, 'trash' ) );
						docOldVersion = OpenDoc( UrlFromDocID( elem.id, DefaultDb ) );
						docOldVersion.TopElem.status = 'archive';
						docOldVersion.Save();
					}
					catch( ex ){}

				if( docObject.TopElem.critical_change )
					docObject.TopElem.critical_publicate_date = Date();
				docObject.TopElem.publicate_date = Date();

				if( docObject.NeverSaved )
				{
					if( docObject.TopElem.wiki_base_id.HasValue )
					{
						try
						{
							teWikiBase = OpenDoc( UrlFromDocID( docObject.TopElem.wiki_base_id ) ).TopElem;
							if( teWikiBase.copy_access_in_new_article )
							{
								AccessGroups = docObject.TopElem.access.access_groups.Clone();
								docObject.TopElem.access.AssignElem( teWikiBase.access );
								docObject.TopElem.access.access_groups.AssignElem( AccessGroups );
							}
						}
						catch( ex )
						{
							alert(ex)
						}
					}
				}

				_child = docObject.TopElem.authors.ObtainChildByKey( iPersonID );
				tools.common_filling( 'collaborator', _child, iPersonID, tePerson );

				try
				{
					docObject = tools.update_adding_objects( docObject );
				}
				catch( ex )
				{ alert( 'tools.update_adding_objects ' + ex ) }

				try
				{
					function get_type_id( sType )
					{
						switch( sType )
						{
							case 'choice':
							case 'combo':
								return 'multiple_choice';
							case 'select':
								return 'multiple_response';
							case 'string':
								return 'gap_fill';
							case 'number':
								return 'numerical_fill_in_blank';
						}
						return 'multiple_choice';
					}
					if( docObject.TopElem.acquaint_type_id == 'items' )
						for( _question in docObject.TopElem.questions )
						{
							if( !_question.is_custom )
								continue;
							if( _question.item_id.HasValue )
							{
								docItem = OpenDoc( UrlFromDocID( _question.item_id ) );
							}
							else
							{
								docItem = OpenNewDoc( 'x-local://qti/qti_item.xmd' );
								docItem.BindToDb( DefaultDb );
							}
							teItem = docItem.TopElem;
							teItem.title = _question.title;
							teItem.question_text = _question.title;
							teItem.type_id = get_type_id( _question.type_id )
							teItem.answers.Clear();
							switch( teItem.type_id )
							{
								case 'multiple_choice':
								case 'multiple_response':
									for( _answer in _question.entries )
									{
										_ch = teItem.answers.AddChild();
										_ch.id = _answer.id;
										_ch.text = _answer.value;
										_ch.is_correct_answer = _answer.is_correct;
									}
									break;
								case 'gap_fill':
								case 'numerical_fill_in_blank':
									_ch = teItem.answers.AddChild();
									_ch.conditions.AssignElem( _question.conditions );
									break;
							}
							docItem.Save();
							_question.is_custom = false;
							_question.item_id = docItem.DocID;
						}
					else
						docObject.TopElem.questions.Clear();
				}
				catch( ex )
				{
					alert( 'update_object_versions update questions ' + ex );
				}

				if( docObject.TopElem.status_id == 'active' )
				{
					for( _subscribe in XQuery( 'for $elem in subscriptions where $elem/document_id = ' + docObject.TopElem.wiki_base_id + ' and ( $elem/date_to = null() or $elem/date_to > ' + XQueryLiteral( Date() ) + ' ) return $elem' ) )
						try
						{
							if( _subscribe.person_id.HasValue )
							{
								tools.create_notification( ( docObject.NeverSaved ? 'create_new_wiki_article' : 'update_wiki_article' ), _subscribe.person_id, '', docObject.DocID, null, docObject.TopElem );
							}
						}
						catch( ex ){}
				}

				ms_tools.raise_system_event_env( 'common_create_update_wiki_article', {
					'iArticleID': docObject.DocID,
					'docArticle': docObject,
					'docVersion': docVersion,
					'sComment': sComment
				} );
				break;
		}

		docVersion.Save();

		docObject.Save();

	"/>

	<update_adding_objects PROPERTY="1" PARAM="docObject" PARAM="iObjectID" EXPR="

		try{
			docObject
		}
		catch( ex )
		{
			docObject = OpenDoc( UrlFromDocID( Int( iObjectID ) ) );
		}
		if( docObject.TopElem.adding_objects.need_adding )
		{
			arrCommunications = new Array();
			xarrArticleCommunications = ArraySelectAll( XQuery( 'for $elem in wiki_article_communications where $elem/child_wiki_article_id = ' + docObject.DocID + ' return $elem' ) );

			for( catCommunication in docObject.TopElem.adding_objects.wiki_article_communications )
			{
				if( !catCommunication.base_wiki_article_id.HasValue && !catCommunication.child_wiki_article_id.HasValue )
					continue;

				catArticleCommunication = undefined;
				if( catCommunication.wiki_article_communication_id.HasValue )
					catArticleCommunication = ArrayOptFind( xarrArticleCommunications, 'This.id == catCommunication.wiki_article_communication_id' );

				if( catArticleCommunication != undefined )
					docCommunication = OpenDoc( UrlFromDocID( catArticleCommunication.id ) );
				else
				{
					docCommunication = tools.new_doc_by_name( 'wiki_article_communication', false );
					docCommunication.BindToDb( DefaultDb );
				}

				if( catCommunication.base_wiki_article_id.HasValue )
					docCommunication.TopElem.base_wiki_article_id = catCommunication.base_wiki_article_id;
				else
					docCommunication.TopElem.base_wiki_article_id = docObject.DocID;
				if( catCommunication.child_wiki_article_id.HasValue )
					docCommunication.TopElem.child_wiki_article_id = catCommunication.child_wiki_article_id;
				else
					docCommunication.TopElem.child_wiki_article_id = docObject.DocID;

				docCommunication.TopElem.wiki_article_comm_type_id = catCommunication.wiki_article_comm_type_id;
				docCommunication.TopElem.position = catCommunication.position;
				docCommunication.Save();
				arrCommunications.push( { 'id': docCommunication.DocID } );
			}
			for( catDel in ArraySelect( xarrArticleCommunications, 'ArrayOptFindByKey( arrCommunications, This.id, \'id\' ) == undefined' ) )
				try
				{
					DeleteDoc( UrlFromDocID( catDel.id ) );
				}
				catch( ex ){}
		}

		docObject.TopElem.adding_objects.Clear();
		return docObject;
	"/>

	<request_rejecting PROPERTY="1" PARAM="iRequestID" PARAM="docRequest" PARAM="iPersonID" PARAM="dSaveParam" EXPR="
			try
			{
				if ( docRequest == null || docRequest == '' )
					throw 'no_source';
			}
			catch ( err )
			{
				docRequest = OpenDoc( UrlFromDocID( iRequestID ) );
			}
			try
			{
				if ( iPersonID == undefined || iPersonID == '' )
					throw 'no_source';
			}
			catch ( err )
			{
				iPersonID = null;
			}
			try
			{
				dSaveParam = dSaveParam != false;
			}
			catch ( err )
			{
				dSaveParam = true;
			}
			switch( docRequest.TopElem.Name )
			{
				case 'request':
					teRequestType = OpenDoc( UrlFromDocID( docRequest.TopElem.request_type_id ) ).TopElem;

					docRequest.TopElem.status_id = 'ignore';
					docRequest.TopElem.close_date = Date();
					if ( dSaveParam )
						docRequest.Save();

					eval( Trim( teRequestType.reject_processing_code ) );

					if ( teRequestType.use_standart_processing &amp;&amp; docRequest.TopElem.object_id.HasValue )
					{
						switch ( docRequest.TopElem.type )
						{
							case 'course':
								tools.create_notification( '3', iRequestID, '', null, docRequest.TopElem );
								break;

							case 'library_material':
								if ( docRequest.TopElem.is_group )
								{
									for ( _person in docRequest.TopElem.persons )
									{
										tools.create_notification( '66', _person.PrimaryKey, '', docRequest.DocID, null, docRequest.TopElem );
									}
								}
								else
								{
									tools.create_notification( '66', docRequest.TopElem.person_id, '', docRequest.DocID, null, docRequest.TopElem );
								}
								break;

							case 'event':
								tools.create_notification( '22', iRequestID, '', null, docRequest.TopElem );
								break;
							case 'object_version':
								try
								{
									//docObjectVersion = OpenDoc( UrlFromDocID( docRequest.TopElem.object_id, 'trash' ) );
									docObjectVersion = OpenDoc( UrlFromDocID( docRequest.TopElem.object_id, DefaultDb ) );
									docObjectVersion.TopElem.status = 'cancel';
									docObjectVersion.Save();
								}
								catch( ex )
								{}
								break;
						}
					}

					if ( iPersonID == docRequest.TopElem.person_id )
						tools.create_notification( '26', iRequestID, '', null, docRequest.TopElem );

					ms_tools.raise_system_event_env( 'common_request_rejecting', {
						'iRequestID': iRequestID,
						'docRequest': docRequest,
						'teRequestType': teRequestType,
						'iPersonID': iPersonID
					} );
					break;
				case 'interval_schedule':
					docRequest.TopElem.status_id = ( docRequest.TopElem.workflow_type == 'change' || docRequest.TopElem.workflow_type == 'cancel' ? 'active' : 'cancel' );
					docRequest.TopElem.workflow_type.Clear();
					if ( dSaveParam )
						docRequest.Save();
					break;
				case 'project_participant':
					docRequest.TopElem.status_id = 'cancel';
					if ( dSaveParam )
						docRequest.Save();
					switch( docRequest.TopElem.catalog )
					{
						case 'collaborator':
							var sRejectManagerFullname = '';
							if( ArrayOptFirstElem( docRequest.TopElem.workflow_log_entrys ) != undefined )
							{
								sRejectManagerFullname = ArrayMax( docRequest.TopElem.workflow_log_entrys, 'This.create_date' ).person_fullname;
							}
							tools.create_notification( 'reject_project_participant', docRequest.TopElem.object_id, sRejectManagerFullname, iRequestID, null, docRequest.TopElem );
							break;
					}
					break;
			}

			return docRequest;
	"/>


	<add_person_to_event PROPERTY="1" PARAM="iPersonIDParam" PARAM="iEventIDParam" PARAM="tePersonParam" PARAM="docEventParam" PARAM="iEducationPlanIDParam" PARAM="iRequestPersonIDParam" PARAM="iRequestIDParam" PARAM="bGuestLogin" EXPR="
			try
			{
				if ( tePersonParam == undefined || tePersonParam == '' )
					throw 'no_doc';
			}
			catch ( err )
			{
				tePersonParam = OpenDoc( UrlFromDocID( iPersonIDParam ) ).TopElem;
			}
			try
			{
				if ( docEventParam == null || docEventParam == '' )
					throw 'no_doc';
			}
			catch ( err )
			{
				docEventParam = OpenDoc( UrlFromDocID( iEventIDParam ) );
			}
			try
			{
				if ( iEducationPlanIDParam == undefined || iEducationPlanIDParam == '' )
					throw 'no_doc';
			}
			catch ( err )
			{
				iEducationPlanIDParam = null;
			}
			try
			{
				if ( iRequestPersonIDParam == undefined || iRequestPersonIDParam == '' )
					throw 'no_doc';
			}
			catch ( err )
			{
				iRequestPersonIDParam = null;
			}
			try
			{
				if ( iRequestIDParam == undefined || iRequestIDParam == '' )
					throw 'no_doc';
			}
			catch ( err )
			{
				iRequestIDParam = null;
			}
			try
			{
				if ( bGuestLogin == undefined || bGuestLogin == '' )
					throw 'no_doc';
			}
			catch ( err )
			{
				bGuestLogin = false;
			}
			oRes = tools.call_code_library_method( 'libEducation', 'AddPersonToEventXmd', [ {
				'iEventID': iEventIDParam,
				'docEvent': docEventParam,
				'iPersonID': iPersonIDParam,
				'tePerson': tePersonParam,
				'iEducationPlanID': iEducationPlanIDParam,
				'iRequestPersonID': iRequestPersonIDParam,
				'iRequestID': iRequestIDParam,
				'bDoObtain': false,
				'bDoFilling': true,
				'bDoSave': true,
				'bCreateEventResult': true,
				'bSendNotification': true,
				'bGuestLogin': bGuestLogin
			} ] );

			if ( ! oRes.result )
				return null;

			return docEventParam;
	"/>

	<del_person_from_event PROPERTY="1" PARAM="_person_id" PARAM="_event_id" PARAM="_doc_event" PARAM="_flag_save" EXPR="

			try
			{
				if ( _doc_event == null || _doc_event == '' )
					throw 'no_doc';

				docEvent = _doc_event;
			}
			catch ( dd )
			{
				docEvent = OpenDoc( UrlFromDocID( _event_id ) );
			}
			try
			{
				_flag_save;
			}
			catch ( dd )
			{
				_flag_save = true;
			}
			oInputParam = {
					'iPersonID': _person_id,
					'bDoSave': _flag_save,
					'bSendNotification': true
				};
			oInputParam.SetProperty( 'iEventID', docEvent.DocID );
			oInputParam.SetProperty( 'docEvent', docEvent );
			tools.call_code_library_method( 'libEducation', 'DeletePersonFromEventXmd', [ oInputParam ] );
			return docEvent;
	"/>



	<init_encrypt_lib PROPERTY="1" EXPR="
		if( LdsIsServer )
		{
			try
			{
			var vencrypt_lib = new DllWrapper( FilePath( AppDirectoryPath(), 'wft_ondemand_2010' + ( Platform.IsX64 ? '_64' : '' ) + '.dll' ) );
			vencrypt_lib.RegisterProc( 'Encrypt_Init', 'integer; cdecl' );
			vencrypt_lib.RegisterProc( 'Encrypt_Finish', 'integer; cdecl' );

			vencrypt_lib.RegisterProc( 'Encrypt_GenerateKeyPair', 'integer; cdecl','string','string','string','string','string');
			vencrypt_lib.RegisterProc( 'Encrypt_WriteContentItem', 'integer; cdecl','string', 'string', 'string','object', 'object');
			vencrypt_lib.RegisterProc( 'Encrypt_ProcessContent', 'integer; cdecl','string','string','string','string','string','string','string','string; out','integer');
//										0		,1,	2,	 3,	   4	   ,5,	    	6,   7,		8		,9

			//vencrypt_lib.RegisterProc( 'Encrypt_GetXmlSharedDecryptionKeyContent', 'string; cdecl');
			//vencrypt_lib.RegisterProc( 'Encrypt_GetXmlSharedEncryptionKeyContent', 'string; cdecl');

			vencrypt_lib.RegisterProc( 'Encrypt_GetXmlSharedDecryptionKeyContent', 'integer; cdecl','string; out','integer');
			vencrypt_lib.RegisterProc( 'Encrypt_GetXmlSharedEncryptionKeyContent', 'integer; cdecl','string; out','integer');


			vencrypt_lib.RegisterProc( 'Encrypt_CheckContent', 'integer; cdecl','string','string','integer');

			vencrypt_lib.RegisterProc( 'Encrypt_GetLastErrorMessage', 'integer; cdecl','string; out','integer');
			}
			catch(e)
			{
				alert( e );
			}

			tools.encrypt_lib = vencrypt_lib;
		}
	"/>

	<encrypt_lib TYPE="variant"/>

        <encrypt_lib_obj PROPERTY="1" EXPR="
		return tools.encrypt_lib.Object;
	"/>

	<create_license PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="iLicenseId" EXPR="
		sServerTempUrl = ObtainTempFile();
		sOutPath = UrlToFilePath(sServerTempUrl);
		ObtainDirectory( sOutPath );

		//ContentId='WT001';
		//iUsersNum=50;
		//ok=encrypt_lib.Encrypt_Init();
		//BaseId='WEBSOFT_FOR_WEBSOFT';
		//BaseSeq='office.websoft.ru';
		lifetime=600; //seconds
		docLicense = OpenDoc(UrlFromDocID(iLicenseId));
		teLicense = docLicense.TopElem;

		BaseId=iLicenseId;
		BaseSeq=StrLowerCase((teLicense.license_type == 'domain') ? teLicense.domain_name : teLicense.computer_name);
		mtype = (teLicense.license_type == 'domain') ? '0' : '1';
		KeyType='domain';
		teLicense.license_info = ms_tools.get_const('tiplicenzii') + ': ' +  ((teLicense.license_type == 'domain') ? ms_tools.get_const('licenziyanadome') : ms_tools.get_const('licenziyanakomp')) + ', ' + ms_tools.get_const('kolichestvopolz') + ': ' + teLicense.users_num;
		teLicense.license_info += (teLicense.license_type == 'domain') ? (', ' + ms_tools.get_const('domen') + ':' + teLicense.domain_name) : (', ' + ms_tools.get_const('imyakompyutera') + ': ' + teLicense.computer_name);
		var sStartDate = '';
		if(teLicense.start_date.HasValue)
		{
			sStartDate = String(Year(teLicense.start_date)) + String(Month(teLicense.start_date) &gt; 9 ? Month(teLicense.start_date) : (('0') + Month(teLicense.start_date))) + String(Day(teLicense.start_date) &gt; 9 ? Day(teLicense.start_date) : (('0') + Day(teLicense.start_date)));
			teLicense.license_info += ', ' + ms_tools.get_const('c_start_date') + ': ' + StrDate(teLicense.start_date, false, false);
		}
		else
		{
			teLicense.license_info += ', ' + ms_tools.get_const('c_start_date') + ': ' + ms_tools.get_const('neopredelena');
		}
		var sEndDate = '';
		if(teLicense.finish_date.HasValue)
		{
			sEndDate = String(Year(teLicense.finish_date)) + String(Month(teLicense.finish_date) &gt; 9 ? Month(teLicense.finish_date) : (('0') + Month(teLicense.finish_date))) + String(Day(teLicense.finish_date) &gt; 9 ? Day(teLicense.finish_date) : (('0') + Day(teLicense.finish_date)));
			teLicense.license_info += ', ' + ms_tools.get_const('3bywib72ya') + ': ' + StrDate(teLicense.finish_date, false, false);
		}
		else
		{
			sEndDate = '29990101';
			teLicense.license_info += ', ' + ms_tools.get_const('3bywib72ya') + ': ' + ms_tools.get_const('neogranichenno');
		}
		extraData='start_date:' + sStartDate +',end_date:' + sEndDate + ',users:' + teLicense.users_num + ',session_lifetime:100,mtype:' + mtype;
		//extraData='start_date:20110201,end_date:20110401,users:50,session_lifetime:1800,mtype:0';


			tools.encrypt_lib_obj.Encrypt_Init();
			ok=tools.encrypt_lib_obj.Encrypt_GenerateKeyPair(BaseId,BaseSeq,KeyType,extraData,'');


			//teLicense.decryption_key = tools.encrypt_lib_obj.Encrypt_GetXmlSharedDecryptionKeyContent();
			//teLicense.encryption_key = tools.encrypt_lib_obj.Encrypt_GetXmlSharedEncryptionKeyContent();


			OutBuf = new String();
			OutBuf.Allocate(4096);
			tools.encrypt_lib_obj.Encrypt_GetXmlSharedDecryptionKeyContent(OutBuf,4096);
			teLicense.decryption_key = OutBuf;

			OutBuf2 = new String();
			OutBuf2.Allocate(4096);

			tools.encrypt_lib_obj.Encrypt_GetXmlSharedEncryptionKeyContent(OutBuf2,4096);
			teLicense.encryption_key = OutBuf2;



		sMaterialPath = UrlAppendPath( FilePathToUrl( AppDirectoryPath() ), '/wt/web/library/' );
		sWebPath = UrlAppendPath( FilePathToUrl( AppDirectoryPath() ), '/wt/web' );

		exclude_compression_exts='*.swf,*.zip,*.jpg,*.gif,*.png,*.mpg';
		encrypted_on_unpack_exts='.swf,.html,*.xml,*.txt';


		for(fldMaterial in teLicense.library_materials)
		{
			try
			{
				teMaterial = OpenDoc(UrlFromDocID(fldMaterial.PrimaryKey)).TopElem;
				sEncryptCode = fldMaterial.PrimaryKey;
				sBaseFolder = teMaterial.unfolded_document.base_url;
				OutBuf = new String();
				OutBuf.Allocate(2048);
				ok=tools.encrypt_lib_obj.Encrypt_ProcessContent(teLicense.encryption_key,sEncryptCode,sOutPath,sMaterialPath,sBaseFolder,exclude_compression_exts,encrypted_on_unpack_exts,OutBuf,2048);

				if (ok==0)
				{
					OutBuf = new String();
					OutBuf.Allocate(2048);
					tools.encrypt_lib_obj.Encrypt_GetLastErrorMessage(OutBuf,2048);
					alert('library license error (Encrypt_ProcessContent): ' + OutBuf);
				}
				else
				{
				 path=OutBuf;
				}

			}
			catch(x)
			{
				alert(ms_tools.get_const('c_error') + ': ' + x);
				return 'error';
			}
		}

		for(fldCourse in teLicense.courses)
		{
			try
			{
				teCourse = OpenDoc(UrlFromDocID(fldCourse.PrimaryKey)).TopElem;
				sEncryptCode = fldCourse.PrimaryKey;
				iSlashIndex = String(String(teCourse.base_url).substr(0,String(teCourse.base_url).length - 1)).lastIndexOf('/');
				sBaseFolder = String(teCourse.base_url).substr(iSlashIndex + 1,String(teCourse.base_url).length - (iSlashIndex + 2));
				sCoursePath = sWebPath + StrReplace(String(teCourse.base_url).substr(0, String(teCourse.base_url).lastIndexOf(sBaseFolder)), '\/', '\\');

				OutBuf = new String();
				OutBuf.Allocate(2048);
				ok=tools.encrypt_lib_obj.Encrypt_ProcessContent(teLicense.encryption_key,sEncryptCode,sOutPath,sCoursePath,sBaseFolder,exclude_compression_exts,encrypted_on_unpack_exts,OutBuf,2048);

				if (ok==0)
				{
					OutBuf = new String();
					OutBuf.Allocate(2048);
					tools.encrypt_lib_obj.Encrypt_GetLastErrorMessage(OutBuf,2048);
					alert('library license error (Encrypt_ProcessContent): ' + OutBuf);
				}
				else
				{
				 path=OutBuf;
				}

			}
			catch(x)
			{
				alert(ms_tools.get_const('c_error') + ': ' + x);
				return 'error';
			}
		}
		ok=tools.encrypt_lib_obj.Encrypt_Finish();

		docLicense.Save();
		return sServerTempUrl;
	"/>
	<create_license_complete PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sTempDirectoryUrl" EXPR="
		try
		{
			DeleteDirectory(sTempDirectoryUrl);
		}
		catch(x)
		{
			alert(x);
		}
	"/>
	<recovery_empty_lng_const PROPERTY="1" PARAM="_lng_id" PARAM="_source" EXPR="
			try
			{
				if ( _source == null || _source == '' )
					throw 'no_doc';
			}
			catch ( dd )
			{
				_source = lngs.GetChildByKey( _lng_id );
			}
			try
			{
				fldDefaultLng = OpenDoc( 'x-local://lngs/' + _lng_id + '/const.xml', 'form=x-local://wtv/wtv_form_ui_lng.xmd;ignore-top-elem-name=1' ).TopElem;
			}
			catch ( err )
			{
				return 0;
			}

			_source.items.Sort( 'id', '+' );

			_counter = 0;
			iSourceCounter = 0;
			iDefaultCounter = 0;
			iSourceCount = _source.items.ChildNum;
			iDefaultCount = fldDefaultLng.items.ChildNum;

			fldSourceItem = _source.items[ iSourceCounter ];
			while ( iDefaultCounter &lt; iDefaultCount )
			{
				fldDefaultItem = fldDefaultLng.items[ iDefaultCounter ];
				if ( fldDefaultItem.id &lt; fldSourceItem.id || iSourceCounter &gt;= iSourceCount )
				{
					_source.items.AddChild().AssignElem( fldDefaultItem );
					_counter++;
				}
				else if ( fldSourceItem.id == fldDefaultItem.id )
				{
					try
					{
						if ( ! fldSourceItem.val.HasValue )// &amp;&amp; fldDefaultItem.val.HasValue )
						{
							fldSourceItem.val = fldDefaultItem.val;
							_counter++;
						}
					}
					catch ( ee )
					{
						alert('fldSourceItem.Xml = '+fldSourceItem.Xml)
						alert('fldDefaultItem.Xml = '+fldDefaultItem.Xml)
						throw ee;
					}

					iSourceCounter++;
					if ( iSourceCounter &lt; iSourceCount )
						fldSourceItem = _source.items[ iSourceCounter ];
				}
				else
				{
					bDecr = false;
					while ( iSourceCounter &lt; ( iSourceCount - 1 ) &amp;&amp; fldDefaultItem.id &gt; fldSourceItem.id )
					{
						iSourceCounter++;
						fldSourceItem = _source.items[ iSourceCounter ];
						bDecr = true;
					}
					if ( bDecr )
						iDefaultCounter--;
				}
				iDefaultCounter++;
			}

			if ( ! _source.short_id.HasValue )
				_source.short_id = fldDefaultLng.short_id.Value;

			_source.common_url = fldDefaultLng.common_url;

			if ( _counter != 0 )
				_source.items.Sort( 'id', '+' );

			return _counter;
	"/>



	<start_agent PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_agent_id" PARAM="_element_id" PARAM="_elems_id_str" PARAM="dDateParam" EXPR="
			try
			{
				if ( _elems_id_str == null || _elems_id_str == undefined )
					throw 'no_data';
			}
			catch( err )
			{
				_elems_id_str = String();
			}
			try
			{
				Int( _element_id );
			}
			catch( _neelement_ )
			{
				_element_id = undefined;
			}
			try
			{
				dDateParam = Date( dDateParam );
			}
			catch( _neelement_ )
			{
				dDateParam = RValue( Date() );
			}

			if ( (tools.sys_db_capability & tools.UNI_CAP_WEB_ROLE) != 0 )
			{
				sCommandXml = tools.get_agent_command_queue_xml( _agent_id, _element_id, _elems_id_str, dDateParam );
				tools.spxml_unibridge.Object.provider.PutMessageInQueue( 'command-queue', sCommandXml );
				return false;
			}

			docAgent = OpenDoc( UrlFromDocID( _agent_id ) );
			teAgent = docAgent.TopElem;

			if ( teAgent.run_agent( _element_id, _elems_id_str, dDateParam ) )
				docAgent.Save();
			return true;
	"/>



	<update_learnings_course_parts_structure PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="learningArray" PARAM="_course_doc_str"  EXPR="
		if ( DataType( learningArray ) == 'string' )
		{
			learningArray = ParseJson( learningArray );
		}

		var oRet = tools.get_code_library_result_object();
		EnableLog( 'update-learning-parts', true );
		LogEvent( 'update-learning-parts', 'START process.' );

		try
		{
			var courseTE = OpenDocFromStr( UrlDecode( _course_doc_str ), 'form=x-local://wtv/wtv_course.xmd' ).TopElem;
			LogEvent( 'update-learning-parts', ( 'Course ID: ' + courseTE.id + '; name: ' + courseTE.name + '.' ) );

			CheckCurThread();

			progress = new TaskProgress;
			progress.TaskName = StrReplace( ms_tools.get_const('2vkn7uhaoh') + '...', '{PARAM1}', courseTE.name );

			var iCount = learningArray.length;
			LogEvent( 'update-learning-parts', ( 'Count of learnings: ' + iCount + '.' ) );
			progress.ItemCount = iCount;
			progress.CurrentItemIndex = 0;

			var _counter = 1;
			var iErrorCount = 0;
			for ( _learning in learningArray )
			{
				progress.CurrentItemName =  _counter + ' of ' + iCount + ' : ' + _learning.name ;
				progress.CurrentItemIndex++;
				LogEvent( 'update-learning-parts', ( 'Processing learning ID: ' + _learning.id + '...' ) );
				try
				{
					if ( tools.update_course_parts_structure( _learning.id, courseTE ) )
					{
						_counter++;
						LogEvent( 'update-learning-parts', ( 'Processed learning ID: ' + _learning.id + '.' ) );
					}
					else
					{
						LogEvent( 'update-learning-parts', ( 'Skip learning ID: ' + _learning.id + '.' ) );
					}
				}
				catch ( err2 )
				{
					iErrorCount++;
				}
			}
			oRet.count = _counter-1;
		}
		catch ( err )
		{
			oRet.error = 1;
			oRet.errorText = ms_tools.get_const('2vkn7uhaoh') + ' : ' + err;
			LogEvent( 'update-learning-parts', ( 'ERROR learning ID: ' + _learning.id + '; Error: ' + err + '.' ) );
		}

		LogEvent( 'update-learning-parts', ( 'FINISH process. COUNT sum: ' + iCount + ', processed: ' + ( _counter-1 ) + ', error: ' + iErrorCount + '.' ) );
		return oRet;
	"/>

	<update_course_parts_structure PROPERTY="1" PARAM="_learning_id" PARAM="_course_doc" PARAM="_doc_learning" EXPR="
			try
			{
				if ( _doc_learning == null || _doc_learning == '' )
					throw 'no_doc';

				docLearning = _doc_learning;
			}
			catch ( dd )
			{
				docLearning = tools.open_doc( _learning_id );
				if(docLearning == undefined)
					return false;
			}
			try
			{
				if ( _course_doc == null || _course_doc == '' )
					throw 'no_doc';

				courseDoc = _course_doc;
			}
			catch ( dd )
			{
				try
				{
					courseDoc =  OpenDoc( UrlFromDocID( docLearning.TopElem.course_id ) ).TopElem;
				}
				catch ( err )
				{
					return false;
				}
			}

			docLearning.TopElem.score_sum_eval = courseDoc.score_sum_eval;
			docLearning.TopElem.parts.DeleteChilds( 'courseDoc.parts.GetOptChildByKey(PrimaryKey)==undefined' );

			for ( _part in courseDoc.parts )
			{
				_learning_part = docLearning.TopElem.parts.ObtainChildByKey( _part.PrimaryKey );
				_learning_part.AssignElem( _part );
				if ( _learning_part.assessment_id.HasValue )
				{
					try
					{
						teAssessment = OpenDoc( UrlFromDocID( _learning_part.assessment_id ) ).TopElem;
						_learning_part.assessment_name = teAssessment.name;
						_learning_part.assessment_code = teAssessment.code;
					}
					catch ( err )
					{
					}
				}
			}
			for ( _part in courseDoc.parts )
				if ( _part.ChildIndex &lt; docLearning.TopElem.parts.ChildNum )
					docLearning.TopElem.parts.ObtainChildByKey( _part.PrimaryKey ).SetChildIndex( _part.ChildIndex );

			if ( docLearning.TopElem.PropertyExists( 'calc_score' ) )
			{
				docLearning.TopElem.calc_score();
			}

			docLearning.Save();
			return true;
	"/>


	<get_direct_sub_person_ids PROPERTY="1" PARAM="iUserId" EXPR="
		arrCollaborators = new Array();
		arrSubdivisionIds = ArrayExtract( XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserId + ' and $elem/catalog = \'position\' return $elem/Fields(\'parent_id\')' ), 'parent_id' );
		arrSubdivisionIds = ArrayUnion( arrSubdivisionIds, ArrayExtract(XQuery('for $elem in func_managers where $elem/person_id = ' + iUserId + ' and $elem/catalog = \'subdivision\' return $elem/Fields(\'object_id\')'),'object_id'));
		if(ArrayOptFirstElem( arrSubdivisionIds ) != undefined)
			arrCollaborators = ArrayExtract( XQuery('for $elem in positions where MatchSome( $elem/parent_object_id, (' + ArrayMerge( arrSubdivisionIds, 'This', ',' ) + ') ) and $elem/basic_collaborator_id != ' + iUserId + ' return $elem/Fields(\'basic_collaborator_id\')' ), 'basic_collaborator_id' );
		arrOrgIds = ArrayExtract( XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserId + ' and $elem/catalog = \'org\' return $elem/Fields( \'object_id\' )' ), 'object_id' );
		if(ArrayOptFirstElem(arrOrgIds) != undefined)
			arrCollaborators = ArrayUnion(ArrayExtract(XQuery('for $elem in positions where MatchSome( $elem/org_id, (' + ArrayMerge(arrOrgIds,'This',',') + ')) and $elem/parent_object_id = null() and $elem/basic_collaborator_id != ' + iUserId + ' return $elem/Fields(\'basic_collaborator_id\')'),'basic_collaborator_id' ), arrCollaborators );
		arrCollaborators = ArrayUnion(ArrayExtract(XQuery('for $elem in func_managers where $elem/person_id = ' + iUserId + ' and $elem/catalog = \'collaborator\' return $elem/Fields(\'object_id\')'),'object_id'), arrCollaborators );
		arrCollaborators = ArraySelect( arrCollaborators, 'This.HasValue' );
		//arrCollaborators = ArrayExtract(XQuery('for $elem_qc in collaborators where MatchSome( $elem_qc/id, (' + ArrayMerge(arrCollaborators,'This',',') + '))  return $elem_qc/Fields(\'id\')'), 'id');
		return arrCollaborators;
	"/>

	<get_sub_person_ids_by_subdivision_id PROPERTY="1" PARAM="_subdivision_id" PARAM="sConditionsParam" EXPR="
			try
			{
				if ( sConditionsParam == null || sConditionsParam == '' )
					throw 'no_data';

				sConditionsParam = ' and ' + sConditionsParam;
			}
			catch ( err )
			{
				sConditionsParam = '';
			}
			return ArrayExtract( tools.xquery( 'for $elem in subs where IsHierChild( $elem/id, ' + _subdivision_id + ' ) and $elem/basic_collaborator_id != null() and $elem/type = \'position\'' + sConditionsParam + ' order by $elem/Hier() return $elem' ), 'basic_collaborator_id' );
	"/>

	<get_sub_persons_by_subdivision_id PROPERTY="1" PARAM="_subdivision_id" PARAM="sConditionsParam" EXPR="
			try
			{
				sConditionsParam;
			}
			catch ( err )
			{
				sConditionsParam = '';
			}
			_ids_array = tools.get_sub_person_ids_by_subdivision_id( _subdivision_id, sConditionsParam );
			return QueryCatalogByKeys( 'collaborators', 'id', _ids_array );
	"/>



	<get_sub_person_ids_by_func_manager_id PROPERTY="1" PARAM="_manager_id" PARAM="_catalog_names" PARAM="vBossType" PARAM="iLimitParam" PARAM="sSearchParam" EXPR="
			try
			{
				switch (vBossType)
				{
					case true: vBossType = ' and $elem/is_native = true()'; break;
					case false: vBossType = ' and $elem/is_native = false()'; break;
					default:
						vBossType = OptInt(vBossType);
						if (vBossType != undefined)
							vBossType = ' and $elem/boss_type_id = ' + vBossType;
						else
							vBossType = '';
				}
			}
			catch(_noType_)
			{
				vBossType = '';
			}
			_manager_array = XQuery( 'for $elem in func_managers where $elem/person_id = ' + _manager_id + vBossType + ' order by $elem/catalog return $elem' );
			_manager_array_num = ArrayCount( _manager_array );

			if ( _manager_array_num == 0 )
				return Array();

			try
			{
				if ( iLimitParam == 0 || iLimitParam == '' )
					throw 'no_data';
			}
			catch( err )
			{
				iLimitParam = null;
			}
			if ( iLimitParam != null &amp;&amp; _manager_array_num &gt; iLimitParam )
				return null;

			try
			{
				if ( sSearchParam == '' )
					throw 'no_data';
			}
			catch( err )
			{
				sSearchParam = null;
			}

			_manager_array = ArrayDirect( _manager_array );

			try
			{
				switch ( _catalog_names )
				{
					case 'not_native':
						_catalog_names = 'collaborator,group,org,subdivision';
						break;

					case 'native':
						_catalog_names = 'position';
						break;

					case '':
					case null:
					case undefined:
						throw '_no_names_';
						break;
				}
			}
			catch ( _no_names_ )
			{
				_catalog_names = 'collaborator,group,org,position,subdivision';
			}

			_result_array = Array();
			_index = 0;
			_cur_elem = _manager_array[ 0 ];
			_sel_array = Array();

			if ( StrContains( _catalog_names, 'collaborator' ) )
			{
				while ( _cur_elem.catalog == 'collaborator' )
				{
					if ( iLimitParam != null &amp;&amp; _index &gt; iLimitParam )
						return null;

					if ( sSearchParam == null || StrContains( _cur_elem.object_name, sSearchParam ) )
						_sel_array.push( _cur_elem );
					_index++;
					if ( _index &gt;= _manager_array_num )
						break;

					_cur_elem = _manager_array[ _index ];
				}
				if ( _index != 0 )
				{
					_result_array = ArrayExtractKeys( _sel_array, 'object_id' );
				}
			}
			else
			{
				while ( _cur_elem.catalog == 'collaborator' )
				{
					_index++;
					if ( _index &gt;= _manager_array_num )
						return _result_array;

					_cur_elem = _manager_array[ _index ];
				}
			}
			if ( _index &gt;= _manager_array_num )
				return _result_array;

			if ( StrContains( _catalog_names, 'group' ) )
			{
				sCond = sSearchParam == null ? '' : ' and contains( $elem/collaborator_fullname, ' + XQueryLiteral( sSearchParam ) + ' )';
				while ( _cur_elem.catalog == 'group' )
				{
					_sel_array = tools.xquery( 'for $elem in group_collaborators where $elem/group_id = ' + _cur_elem.object_id + sCond + ' return $elem/collaborator_id' );
					if ( iLimitParam != null &amp;&amp; ArrayCount( _sel_array ) &gt; iLimitParam )
						return null;
					_sel_array = ArrayExtract( _sel_array, 'collaborator_id' );
					_result_array = ArrayUnion( _result_array, _sel_array );

					_index++;
					if ( _index &gt;= _manager_array_num )
						return _result_array;

					_cur_elem = _manager_array[ _index ];
				}
			}
			else
			{
				while ( _cur_elem.catalog == 'group' )
				{
					_index++;
					if ( _index &gt;= _manager_array_num )
						return _result_array;

					_cur_elem = _manager_array[ _index ];
				}
			}

			sCondCollaborator = sSearchParam == null ? '' : ' and contains( $elem/fullname, ' + XQueryLiteral( sSearchParam ) + ' )';
			_org_counter = 0;
			_org_array = Array();
			if ( StrContains( _catalog_names, 'org' ) )
			{
				while ( _cur_elem.catalog == 'org' )
				{
					_sel_array = tools.xquery( 'for $elem in collaborators where $elem/org_id = ' + _cur_elem.object_id + sCondCollaborator + ' return $elem/id' );
					if ( iLimitParam != null &amp;&amp; ArrayCount( _sel_array ) &gt; iLimitParam )
						return null;
					_sel_array = ArrayExtract( _sel_array, 'id' );
					_result_array = ArrayUnion( _result_array, _sel_array );

					_org_array[ _org_counter ] = _cur_elem;
					_org_counter++;

					_index++;
					if ( _index &gt;= _manager_array_num )
						return _result_array;

					_cur_elem = _manager_array[ _index ];
				}
			}
			else
			{
				while ( _cur_elem.catalog == 'org' )
				{
					_index++;
					if ( _index &gt;= _manager_array_num )
						return _result_array;

					_cur_elem = _manager_array[ _index ];
				}
			}

			sCondSub = sSearchParam == null ? '' : 'contains( $elem/basic_collaborator_fullname, ' + CodeLiteral( sSearchParam ) + ' )';
			if ( StrContains( _catalog_names, 'position' ) )
			{
				while ( _cur_elem.catalog == 'position' )
				{
					if ( ArrayOptFindByKey( _org_array, _cur_elem.org_id, 'object_id' ) == undefined )
					{
						if ( _cur_elem.parent_id.HasValue )
						{
							_sel_array = tools.get_sub_person_ids_by_subdivision_id( _cur_elem.parent_id, sCondSub );
							if ( iLimitParam != null &amp;&amp; ArrayCount( _sel_array ) &gt; iLimitParam )
								return null;
							_result_array = ArrayUnion( _result_array, _sel_array );
						}
						else if ( _cur_elem.org_id.HasValue )
						{
							_sel_array = tools.xquery( 'for $elem in collaborators where $elem/org_id = ' + _cur_elem.org_id + sCondCollaborator + ' return $elem/id' );
							if ( iLimitParam != null &amp;&amp; ArrayCount( _sel_array ) &gt; iLimitParam )
								return null;
							_sel_array = ArrayExtract( _sel_array, 'id' );
							_result_array = ArrayUnion( _result_array, _sel_array );
						}
					}

					_index++;
					if ( _index &gt;= _manager_array_num )
						return _result_array;

					_cur_elem = _manager_array[ _index ];
				}
			}
			else
			{
				while ( _cur_elem.catalog == 'position' )
				{
					_index++;
					if ( _index &gt;= _manager_array_num )
						return _result_array;

					_cur_elem = _manager_array[ _index ];
				}
			}

			if ( StrContains( _catalog_names, 'subdivision' ) )
			{
				while ( _cur_elem.catalog == 'subdivision' )
				{
					if ( ArrayOptFindByKey( _org_array, _cur_elem.org_id, 'object_id' ) == undefined )
					{
						_sel_array = tools.get_sub_person_ids_by_subdivision_id( _cur_elem.object_id, sCondSub );
						if ( iLimitParam != null &amp;&amp; ArrayCount( _sel_array ) &gt; iLimitParam )
							return null;
						_result_array = ArrayUnion( _result_array, _sel_array );
					}

					_index++;
					if ( _index &gt;= _manager_array_num )
						return _result_array;

					_cur_elem = _manager_array[ _index ];
				}
			}

		return ArraySelectDistinct( _result_array, 'This' );
	"/>

	<get_sub_persons_by_func_manager_id PROPERTY="1" PARAM="iManagerIDParam" PARAM="sCatalogNamesParam" PARAM="vBossType" EXPR="
			try
			{
				sCatalogNamesParam;
			}
			catch ( err )
			{
				sCatalogNamesParam = '';
			}
			try
			{
				vBossType;
			}
			catch ( err )
			{
				vBossType = '';
			}

			arrPersons = tools.get_sub_person_ids_by_func_manager_id( iManagerIDParam, sCatalogNamesParam, vBossType );
			return QueryCatalogByKeys( 'collaborators', 'id', arrPersons );
	"/>





	<get_all_subs_by_func_manager_id PROPERTY="1" PARAM="_manager_id" EXPR="
			_manager_array = XQuery( 'for $elem in func_managers where $elem/person_id = ' + _manager_id + ' order by $elem/catalog return $elem' );
			_manager_array = ArraySelect( _manager_array, 'catalog==\'position\'||catalog==\'subdivision\'||catalog==\'org\'' );
			_manager_array_num = ArrayCount( _manager_array );

			if ( _manager_array_num == 0 )
				return Array();

			_result_array = Array();
			_index = 0;
			_cur_elem = _manager_array[ 0 ];

			_org_counter = 0;
			_org_array = Array();
			while ( _cur_elem.catalog == 'org' )
			{
				_sel_array = XQuery( 'for $elem in subdivisions where $elem/org_id = ' + _cur_elem.object_id + ' return $elem' );
				_result_array = ArrayUnion( _result_array, _sel_array );

				_org_array[ _org_counter ] = _cur_elem;
				_org_counter++;

				_index++;
				if ( _index &gt;= _manager_array_num )
					return _result_array;

				_cur_elem = _manager_array[ _index ];
			}

			while ( _cur_elem.catalog == 'position' )
			{
				if ( _cur_elem.parent_id.HasValue &amp;&amp; ArrayOptFindByKey( _org_array, _cur_elem.org_id, 'object_id' ) == undefined )
				{
					_sel_array = ArrayExtract( tools.xquery( 'for $elem in subs where IsHierChild( $elem/id, ' + _cur_elem.parent_id + ' ) and $elem/type = \'subdivision\' order by $elem/Hier() return $elem/id' ), 'id' );
					_sel_array = QueryCatalogByKeys( 'subdivisions', 'id', _sel_array );
					_result_array = ArrayUnion( _result_array, _sel_array );

					_sel_array = XQuery( 'for $elem in subdivisions where $elem/id = ' + _cur_elem.parent_id + ' return $elem' );
					_result_array = ArrayUnion( _result_array, _sel_array );
				}

				_index++;
				if ( _index &gt;= _manager_array_num )
					return _result_array;

				_cur_elem = _manager_array[ _index ];
			}

			while ( _cur_elem.catalog == 'subdivision' )
			{
				if ( ArrayOptFindByKey( _org_array, _cur_elem.org_id, 'object_id' ) == undefined )
				{
					_sel_array = ArrayExtract( tools.xquery( 'for $elem in subs where IsHierChild( $elem/id, ' + _cur_elem.object_id + ' ) and $elem/type = \'subdivision\' order by $elem/Hier() return $elem/id' ), 'id' );
					_sel_array = QueryCatalogByKeys( 'subdivisions', 'id', _sel_array );
					_result_array = ArrayUnion( _result_array, _sel_array );

					_sel_array = XQuery( 'for $elem in subdivisions where $elem/id = ' + _cur_elem.object_id + ' return $elem' );
					_result_array = ArrayUnion( _result_array, _sel_array );
				}

				_index++;
				if ( _index &gt;= _manager_array_num )
					return _result_array;

				_cur_elem = _manager_array[ _index ];
			}

			return _result_array;
	"/>



	<eval_code_page_url PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_url" PARAM="_doc_id" PARAM="_rnd_id" EXPR="
			try
			{
				_doc_id = Int( _doc_id );
				docObject = OpenDoc( UrlFromDocID( _doc_id ) );
				TopElem = docObject.TopElem;
				Ps = TopElem;
			}
			catch ( err )
			{
			}
			try
			{
				if ( _rnd_id == '' || _rnd_id == undefined )
					throw 'no_data';
			}
			catch ( err )
			{
				_rnd_id = null;
			}

			_str = EvalCodePageUrl( _url );
			if ( _rnd_id != null )
			{
				_res_url = 'x-local://trash/temp/' + _rnd_id;
				PutUrlText( _res_url, _str );
				return _res_url;
			}
			return _str;
	"/>





	<cur_user_id TYPE="integer" FOREIGN-ARRAY="collaborators"/>

	<cur_user TYPE="variant"/>

	<cur_user_groups TYPE="variant"/>
	<cur_user_content_access TYPE="variant"/>
	<cur_user_admin_configuration TYPE="variant"/>
	<cur_user_admin_configuration_applications TYPE="variant"/>
	<cur_user_access_claims TYPE="variant"/>
	<cur_user_access_blocks TYPE="variant"/>

	<cur_user_admin_type TYPE="string"/>

	<get_cur_user PROPERTY="1" EXPR="
			try
			{
				if ( LdsIsServer &amp;&amp; CurAuthObject != null &amp;&amp; CurAuthObject != undefined )
				{
					return CurAuthObject;
				}
			}
			catch( _old_xhttp_ )
			{
			}
			if ( tools.cur_user_id.HasValue )
			{
				if ( ! tools.cur_user.HasValue )
					tools.cur_user = OpenDoc( UrlFromDocID( tools.cur_user_id ) ).TopElem;

				return tools.cur_user.Object;
			}
			else
			{
				return tools.update_cur_user();
			}
	"/>

	<update_cur_user PROPERTY="1" EXPR="
			if ( LdsCurUserID == null )
			{
				tools.cur_user_id.Clear();
				tools.cur_user.Clear();
				tools.cur_user_admin_type.Clear();
				return null;
			}
			else
			{
				tools.cur_user_id = LdsCurUserID;
				teUser = OpenDoc( UrlFromDocID( tools.cur_user_id ) ).TopElem;
				tools.cur_user = teUser;

				var arrClaims = tools.get_access_role_claims( true );
				if ( arrClaims != null )
				{
					if ( ArrayOptFind( arrClaims, 'This.type==\'system\'&amp;&amp;This.name==\'admin\'&amp;&amp;This.value==\'1\'' ) != undefined )
					{
						teUser.access.is_arm_admin = true;
						teUser.access.is_content_admin = false;
						teUser.access.is_application_admin = false;
					}
					else if ( ArrayOptFind( arrClaims, 'This.type==\'system\'&amp;&amp;This.name==\'application\'&amp;&amp;This.value==\'1\'' ) != undefined )
					{
					}
				}
				tools.cur_user_admin_type = teUser.access.is_arm_admin ? 'arm' : ( teUser.access.is_content_admin ? 'content' : 'application' );
				if ( tools.cur_user_admin_type == 'content' )
				{
					tools.update_cur_user_content_access();
				}
				return tools.cur_user.Object;
			}
	"/>

	<get_cur_user_groups PROPERTY="1" EXPR="
			try
			{
				if ( LdsIsServer &amp;&amp; CurAuthObject != null &amp;&amp; CurAuthObject != undefined )
				{
					_array = XQuery( 'for $elem in group_collaborators where $elem/collaborator_id = ' + CurAuthObject.id + ' return $elem' );
					_array = ArrayExtract( _array, 'group_id' );
					cur_user_groups = QueryCatalogByKeys( 'groups', 'id', _array );
				}
			}
			catch( _old_xhttp_ )
			{
			}
			if ( ! cur_user_groups.HasValue )
				tools.update_cur_user_groups();
			return cur_user_groups.Object;
	"/>

	<update_cur_user_groups PROPERTY="1" EXPR="
			if ( get_cur_user() == null )
			{
				cur_user_groups = [];
			}
			else
			{
				_array = XQuery( 'for $elem in group_collaborators where $elem/collaborator_id = ' + tools.cur_user_id + ' return $elem' );
				_array = ArrayExtract( _array, 'group_id' );
				cur_user_groups = QueryCatalogByKeys( 'groups', 'id', _array );
			}
			return cur_user_groups.Object;
	"/>

	<cur_user_is_admin PROPERTY="1" EXPR="
			curUser = tools.get_cur_user();
			return curUser == null || curUser.access.access_role == 'admin';
	"/>

	<get_cur_user_content_access PROPERTY="1" EXPR="
			if ( ! cur_user_content_access.HasValue )
				tools.update_cur_user_content_access();
			return cur_user_content_access.Object;
	"/>

	<update_cur_user_content_access PROPERTY="1" EXPR="
			oContentAccess = cur_user_id.HasValue ? tools.get_content_access( cur_user_id, tools.get_cur_user() ) : [];
			if ( tools.cur_user_admin_type == 'content' )
			{
				oContentAccess = ArraySelect( oContentAccess, 'This.catalog!=\'application\'' );
			}
			tools.cur_user_content_access = oContentAccess;
			return oContentAccess;
	"/>

	<get_cur_user_admin_configuration PROPERTY="1" EXPR="
			if ( ! tools.cur_user_admin_configuration.HasValue )
			{
				tools.update_cur_user_admin_configuration();
			}
			return ( tools.cur_user_admin_configuration == null ? null : tools.cur_user_admin_configuration.Object );
	"/>
	<update_cur_user_admin_configuration PROPERTY="1" EXPR="
			var arrAppas = [];
			var iAdminConfigurationID = null;
			var teAdminConfiguration = null;
			var fldAccessRole = undefined;
			var arrClaims = tools.get_access_role_claims();
/*
			if ( arrClaims == null )
			{
				fldAccessRole = tools.cur_user.Object.access.access_role.OptForeignElem;
				if ( fldAccessRole != undefined )
				{
					iAdminConfigurationID = fldAccessRole.admin_configuration_id.Value;
				}
			}
			else
			{
				var oConfigurationClame = ArrayOptFind( arrClaims, 'This.type==\'configuration\'&amp;&amp;This.value==\'1\'' );
				if ( oConfigurationClame != undefined )
				{
					var catAdminConfiguration = ArrayOptFirstElem( XQuery( 'for $elem in admin_configurations where $elem/code = ' + XQueryLiteral( oConfigurationClame.name ) + ' return $elem/Fields(\'id\')' ) );
					if ( catAdminConfiguration != undefined )
					{
						iAdminConfigurationID = catAdminConfiguration.id.Value;
					}
				}
			}
*/


			if ( arrClaims == null )
			{
				fldAccessRole = tools.get_cur_user().access.access_role.OptForeignElem;
			}
			else
			{
				var oConfigurationClame = ArrayOptFind( arrClaims, 'This.type==\'access_role\'&amp;&amp;This.value==\'1\'' );
				if ( oConfigurationClame != undefined )
				{
					fldAccessRole = ArrayOptFindByKey( access_roles, oConfigurationClame.name, 'id' );
				}
			}
			if ( fldAccessRole != undefined )
			{
				iAdminConfigurationID = fldAccessRole.admin_configuration_id.Value;
				tools.get_cur_user().access.access_role = fldAccessRole.id;
			}


			if ( iAdminConfigurationID != null )
			{
				try
				{
					teAdminConfiguration = FetchDoc( UrlFromDocID( iAdminConfigurationID ) ).TopElem;
				}
				catch ( err )
				{
				}
			}
			if ( teAdminConfiguration != null )
			{
/*
				if ( arrClaims == null )
				{
*/
					if ( fldAccessRole != undefined )
					{
						for ( fldFuncBlockElem in fldAccessRole.func_blocks )
						{
							if ( ! fldFuncBlockElem.is_enabled )
							{
								continue;
							}
							for ( fldApplicationElem in fldFuncBlockElem.applications )
							{
								if ( ! fldApplicationElem.is_enabled )
								{
									continue;
								}
								if ( !fldApplicationElem.application_code.HasValue )
								{
									_vrFEApp = fldApplicationElem.application_id.OptForeignElem;
									if ( _vrFEApp != undefined &amp;&amp; _vrFEApp.code.HasValue )
									{
										fldApplicationElem.application_code = _vrFEApp.code;
									}
									else
									{
										fldApplicationElem.application_code = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx';
									}
								}
								arrAppas.push( fldApplicationElem );
							}
						}
					}
/*
				}
				else
				{
					var arrApplicationClaims = ArraySelectByKey( arrClaims, 'application', 'type' );
					var xarrApplications = XQuery( 'for $elem in applications where MatchSome( $elem/code, (' + ArrayMerge( arrApplicationClaims, 'XQueryLiteral(This.name)', ',' ) + ') ) return $elem/Fields(\'id\',\'code\')' );
					var fldAccessRoleApplication = OpenNewDoc( 'x-local://wtv/wtv_access_roles.xmd' ).TopElem.func_blocks.AddChild().applications.AddChild();
					for ( catApplicationElem in xarrApplications )
					{
						oApplicationClaim = ArrayOptFindByKey( arrApplicationClaims, catApplicationElem.code, 'name' );
						fldCloneApplication = fldAccessRoleApplication.Clone();
						fldCloneApplication.application_id = catApplicationElem.id;
						fldCloneApplication.application_code = catApplicationElem.code.HasValue ? catApplicationElem.code: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx';
						fldCloneApplication.access_level = OptInt( oApplicationClaim.value, 1 );
						arrAppas.push( fldCloneApplication );
					}
				}
*/
			}
			tools.cur_user_admin_configuration_applications = arrAppas;
			tools.cur_user_admin_configuration = teAdminConfiguration;
			return teAdminConfiguration == null ? null: tools.cur_user_admin_configuration.Object;
	"/>
	<get_cur_user_admin_configuration_applications PROPERTY="1" EXPR="
			if ( tools.get_cur_user_admin_configuration == null )
			{
				tools.update_cur_user_admin_configuration();
			}
			if ( tools.cur_user_admin_configuration_applications.HasValue )
			{
				return tools.cur_user_admin_configuration_applications.Object;
			}
			return [];
	"/>

	<get_cur_user_application_access_level PROPERTY="1" PARAM="iApplicationIDParam" EXPR="
			if ( tools.cur_user_admin_type == 'application' )
			{
				return tools_app.get_cur_user_application_access_level( iApplicationIDParam );
			}
			else if ( tools.cur_user_admin_type == 'arm' )
			{
				var fldAccessRole = tools.cur_user.Object.access.access_role.OptForeignElem;
				return tools.get_access_role_application_access_level( fldAccessRole, iApplicationIDParam );
			}
			return null;
	"/>
	<get_access_role_application_access_level PROPERTY="1" PARAM="fldAccessRoleParam" PARAM="iApplicationIDParam" EXPR="
			if ( fldAccessRoleParam == undefined )
			{
				return null;
			}
			iApplicationID = OptInt( iApplicationIDParam, null );
			if ( iApplicationID == null )
			{
				var catApplication = ArrayOptFirstElem( XQuery( 'for $elem in applications where $elem/code = ' + XQueryLiteral( iApplicationIDParam ) + ' return $elem/Fields(\'id\')' ) );
				if ( catApplication != undefined )
				{
					iApplicationID = catApplication.id.Value;
				}
			}
			for ( fldFuncBlockElem in fldAccessRoleParam.func_blocks )
			{
				fldApplication = ArrayOptFindByKey( fldFuncBlockElem.applications, iApplicationID, 'application_id' );
				if ( fldApplication != undefined )
				{
					return fldApplication.access_level.Value;
					break;
				}
			}
			return null;
	"/>

	<get_cur_user_access_blocks PROPERTY="1" EXPR="
			if ( ! tools.cur_user_access_blocks.HasValue )
			{
				var fldCloneAccessBlocks = ArrayFirstElem( access_roles ).access_blocs.Clone();
				fldCloneAccessBlocks.Clear();

				var arrClaims = tools.get_access_role_claims();
				if ( arrClaims == null )
				{
					curUser = tools.get_cur_user();
					curUserAccessRole = curUser.access.access_role.OptForeignElem;
					if ( curUserAccessRole != undefined )
					{
						fldCloneAccessBlocks.AssignElem( curUserAccessRole.access_blocs );
					}
				}
				else
				{
					for ( oClaimElem in ArraySelectByKey( arrClaims, 'module', 'type' ) )
					{
						fldAccessBlockChild = fldCloneAccessBlocks.AddChild();
						fldAccessBlockChild.id = oClaimElem.name;
						if ( oClaimElem.value == 'full' )
						{
							fldAccessBlockChild.can_read = true;
							fldAccessBlockChild.can_write = true;
							fldAccessBlockChild.can_delete = true;
						}
						else if ( oClaimElem.value == 'write' )
						{
							fldAccessBlockChild.can_write = true;
							fldAccessBlockChild.can_delete = true;
						}
						else if ( oClaimElem.value == 'read' )
						{
							fldAccessBlockChild.can_read = true;
						}
					}
				}
				tools.cur_user_access_blocks = fldCloneAccessBlocks;
			}
			return tools.cur_user_access_blocks.Object;
	"/>


	<update_filter_conditions PROPERTY="1" PARAM="_source_conditions" PARAM="_catalog_name" PARAM="_scheme_id" PARAM="_set_flag" EXPR="
			try
			{
				if ( _set_flag == true )
				{
					if ( local_settings.view_filters.ChildByKeyExists( _catalog_name ) )
						_scheme_id.Value = local_settings.view_filters.GetChildByKey( _catalog_name ).scheme_id;
					else
						_scheme_id.Clear();
				}
			}
			catch ( ee )
			{
			}

			_source_conditions.Clear();
			if ( _source_conditions.Parent.ChildExists( 'conditions_qual' )  )
			{
				_source_conditions.Parent.conditions_qual.Clear();
			}

			curUser = tools.get_cur_user();
			if ( curUser != null )
			{
				if ( admin_access_catalogs.ChildByKeyExists( _catalog_name ) &amp;&amp; admin_access_catalogs.GetChildByKey( _catalog_name ).use_filter )
				{
					_child = _source_conditions.AddChild();
					_child.field = 'user_access_role';
					_child.value = curUser.access.access_role;
					_child.bracket = '(';

					_child = _source_conditions.AddChild();
					_child.field = 'user_access_role';
					_child.value = '';
					_child.and_or = 'or';
					_child.bracket = ')';


					_child = _source_conditions.AddChild();
					_child.field = 'user_group_id';
					_child.value = '';
					_child.type = 'integer';
					_child.bracket = '(';

					_counter = 0;
					for ( _group in tools.get_cur_user_groups() )
					{
						_child = _source_conditions.AddChild();
						_child.field = 'user_group_id';
						_child.value = _group.id;
						_child.type = 'integer';
						_child.and_or = 'or';
						_counter++;
					}
					if ( _counter == 0 )
						_child.bracket = '';
					else
						_child.bracket = ')';
				}

				for ( _scheme in ArraySelect( lists.view_conditions_schemes, 'catalog == _catalog_name &amp;&amp; access_role == curUser.access.access_role' ) )
				{
					for ( ListElem in _scheme.conditions )
					{
						_child = _source_conditions.AddChild();
						_child.AssignElem( ListElem );
						if( ListElem.ChildIndex == 0 )
						{
							_child.and_or = 'and';
							_child.bracket = '(' + _child.bracket ;
						}
						if( ListElem.ChildIndex == ( _scheme.conditions.ChildNum - 1 ) )
						{
							_child.bracket = _child.bracket + ')';
						}
					}
				}
			}

			conditionArray = Array();
			curScheme = null;
			try
			{
				if ( _scheme_id != null &amp;&amp; _scheme_id != '' )
				{
					curScheme = lists.view_conditions_schemes.GetChildByKey( _scheme_id );
					if ( ! curScheme.access_role.HasValue || curScheme.access_role != tools.get_cur_user().access.access_role )
					{
						conditionArray = curScheme.conditions;
					}
					else
					{
						curScheme = null;
					}
				}
			}
			catch ( e )
			{
			}

			for ( ListElem in conditionArray )
			{
				_child = _source_conditions.AddChild();
				_child.AssignElem( ListElem );
			}
			if ( curScheme != null &amp;&amp; _source_conditions.Parent.ChildExists( 'conditions_qual' ) )
			{
				_source_conditions.Parent.conditions_qual = curScheme.conditions_qual;
			}
	"/>


	<check_cur_user_admin_access PROPERTY="1" PARAM="teObjectParam" PARAM="fldAccessCalalogParam" EXPR="
			curUser = tools.get_cur_user();
			if ( curUser == null )
			{
				LogEvent( 'auth-events', 'admin_no_user_failure\tLDS\t' + '' + '\t' + teObjectParam.id + '\t' );
				return false;
			}

			if ( curUser.access.access_role == 'admin' )
			{
				return true;
			}

			try
			{
				if ( fldAccessCalalogParam == null || fldAccessCalalogParam == undefined )
				{
					throw 'no_data';
				}
			}
			catch ( err )
			{
				fldAccessCalalogParam = admin_access_catalogs.GetOptChildByKey( teObjectParam.Name );
				if ( fldAccessCalalogParam == undefined )
				{
//					return true;
				}
			}

			if ( fldAccessCalalogParam != null &amp;&amp; fldAccessCalalogParam != undefined &amp;&amp; ! fldAccessCalalogParam.use_filter )
			{
				return true;
			}
			if ( teObjectParam.ChildExists( 'user_access_role' ) &amp;&amp; teObjectParam.user_access_role.HasValue &amp;&amp; teObjectParam.user_access_role != curUser.access.access_role )
			{
				LogEvent( 'auth-events', 'admin_role_failure\tLDS\t' + curUser.login + '\t' + teObjectParam.id + '\t' );
				return false;
			}
			if ( teObjectParam.ChildExists( 'user_group_id' ) &amp;&amp; teObjectParam.user_group_id.HasValue &amp;&amp; ArrayOptFindByKey( tools.get_cur_user_groups(), teObjectParam.user_group_id, 'id' ) == undefined )
			{
				LogEvent( 'auth-events', 'admin_group_failure\tLDS\t' + curUser.login + '\t' + teObjectParam.id + '\t' );
				return false;
			}
			return true;
	"/>

	<admin_access_filling PROPERTY="1" PARAM="teObjectParam" EXPR="
			curUser = tools.get_cur_user();
			if ( curUser == null )
			{
				return false;
			}

			fldAccessCalalogChild = admin_access_catalogs.GetOptChildByKey( teObjectParam.Name );
			if ( fldAccessCalalogChild == undefined )
			{
				return true;
			}

			if ( ! tools.check_cur_user_admin_access( teObjectParam, fldAccessCalalogChild ) )
			{
				var bIsCancel = false;
				try
				{
					ActiveScreen.MsgBox( ms_tools.get_const('vap_message'), ms_tools.get_const('c_error'), 'error', 'ok' );
					bIsCancel = true;
				}
				catch ( err )
				{
				}
				if ( bIsCancel )
				{
					Cancel();
				}
				return false;
			}

			if ( fldAccessCalalogChild.auto_group_filling &amp;&amp; ( teObjectParam.Doc.NeverSaved &amp;&amp; ! teObjectParam.user_group_id.HasValue ) )
			{
				teObjectParam.user_group_id = curUser.access.user_group_id;
			}
			if ( fldAccessCalalogChild.auto_role_filling &amp;&amp; ( teObjectParam.Doc.NeverSaved &amp;&amp; ! teObjectParam.user_access_role.HasValue ) )
			{
				teObjectParam.user_access_role = curUser.access.access_role;
			}

			return true;
	"/>

	<admin_access_copying PROPERTY="1" PARAM="_to_obj_id" PARAM="_to_obj_doc" PARAM="_from_obj_id" PARAM="_from_obj_doc" EXPR="
			try
			{
				_to_obj_doc;
			}
			catch(err)
			{
				try
				{
					_to_obj_doc = OpenDoc( UrlFromDocID( Int( _to_obj_id ) ) ).TopElem;
				}
				catch(err)
				{
					return;
				}
			}

			try
			{
				_from_obj_doc;
			}
			catch(err)
			{
				try
				{
					_from_obj_doc = OpenDoc( UrlFromDocID( Int( _from_obj_id ) ) ).TopElem;
				}
				catch(err)
				{
					return;
				}
			}

			try
			{
				_access = admin_access_catalogs.GetChildByKey( _to_obj_doc.Name );
				if ( _access.auto_group_filling &amp;&amp; ! _to_obj_doc.user_group_id.HasValue )
					_to_obj_doc.user_group_id = _from_obj_doc.user_group_id;

				if ( _access.auto_role_filling &amp;&amp; ! _to_obj_doc.user_access_role.HasValue )
					_to_obj_doc.user_access_role = _from_obj_doc.user_access_role;
			}
			catch ( ee )
			{
			}
	"/>


	<replace_temlate_tags PROPERTY="1" PARAM="_str" PARAM="_date" EXPR="
			if ( _str == '' )
				return '';

			try
			{
				_date = Date( _date );
			}
			catch ( dd )
			{
				_date = Date();
			}

			_str = StrReplace( _str, '[yyyy]', Year( _date ) );
			_str = StrReplace( _str, '[yy]', String( Year( _date ) ).slice( 2 ) );
			//_str = StrReplace( _str, '[y]', String( Year( _date ) ).slice( 3 ) );
			_str = StrReplace( _str, '[mm]', StrInt( Month( _date ), 2 ) );
			_str = StrReplace( _str, '[m]', Month( _date ) );
			_str = StrReplace( _str, '[dd]', StrInt( Day( _date ), 2 ) );
			_str = StrReplace( _str, '[d]', Day( _date ) );
			_str = StrReplace( _str, '[hh]', StrInt( Hour( _date ), 2 ) );
			_str = StrReplace( _str, '[h]', Hour( _date ) );
			_str = StrReplace( _str, '[mimi]', StrInt( Minute( _date ), 2 ) );
			_str = StrReplace( _str, '[mi]', Minute( _date ) );
			_str = StrReplace( _str, '[ss]', StrInt( Second( _date ), 2 ) );
			_str = StrReplace( _str, '[s]', Second( _date ) );

			_str = StrReplace( _str, '[AppDirectoryPath]', AppDirectoryPath() );

			//_str = StrReplace( _str, '[YYYY]', Year( _date ) );
			//_str = StrReplace( _str, '[YY]', String( Year( _date ) ).slice( 2 ) );
			//_str = StrReplace( _str, '[Y]', String( Year( _date ) ).slice( 3 ) );
			//_str = StrReplace( _str, '[MM]', StrInt( Month( _date ), 2 ) );
			//_str = StrReplace( _str, '[M]', Month( _date ) );
			//_str = StrReplace( _str, '[DD]', StrInt( Day( _date ), 2 ) );
			//_str = StrReplace( _str, '[D]', Day( _date ) );
			//_str = StrReplace( _str, '[HH]', StrInt( Hour( _date ), 2 ) );
			//_str = StrReplace( _str, '[H]', Hour( _date ) );
			//_str = StrReplace( _str, '[MIMI]', StrInt( Minute( _date ), 2 ) );
			//_str = StrReplace( _str, '[MI]', Minute( _date ) );
			//_str = StrReplace( _str, '[SS]', StrInt( Second( _date ), 2 ) );
			//_str = StrReplace( _str, '[S]', Second( _date ) );

			return _str;
	"/>



	<build_condition_eval_str PROPERTY="1" PARAM="_conditions" PARAM="iWorkflowIDParam" PARAM="teWorkflowParam" EXPR="
			if ( _conditions.Parent.ChildExists( 'is_false' ) &amp;&amp; _conditions.Parent.is_false )
				return 'false';

			var _eval_str = '';
			for ( _condition in _conditions )
			{
				_eval_str = _eval_str + _condition.begin_bracket;
				switch ( _condition.type )
				{
					case 'if_workflow_state_id':
						_eval_str = _eval_str + 'curObject.workflow_state==&quot;' + _condition.workflow_state_id + '&quot;';
						break;

					case 'if_custom_workflow_state_id':
						switch ( _condition.workflow_state_id )
						{
							case 'last_custom_state':
								_eval_str = _eval_str + '(curObject.workflow_custom_states.ChildByKeyExists(curObject.workflow_state)?ArrayOptFind(curObject.workflow_custom_states,&quot;PrimaryKey==curObject.workflow_state&amp;&amp;next_workflow_custom_state_code.HasValue&quot;)==undefined:false)';
								break;

							case 'next_custom_state':
								_eval_str = _eval_str + '(curObject.workflow_custom_states.ChildByKeyExists(curObject.workflow_state)?ArrayOptFind(curObject.workflow_custom_states,&quot;PrimaryKey==curObject.workflow_state&amp;&amp;next_workflow_custom_state_code.HasValue&quot;)!=undefined:false)';
								break;
						}
						break;

					case 'if_eval_custom_conditions':
						_eval_str = _eval_str + '(curObject.workflow_custom_states.ChildByKeyExists(curObject.workflow_state)?eval(curObject.workflow_custom_states.GetChildByKey(curObject.workflow_state).condition_eval_str):false)';
						break;

					case 'if_workflow_field_value':
						if ( _condition.workflow_field_id.HasValue )
						{
							try
							{
								if ( teWorkflowParam == null || teWorkflowParam == '' )
									throw 'no_param';
							}
							catch ( err )
							{
								teWorkflowParam = OpenDoc( UrlFromDocID( iWorkflowIDParam ) ).TopElem;
							}
							_cur_field = teWorkflowParam.workflow_fields.GetChildByKey( _condition.workflow_field_id );

							sValue = CodeLiteral( _condition.workflow_field_value );
							switch ( _cur_field.type )
							{
								case 'date':
									_cur_field_eval = '(sObjectValue=curObject.workflow_fields.GetOptChildByKey(' + CodeLiteral( _condition.workflow_field_id ) + '),(sObjectValue==undefined||!sObjectValue.value.HasValue?null:Date(sObjectValue.value)))';
									if ( _condition.workflow_field_value.HasValue )
									{
										if ( StrContains( _condition.workflow_field_value, 'CurDateOffset(' ) )
										{
											sValue = StrReplace( _condition.workflow_field_value, 'CurDateOffset(', 'DateOffset(CurDate,' );
										}
										else if ( StrContains( _condition.workflow_field_value, 'DateOffset(' ) )
										{
											sValue = StrReplace( _condition.workflow_field_value, 'DateOffset(', '(sObjectValue=curObject.workflow_fields.GetOptChildByKey(' + CodeLiteral( _condition.workflow_field_id ) + '),(sObjectValue==undefined||!sObjectValue.value.HasValue?null:DateOffset(Date(sObjectValue.value),' ) + '))';
										}
										else
										{
											sValue = 'Date(' + sValue + ')';
										}
									}
									else
									{
										sValue = 'null';
									}
									break;

								case 'external':
									_cur_field_eval = '' + _cur_field.external_value;
									break;

								default:
									_cur_field_eval = '(sObjectValue=curObject.workflow_fields.GetOptChildByKey(' + CodeLiteral( _condition.workflow_field_id ) + '),(sObjectValue==undefined?null:sObjectValue.value.Value))';
									break;
							}

							if ( StrContains( _condition.usl, 'cn' ) )
							{
								_eval_str += ( _condition.usl == 'ncn' ? '! ' : '' ) + 'StrContains(' + _cur_field_eval + ',' + CodeLiteral( _condition.workflow_field_value ) + ')';
							}
							else
							{
								_eval_str += _cur_field_eval + ( _condition.usl.HasValue ? common.all_option_types.GetOptChildByKey( _condition.usl ).caption : '==' ) + sValue;
							}
						}
						break;

					case 'if_cur_user':
						switch ( _condition.cur_user_type )
						{
							case 'is_self_cur_user':
								_eval_str = _eval_str + 'tools.is_self_cur_user()';
								break;

							case 'is_boss':
								_eval_str = _eval_str + 'tools.is_boss()';
								break;

							case 'is_next_boss':
								_eval_str = _eval_str + 'tools.is_next_boss()';
								break;

							case 'is_main_boss':
								_eval_str = _eval_str + 'tools.is_main_boss()';
								break;

							case 'is_real_boss':
								_eval_str = _eval_str + 'tools.is_real_boss()';
								break;

							case 'is_cost_center_boss':
								_eval_str = _eval_str + 'tools.is_cost_center_boss()';
								break;

							case 'is_project_manager':
								_eval_str = _eval_str + 'tools.is_project_manager()';
								break;

							case 'cur_person':
							{
								if ( _condition.person_id.HasValue )
								{
									_eval_str += 'curUserID==' + StrInt( _condition.person_id );
								}
								break;
							}

							case 'cur_access_role':
								if ( _condition.cur_access_role.HasValue )
									_eval_str = _eval_str + 'curUser.access.access_role==&quot;' + _condition.cur_access_role + '&quot;';
								break;

							case 'cur_parent_object_id':
							{
								if ( _condition.cur_parent_object_id.HasValue )
								{
									_eval_str += 'tools.is_boss_by_subdivision_id(' + StrInt( _condition.cur_parent_object_id ) + ')';
								}
								break;
							}
							case 'cur_position_id':
							{
								if ( _condition.cur_position_id.HasValue )
								{
									_eval_str += 'tools.is_by_position_id(' + StrInt( _condition.cur_position_id ) + ')';
								}
								break;
							}
							case 'cur_group_id':
							{
								if ( _condition.cur_group_id.HasValue )
								{
									_eval_str += 'tools.is_by_group_id(' + StrInt( _condition.cur_group_id ) + ')';
								}
								break;
							}
							case 'is_person_func_manager':
								_eval_str = _eval_str + 'tools.is_person_func_manager()';
								break;

							case 'is_person_org_func_manager':
								_eval_str = _eval_str + 'tools.is_person_org_func_manager()';
								break;

							case 'is_func_manager':
								_eval_str = _eval_str + 'tools.is_func_manager()';
								break;
						}
						break;

					case 'if_statement_date':
						_eval_str += 'tools.is_statement_date(' + CodeLiteral( _condition.cur_activity_id ) + ',' + CodeLiteral( _condition.workflow_field_value ) + ',' + CodeLiteral( _condition.usl ) + ')';
						break;

					case 'if_eval_str':
						_eval_str += '(' + _condition.eval_str + ')';
						break;
				}
				_eval_str = _eval_str + _condition.finish_bracket;
				if ( ( _condition.ChildIndex + 1 ) != _condition.Parent.ChildNum )
					_eval_str = _eval_str + _condition.and_or;
			}

			return _eval_str;
	"/>



	<update_document_persons PROPERTY="1" PARAM="_obj_id" PARAM="_obj_doc" EXPR="
			objectDocID = _obj_id;
			objectDoc = _obj_doc;

			canFieldArray = Array( 'can_edit', 'can_create', 'can_delete' );
			docCounter = 0;
			if ( objectDoc.Name != 'document' )
			{
				documentArray = XQuery( 'for $elem in documents where $elem/parent_object_id = ' + objectDocID + ' return $elem' );
				for ( _document in documentArray )
					try
					{
						docDocument = ObtainUiDoc( UrlFromDocID( _document.PrimaryKey ) );
						for ( _document_person in objectDoc.document_persons )
						{
							if ( docDocument.TopElem.document_persons.ChildByKeyExists( _document_person.PrimaryKey ) )
							{
								_child = docDocument.TopElem.document_persons.GetChildByKey( _document_person.PrimaryKey );
								for ( _can_field in canFieldArray )
									if ( _document_person.Child( _can_field ).Value )
										_child.Child( _can_field ).Value = true;
							}
							else
							{
								_child  = docDocument.TopElem.document_persons.ObtainChildByKey( _document_person.PrimaryKey );
								_child.AssignElem( _document_person );
							}
						}
						UpdateUiDoc( docDocument );
						docCounter++;
					}
					catch( err )
					{
						alert( err );
					}
			}
			else
			{
				try
				{
					if ( objectDoc.parent_object_id.HasValue )
					{
						parentObjectDoc = OpenDoc( UrlFromDocID( objectDoc.parent_object_id ) ).TopElem;
						for ( _document_person in parentObjectDoc.document_persons )
						{
							_child = objectDoc.document_persons.ObtainChildByKey( _document_person.PrimaryKey );
							_child.person_fullname = _document_person.person_fullname;
							for ( _can_field in canFieldArray )
								if ( _document_person.Child( _can_field ).Value )
									_child.Child( _can_field ).Value = true;
						}
					}
					docCounter++;
				}
				catch( err )
				{
					alert( err );
				}
			}

			return docCounter;
	"/>



	<get_period_from_iso PROPERTY="1" PARAM="_period" EXPR="
			_period = StrLowerCase( Trim( _period ) );
			if ( StrBegins( _period, 'p' ) )
				_period = _period.slice( 1 );

			_value = 0;
			tIndex = _period.indexOf( 't' );
			nextIndex = 0;

			if ( tIndex == 0-1 || tIndex &gt; 0 )
			{
				yIndex = _period.indexOf( 'y' );
				mIndex = _period.indexOf( 'm' );
				dIndex = _period.indexOf( 'd' );

				if ( yIndex &gt; 0 )
				{
					_value += Int( _period.slice( 0, yIndex ) ) * 31536000000;
					nextIndex = yIndex + 1;
				}
				if ( mIndex &gt; 0 &amp;&amp; mIndex &lt; tIndex )
				{
					_value += Int( _period.slice( nextIndex, mIndex ) ) * 2678400000;
					nextIndex = mIndex + 1;
				}
				if ( dIndex &gt; 0 )
					_value += Int( _period.slice( nextIndex, dIndex ) ) * 86400000;
			}

			if ( tIndex != 0-1 )
			{
				hIndex = _period.indexOf( 'h', tIndex );
				mIndex = _period.indexOf( 'm', tIndex );
				sIndex = _period.indexOf( 's', tIndex );

				nextIndex = tIndex + 1;
				if ( hIndex &gt; 0 )
				{
					_value += Int( _period.slice( nextIndex, hIndex ) ) * 3600000;
					nextIndex = hIndex + 1;
				}
				if ( mIndex &gt; 0 )
				{
					_value += Int( _period.slice( nextIndex, mIndex ) ) * 60000;
					nextIndex = mIndex + 1;
				}
				if ( sIndex &gt; 0 )
					_value += Real( _period.slice( nextIndex, sIndex ) ) * 1000;
			}

			return _value;
	"/>




	<get_notification_document PROPERTY="1" PARAM="oDocumentParam" EXPR="
			iDocumentID = OptInt( oDocumentParam );
			if ( iDocumentID == undefined )
				iDocumentID = oDocumentParam.Doc.DocID;
			else
				oDocumentParam = OpenDoc( UrlFromDocID( iDocumentID ) ).TopElem;

			iCounter = 0;
			fldAttributes = oDocumentParam.attributes;
			while ( iCounter &lt; 50 &amp;&amp; fldAttributes != undefined &amp;&amp; oDocumentParam.parent_document_id.HasValue &amp;&amp; ! fldAttributes.permit_subscription )
			{
				iDocumentID = oDocumentParam.parent_document_id;
				oDocumentParam = oDocumentParam.parent_document_id.OptForeignElem;
				fldAttributes = oDocumentParam;
				iCounter++;
			}

			return fldAttributes != undefined &amp;&amp; fldAttributes.permit_subscription ? iDocumentID : null;
	"/>






	<get_cost_center_id_by_person_id PROPERTY="1" PARAM="_person_id" PARAM="_person_doc" EXPR="
			try
			{
				if ( _person_doc == null || _person_doc == '' )
					throw 'no_doc';
				personDoc = _person_doc;
			}
			catch ( err )
			{
				personDoc = OpenDoc( UrlFromDocID( _person_id ) ).TopElem;
			}

			iCostCenterID = null;
			if ( global_settings.settings.cost_center_priority == 'collaborator' &amp;&amp; personDoc.cost_center_id.HasValue )
				iCostCenterID = personDoc.cost_center_id;

			if ( iCostCenterID == null )
			{
				fldParent = personDoc.position_parent_id;
				iDepthCounter = 0;
				while( fldParent.HasValue &amp;&amp; iDepthCounter &lt; 50 )
				{
					catParent = fldParent.OptForeignElem;
					if ( catParent == undefined )
						break;

					if ( catParent.ChildExists( 'cost_center_id' ) &amp;&amp; catParent.cost_center_id.HasValue )
					{
						iCostCenterID = catParent.cost_center_id;
						break;
					}

					iDepthCounter++;
					fldParent = catParent.parent_object_id;
				}

				if ( iCostCenterID == null &amp;&amp; personDoc.cost_center_id.HasValue )
					iCostCenterID = personDoc.cost_center_id;
			}

			return iCostCenterID == null ? global_settings.settings.default_cost_center_id : iCostCenterID;
	"/>

	<get_cost_center_boss_by_person_id PROPERTY="1" PARAM="_person_id" PARAM="_person_doc" EXPR="
			try
			{
				if ( _person_doc == null || _person_doc == '' )
					throw 'no_doc';
				personDoc = _person_doc;
			}
			catch ( err )
			{
				personDoc = OpenDoc( UrlFromDocID( _person_id ) ).TopElem;
			}

			iCostCenterID = tools.get_cost_center_id_by_person_id( _person_id, personDoc );
			return iCostCenterID == null ? Array() : tools.get_sub_boss_by_sub_id( iCostCenterID );
	"/>

	<get_sub_boss_by_sub_id PROPERTY="1" PARAM="_sub_id" EXPR="
		try
		{
			subID = Int( _sub_id );
		}
		catch ( err )
		{
			return null;
		}
		return ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + subID + ' and $elem/type = \'position\' and $elem/basic_collaborator_id != null() and $elem/is_boss = true() return $elem/Fields(\'basic_collaborator_id\')' ), 'This.basic_collaborator_id.Value' );
	"/>


	<get_time PROPERTY="1" PARAM="_str" PARAM="_minite_flag" PARAM="_second_flag" EXPR="
			_str = String( Trim( _str ) );
			if ( _str == '' )
				return null;

			_res_str = '';
			timeArray = _str.split( ':' );
			try
			{
				_start_hour = Int( Trim( timeArray[0] ) );
				if ( _start_hour &lt; 0 || _start_hour &gt; 23 )
					return null;

				_res_str = StrInt( _start_hour, 2 );
			}
			catch ( _no_hour_ )
			{
			}

			try
			{
				_minite_flag = ( _minite_flag == true );
			}
			catch ( e )
			{
				_minite_flag = false;
			}
			try
			{
				if ( ArrayCount( timeArray ) &gt; 1 )
				{
					_start = Int( Trim( timeArray[1] ) );
					if ( _start &lt; 0 || _start &gt; 59 )
						return null;

					_res_str = _res_str + ':' + StrInt( _start, 2 );
				}
				else if ( _minite_flag )
				{
					return null;
				}
				else
				{
					_res_str = _res_str + ':00';
				}
			}
			catch ( _no_ )
			{
			}

			try
			{
				_second_flag = ( _second_flag == true );
			}
			catch ( e )
			{
				_second_flag = false;
			}
			try
			{
				if ( ArrayCount( timeArray ) &gt; 2 )
				{
					_start = Int( Trim( timeArray[2] ) );
					if ( _start &lt; 0 || _start &gt; 59 )
						return null;

					_res_str = _res_str + ':' + StrInt( _start, 2 );
				}
				else if ( _second_flag )
				{
					return null;
				}
			}
			catch ( _no_ )
			{
			}
			return _res_str;
	"/>



	<enable_log_web_request PROPERTY="1" PARAM="_flag" EXPR="
			if ( _flag )
			{
				_base = FilePath( AppDirectoryPath(), 'Logs' );
				_param='#Software: Microsoft Internet Information Services 7.0 generated by Web Tutor\r\n#Version: 1.0\r\n#Date: 2000-11-19 22:48:39\r\n#Fields: date time c-ip cs-username s-computername s-port cs-method cs-uri-stem cs-uri-query sc-status sc-bytes cs-bytes time-taken cs(User-Agent)';

				EnableLogExt( 'web_request', 'base-dir=&quot;' + _base + '&quot;;use-std-event-prefix=0;header-str=' + _param );
			}
			else
			{
				EnableLog( 'web_request', false );
			}
	"/>




	<desc_cleanup PROPERTY="1" PARAM="_desc" PARAM="_temp_dir" EXPR="
			try
			{
				if ( _temp_dir == '' )
					thow 'net_dir'
			}
			catch ( err )
			{
				_temp_dir = null;
			}

			if ( !StrContains( _desc, '&lt;' ) )
			{
				return _desc;
			}

			newHtmlStr = '';
			reader = new TagReader( _desc );
			reader.ReadNext();
			srcArray = Array();
			srcArrayCounter = 0;
			tempDir = '{}'
			while ( ! reader.EOF )
			{
				_add_flag = true;
				if ( reader.TagName == 'img' )
				{
					attr = reader.GetAttr( 'src' );
					if ( attr != '' &amp;&amp; ! StrContains( attr, '/' ) )
					{
						attr = StrReplace( attr, '[!MODULE_IMAGES]', '' );
						if ( _temp_dir != null )
							reader.SetAttr( 'src', _temp_dir + '/' + attr );

						srcArray[ srcArrayCounter ] = attr;
						srcArrayCounter++;
					}
				}
				else if ( reader.TagName == 'compound-attc' &amp;&amp; ArrayOptFind( srcArray, 'This==' + CodeLiteral( reader.GetAttr( 'path' ) ) ) == undefined )
				{
					_add_flag = false;
				}

				if ( _add_flag )
					newHtmlStr = newHtmlStr + reader.GetTagStr();

				reader.ReadNext();
			}
			return newHtmlStr;
	"/>




	<get_field_title PROPERTY="1" PARAM="_field" PARAM="curLngWeb" EXPR="
			try
			{
				if ( curLngWeb == null || curLngWeb == '' )
					throw 'no_data';
			}
			catch ( err )
			{
				curLngWeb = ui_lng.items;
			}
			try
			{
				_title = String( _field.Title );
			}
			catch ( err )
			{
				_title = _field;
			}
			try
			{
				if ( StrBegins( _title, 'const=' ) )
				{
					sID = _title.slice( 6 );
				}
				else
				{
					return _title;
				}
				_find = ArrayOptFindBySortedKey( curLngWeb, sID, 'id' );
				return _find == undefined ? sID : _find.val.Value;
			}
			catch ( err )
			{
			}
			return '';
	"/>






	<fill_field_names PROPERTY="1" PARAM="FIELD_NAMES" PARAM="FORM" PARAM="ISCATALOG" PARAM="EVALPATH" PARAM="PRETITLE" PARAM="CUSTOMFIELDSTYPEID" EXPR="
			try
			{
				if ( ISCATALOG == null || ISCATALOG == '' )
					throw 'neto';
			}
			catch ( err )
			{
				ISCATALOG = true;
			}
			try
			{
				if ( EVALPATH == null )
					throw 'neto';
			}
			catch ( err )
			{
				EVALPATH = '';
			}
			try
			{
				if ( PRETITLE == null )
					throw 'neto';
			}
			catch ( err )
			{
				PRETITLE = '';
			}
			try
			{
				if ( CUSTOMFIELDSTYPEID == '' )
					throw 'no_data';
			}
			catch ( err )
			{
				CUSTOMFIELDSTYPEID = null;
			}

			var _array = tools.new_doc_by_name( FORM, ISCATALOG ).TopElem;
			if ( ISCATALOG )
				_array = _array.AddChild();
			else if ( EVALPATH != '' )
				_array = _array.EvalPath( EVALPATH ).AddChild();

			function rec_fields( fldTarget, _cur_field, _prestr, _pretitle )
			{
				if ( _cur_field.IsTemp )
					return;

				var sFieldName = _cur_field.Name;
				if ( sFieldName == '__hcc' || sFieldName == '__hlevel' )
					return;

				var _child = fldTarget.AddChild();

				var _cur_name = _prestr + ( _prestr != '' ? '.' : '' ) + sFieldName;
				var _cur_title = _pretitle + ( _pretitle != '' ? '.' : '' ) + tools.get_field_title( _cur_field );
				_child.name = _cur_name;
				_child.title = _cur_title;
				_child.type = _cur_field.Type;
				_child.is_multiple = _cur_field.IsMultiple;

				var _foreign_str = _cur_field.ForeignArrayCodeStr;
				if ( _foreign_str != '' )
					try
					{
						if ( _child.type == 'integer' &amp;&amp; ! StrContains( _foreign_str, '.' ) &amp;&amp; StrEnds( _foreign_str, 's' ) )
						{
							_foreign_str = _foreign_str.slice( 0, StrLen( _foreign_str ) - 1 );

							if ( common.exchange_object_types.ChildByKeyExists( _foreign_str ) )
								_child.foreign_catalog = _foreign_str;

						}

						if ( ! StrContains( _foreign_str, 'XQuery' ) )
							_child.foreign_array = _cur_field.ForeignArray;
					}
					catch ( err )
					{
					}

				try
				{
					var fldArray = _cur_field.AddChild();
					_child.is_array = true;
					if ( sFieldName != 'custom_elems' )
						for ( fldArrayElem in fldArray )
							rec_fields( _child.field_names, fldArrayElem, '', _cur_title );

					fldArray.Delete();
				}
				catch ( err )
				{
				}

				for ( _field in _cur_field )
					rec_fields( fldTarget, _field, _cur_name, _cur_title );
			}

			FIELD_NAMES.Clear();
			for ( _begin_field in _array )
				rec_fields( FIELD_NAMES, _begin_field, '', PRETITLE );

			if ( ISCATALOG )
			{
// перечень имен multiple-полей в фильтрах (multipe-поле, mulpiple-поля)
				var arrMultipleFields = [ 'category_id', 'role_id', 'grade_ids' ];
				var _child;
				for( _mf in arrMultipleFields )
					try
					{
						if( !_array.FormChildExists( _mf ) )
						{
							continue;
						}

						_child = GetObjectProperty( _array, _mf ).Add();
						rec_fields( FIELD_NAMES, _child, '', PRETITLE );
					}
					catch( ex ){}

				if ( common.linking_views.ChildByKeyExists( FORM ) )
					return;

				try
				{
					_array = tools.new_doc_by_name( FORM, false ).TopElem;
				}
				catch ( err )
				{
					return;
				}
			}

			if ( ! _array.ChildExists( 'custom_elems' ) || ! custom_templates.ChildExists( FORM ) )
				return;

			var _template = custom_templates.Child( FORM );
			if ( _template.ChildExists( 'fields' ) )
			{
				for ( _field in _template.fields )
				{
					_child = FIELD_NAMES.AddChild();
					_child.AssignElem( _field );
					_child.is_custom_field = true;
					if ( _field.type == 'file' )
					{
						_child.foreign_catalog = 'resource';
						_child.foreign_array = XQuery( 'resources' );
					}
					else if ( _field.type == 'foreign_elem' &amp;&amp; _field.catalog.HasValue )
					{
						_child.foreign_catalog = _field.catalog;
						if ( DefaultDb.GetOptCatalog( _field.catalog + 's' ) != undefined )
							_child.foreign_array = XQuery( _field.catalog + 's' );
					}
				}
			}
			else if ( ! _template.ChildExists( 'items' ) )
			{
				var fldItems = custom_templates.Child( _template.template_field ).items;
				if ( CUSTOMFIELDSTYPEID != null )
					fldItems = [ fldItems.GetChildByKey( CUSTOMFIELDSTYPEID ) ];
				for ( _item in fldItems )
					for ( _field in _item.fields )
					{
						_child = FIELD_NAMES.AddChild();
						_child.AssignElem( _field );
						_child.is_custom_field = true;
						if ( _field.type == 'file' )
						{
							_child.foreign_catalog = 'resource';
							_child.foreign_array = XQuery( 'resources' );
						}
						else if ( _field.type == 'foreign_elem' &amp;&amp; _field.catalog.HasValue )
						{
							_child.foreign_catalog = _field.catalog;
							if ( DefaultDb.GetOptCatalog( _field.catalog + 's' ) != undefined )
								_child.foreign_array = XQuery( _field.catalog + 's' );
						}
					}
			}
	"/>










<DateFunc PROPERTY="1" PARAM="SRC1" PARAM="SRC2" PARAM="EVALSTR" PARAM="PARAM1" PARAM="PARAM2" PARAM="PARAM3" EXPR="
{
	/* **** *****

	SRC 1,2 - два поля-источника

	EVALSTR - сама формула, в которой источники указываются как #1 и #2 соответственно

	PARAMn - параметр, в который можно записать промежуточное значение, а потом вызвать его в другом месте написав @1, @2 или @3

	Параметров только три штуки.

	Параметр N можно использовать в параметрах от 1 до N-1

	Внутри параметров можно использовать источники #1 и #2

	Если передать в качестве источника пустую строку: '' , то результатом будет текущая дата и время.


	**************** */

	try {PARAM1;} catch (_x_) {PARAM1 = undefined;}
	try {PARAM2;} catch (_x_) {PARAM2 = undefined;}
	try {PARAM3;} catch (_x_) {PARAM3 = undefined;}

	try
	{
		if (String(SRC1) == '')
			var _date_1 = Date();
		else
			var _date_1 = Date(SRC1);

		if (String(SRC2) == '')
			var _date_1 = Date();
		else
			var _date_2 = Date(SRC2);

		_evalstr = StrReplace( EVALSTR, '#', '_date_');
		_evalstr = StrReplace( _evalstr, '@', '_param_');
		if (PARAM1 != undefined)
		{
			if (PARAM2 != undefined)
			{
				if (PARAM3 != undefined)
				{
					eval( '_param_3 = ' + StrReplace ( StrReplace (PARAM3, '#', '_date_') , '@',  '_param_')  );
				}
				eval( '_param_2 = ' + StrReplace ( StrReplace (PARAM2, '#', '_date_') , '@',  '_param_')  );
			}
			eval( '_param_1 = ' + StrReplace ( StrReplace (PARAM1, '#', '_date_') , '@',  '_param_')  );
		}


		_evalstr = '_reslt = (' + _evalstr + ');';

		eval(_evalstr);
		return _reslt;
	}
	catch(_x_)
	{
		alert(_x_);
		return '';
	}
}

"/>

<AdjustDate PROPERTY="1" PARAM="DATE_VAL" PARAM="DAYS" PARAM="HOURS" PARAM="MINUTES" PARAM="SECONDS" EXPR="

	/****

		Параметры - ДАТА, оставить ли в секундах, колво дней, кол-во часов, кол-во минут, кол-во секунд

	****/
	if ( String( DATE_VAL ) == '' )
		var _date_1 = Date();
	else
		var _date_1 = Date( DATE_VAL );
	try {_days = OptInt( DAYS, 0 ) * 86400 ;} catch(_woopsie_) _days = 0;
	try {_hours = OptInt( HOURS, 0 ) * 3600 ;} catch(_woopsie_) _hours = 0;
	try {_minutes = OptInt( MINUTES, 0 ) * 60 ;} catch(_woopsie_) _minutes = 0;
	try {_seconds = OptInt( SECONDS, 0 ) ;} catch(_woopsie_) _seconds = 0;
	return RawSecondsToDate( Int( DateToRawSeconds(_date_1) ) + _seconds + _minutes + _hours + _days );

"/>

<get_report_storage_field PROPERTY="1" PARAM="sDatatype" EXPR="
		switch(sDatatype)
		{
			case 'integer':
				return 'vi';
			case 'real':
				return 'vn';
			case 'date':
				return 'vd';
			case 'bool':
				return 'vb';
			default:
				return 'vs';
		}
"/>
<build_report_remote PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="REPORT_ID" PARAM="PS" PARAM="docReportParam" PARAM="sLngSHORT" PARAM="bMetaOnly" EXPR="

    CheckCurThread();

    var progress = new TaskProgress;
	progress.TaskName = ms_tools.get_const('bb1jhx82gs');

	//progress.ItemCount = 1;
	//progress.CurrentItemIndex = 0;

	var curReportDoc, fldCrit, i;
	try
	{
		if (docReportParam.TopElem.Name != 'custom_report')
			throw 'alien doc!';
		curReportDoc = docReportParam;
	}
	catch(_X_)
	{
		docReportParam = null;
	}
	try
	{
		PS;
	}
	catch(_x_)
	{
		PS = undefined;
	}

	if (docReportParam == null)
	{
		if (PS == undefined)
		{
			try
			{
				curReportDoc = ObtainUiDoc( UrlFromDocID( Int(REPORT_ID) ) );
			}
			catch(_x_)
			{
				return null;
			}
		}
		else
		{
			curReportDoc = OpenNewDoc( 'x-local://wtv/wtv_custom_report.xmd' );
			docReportParam = OpenDoc(UrlFromDocID(REPORT_ID));
			curReportDoc.TopElem.AssignElem(docReportParam.TopElem);
		}

	}
	else if (PS != undefined && curReportDoc !== docReportParam && curReportDoc !== PS)
	{
		curReportDoc = OpenNewDoc( 'x-local://wtv/wtv_custom_report.xmd' );
		curReportDoc.TopElem.AssignElem(docReportParam.TopElem);
	}

	if (PS != undefined && PS != null)
	{
		if (ObjectType(PS) == 'JsObject')
		{
			curReportDoc.TopElem.condenseVolatileData(PS);
		}
		else
		{
			if (curReportDoc.TopElem !== PS)
			{
				curReportDoc.TopElem.AssignElem(PS);
			}
		}
	}

	if (!curReportDoc.TopElem.object_name.HasValue || ArrayCount(curReportDoc.TopElem.columns) == 0)
		return null;

	var sTaskID = ms_tools.init_task( ({
			'title': curReportDoc.TopElem.name.Value,
			'progress_title': 'Инициализация отчета',
			'progress_max': 1
		}), 10 );

	var oRes = new Object;
	var teTaskInfo = ms_tools.check_task( sTaskID, oRes );
	if ( teTaskInfo == null )
		return null;


	curReportDoc.TopElem.report_result_date.Clear();

	curReportDoc.TopElem.performance_launch_time.Clear();
	curReportDoc.TopElem.performance_search_time.Clear();
	curReportDoc.TopElem.performance_process_time.Clear();

	try
	{
		if (DataType(sLngSHORT) == 'string')
			curReportDoc.TopElem.view_temp.cur_lng = sLngSHORT;
	}
	catch(_aaa_)
	{
		///
	}

	try
	{
		bMetaOnly;
	}
	catch(_x_)
	{
		bMetaOnly = false;
	}

	teTaskInfo.start_date = CurDate;
	teTaskInfo.status = 'process';

	tools_web.set_user_data( 'task_' + sTaskID, ({ 'teTaskInfo': teTaskInfo.GetXml( { 'tabs': false, 'DocHeader': true } ) }), null );

	oRes = curReportDoc.TopElem.build_report_v2( sTaskID, bMetaOnly );
	//alert(curReportDoc.TopElem.report_result.Xml);

//	curReportDoc.Save();

	//UpdateUiDoc(curReportDoc);


	//progress.CurrentItemIndex = 1;

	return ms_tools.return_progress_info( sTaskID, ({
		'status': ( oRes.error &gt; 0 ? 'cancel' : 'complete' ),
		'progress_text': 'Построение отчета завершено',
		'result': oRes.i,
		'error': 0,
		'error_text': ''
	}) );


	//return curReportDoc;

"/>


<get_sub_hierarchy PROPERTY="1" PARAM="NODE_ID" PARAM="NODE_CATALOG" PARAM="NODE_PARENT_FIELD" EXPR="

	if (!LdsIsServer)
	{
		_pack = XQuery(NODE_CATALOG + 's');
	}
	else
	{
		_pack = null;
	}


	function get_kids( elem, _arr )
	{
		_new_arr = Array();
		_new_arr[0] = elem;
		_new_arr = ArrayUnion(_arr, _new_arr);

		//_new_arr = ArrayUnion( _new_arr, _arr); /////// В обратном порядке!

		if (_pack == null)
		{
			try
			{
				_array = XQuery(   'for $el in ' + NODE_CATALOG +'s where $el/' + NODE_PARENT_FIELD +' = ' + elem.id + ' return $el'  ) ;
			}
			catch(_npf_broken_)
			{
				//NODE_PARENT_FIELD - лажовый
				_array = Array();
			}
		}
		else
		{
			if (ArrayCount(_pack) > 0)
			{
				if (_pack[0].ChildExists(NODE_PARENT_FIELD))
					_array = ArraySelect(_pack , (NODE_PARENT_FIELD + ' == elem.id'));
			}

		}

		for (_a in _array)
		{
			_new_arr = get_kids( _a, _new_arr);
		}



		return _new_arr;
	}


	try
	{
		if (NODE_ID == '' || NODE_CATALOG == '') return Array();
	}
	catch(_x_)
	{
		return Array();
	}

	try
	{
		NODE_PARENT_FIELD;
	}
	catch(_x_)
	{
		NODE_PARENT_FIELD = 'parent_object_id';
	}


	_node_elem = ArrayFirstElem(XQuery( 'for $el in ' + NODE_CATALOG +'s where $el/id = ' + NODE_ID + ' return $el'  ));


	return get_kids( _node_elem, Array() );


"/>


<process_print_form PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" CALLER-ENV="1" PARAM="oFormParam" PARAM="iTopElemParam" PARAM="bReturnFilename" PARAM="TopElemParam" EXPR="
	try
	{
		DocID = Int( iTopElemParam );
		docTopElem = OpenDoc( UrlFromDocID( iTopElemParam ) );
		TopElem = docTopElem.TopElem;
	}
	catch ( err )
	{
		try
		{
			TopElem;
			DocID;
		}
		catch ( e )
		{
			try
			{
				TopElemParam.Name;
				TopElem = TopElemParam;
				DocID = null;
			}
			catch ( e )
			{
				TopElem = null;
				DocID = null;
			}
		}
	}
	try
	{
		bReturnFilename
	}
	catch ( err )
	{
		bReturnFilename = false
	}

	function get_temp_url( sSuffix, bTrashDir  )
	{
		if( bTrashDir )
			return 'x-local://trash/temp/' + tools.random_string( 10 ) + sSuffix;
		else
			return  ObtainTempFile( sSuffix )
	}

	temp_iFormID = OptInt( oFormParam );
	if ( temp_iFormID != undefined )
	{
		temp_teForm = OpenDoc( UrlFromDocID( temp_iFormID ) ).TopElem;
		temp_sRes = Trim( temp_teForm.data.GetStr() );
		if ( temp_teForm.file_encoding != 'utf-8' )
			temp_sRes = DecodeCharset( temp_sRes, temp_teForm.file_encoding );

		temp_sTempUrl = '';
		switch ( temp_teForm.type )
		{
			case 'word':
				var temp_oLib = tools.get_object_assembly( 'Word' );
				temp_sTempUrlV = get_temp_url( '.docx', false );
				PutUrlData( temp_sTempUrlV, temp_sRes );
				temp_oLib.Open( UrlToFilePath( temp_sTempUrlV ) );
				temp_arrBookmarks = String( temp_oLib.GetBookmarks() ).split( ';' );
				for( temp_sBookmarkName in temp_arrBookmarks )
				{
					temp_sCode = String( temp_oLib.GetBookmarkText( temp_sBookmarkName ) );
					if( temp_sCode.charAt(0) == '=')
					{
						temp_sCode = temp_sCode.substr( 1 );
						if( temp_sCode.charAt(0) == '=')
						{
							temp_sCode = temp_sCode.substr( 1 );
							temp_oLib.SetBookmarkText( temp_sBookmarkName, eval( temp_sCode ) );
						}
						else
						{
							temp_oLib.SetBookmarkHtml( temp_sBookmarkName, eval( temp_sCode ) );
						}
					}
				}
				temp_oLib.Save();
				temp_sTempUrl = get_temp_url( '.docx', bReturnFilename );
				CopyUrl( temp_sTempUrl, temp_sTempUrlV );
				break;

			case 'pdf':
				temp_sFileSuffix = UrlPathSuffix( temp_teForm.file_name );
				if ( temp_sFileSuffix == '.html' || temp_sFileSuffix == '.htm' )
				{
					temp_iOrientation = 0;
					if (temp_teForm.orientation == 1)
					{
						temp_iOrientation = 1;
					}

					temp_sRes = EvalCodePage( temp_sRes );
					temp_sTempUrl = get_temp_url( '.pdf', bReturnFilename );
					tools.html_to_pdf( temp_sRes, '', UrlToFilePath( temp_sTempUrl ), temp_iOrientation );
				}
				break;

			case 'word_pdf':
				var temp_oLib = null;
				var bOldPrint = true;

				temp_sTempUrlV = get_temp_url( '.docx', false );
				PutUrlData( temp_sTempUrlV, temp_sRes );

				try
				{
					temp_oLib = new ActiveXObject('Websoft.Office.Word.Document');
					temp_oLib.Open( UrlToFilePath( temp_sTempUrlV ) );
				}
				catch (_Sdrt_)
				{
					temp_oLib = tools.get_object_assembly( 'Word' );
					bOldPrint = false;
					temp_oLib.Open( UrlToFilePath( temp_sTempUrlV ) );
				}

				temp_arrBookmarks = String( temp_oLib.GetBookmarks() ).split( ';' );
				for( temp_sBookmarkName in temp_arrBookmarks )
				{
					temp_sCode = String( temp_oLib.GetBookmarkText( temp_sBookmarkName ) );
					if( temp_sCode.charAt(0) == '=')
					{
						temp_sCode = temp_sCode.substr( 1 );
						if( temp_sCode.charAt(0) == '=')
						{
							temp_sCode = temp_sCode.substr( 1 );
							temp_oLib.SetBookmarkText( temp_sBookmarkName, eval( temp_sCode ) );
						}
						else
						{
							temp_oLib.SetBookmarkHtml( temp_sBookmarkName, eval( temp_sCode ) );
						}
					}
				}
				if ( bOldPrint )
				{
					temp_sTempUrl = get_temp_url( '.pdf', bReturnFilename );
					temp_oLib.SaveAs( UrlToFilePath( temp_sTempUrl ) );
				}
				else
				{
					temp_oLib.Save();
					temp_sTempUrl = get_temp_url( '.docx', bReturnFilename ); alert( temp_sTempUrl );
					CopyUrl( temp_sTempUrl, temp_sTempUrlV );
				}
				break;

			default:

				temp_sRes = EvalCodePage( temp_sRes );
				if( bReturnFilename )
				{
					fldType = temp_teForm.type.ForeignElem;
					temp_sTempUrl = get_temp_url( '.' + fldType.extension, bReturnFilename );
					PutUrlData( temp_sTempUrl, temp_sRes );
				}
				break;
		}
		if ( temp_sTempUrl != '' )
		{
			if( bReturnFilename )
			{
				return temp_sTempUrl
			}
			else
			{
				temp_sRes = LoadUrlData( temp_sTempUrl );
				try
				{
					DeleteUrl( temp_sTempUrl );
				}
				catch ( err )
				{
				}
			}
		}
	}
	else
	{
		if ( StrContains( oFormParam, '../' ) || StrContains( oFormParam, '..\\' ) )
			throw 'Form is not correct.';

		temp_sRes = LoadUrlText( UrlAppendPath( 'x-local://templates/', oFormParam ) );
		temp_sRes = EvalCodePage( temp_sRes );
	}

	return temp_sRes;
"/>





<get_user_boss PROPERTY="1" PARAM="OBJECT" EXPR="

	function find_func_executive(COL_DOC)
	{
		_ruk = ArrayOptFindByKey( COL_DOC.func_managers, true, 'is_native' );

		if ( _ruk != undefined )
			return _ruk.PrimaryKey.OptForeignElem;
		else
			return undefined;
	}

	try
	{
		ODoc = OBJECT.TopElem;
		OID = OBJECT.DocID;
	}
	catch(_nea_)
	{
		try
		{
			ODoc = OpenDoc(UrlFromDocID(Int(OBJECT))).TopElem;
			OID = Int(OBJECT);
		}
		catch(_opyat_nea_)
		{
			return undefined;
		}
	}

	switch (ODoc.Name)
	{
		case 'collaborator':
			_bc = find_func_executive(ODoc);
			if (_bc != undefined)
				return _bc;

			try
			{
				_parent_object = ODoc.position_id.ForeignElem.parent_object_id.ForeignElem;
			}
			catch(_x_)
			{
				return undefined;
			}
			_position_id = ODoc.position_id;
			_parent_object_id = ODoc.position_id.ForeignElem.parent_object_id;
		break;

		case 'position':

			try
			{
				_bc = find_func_executive(OpenDoc(UrlFromDocID(ODoc.basic_collaborator_id)).TopElem );
			}
			catch(_af_)
			{
				_bc = undefined;
			}

			if (_bc != undefined)
				return _bc;


			try
			{
				_parent_object = ArrayFirstElem(XQuery('for $sub in subdivisions where $sub/id = ' + ODoc.parent_object_id + ' return $sub'));
			}
			catch(_x_)
			{
				return undefined;
			}

			_position_id = OID;
			_parent_object_id = ODoc.parent_object_id;

		break;

		case 'subdivision':

			_parent_object = ODoc;
			_parent_object_id = OID;
			_position_id = undefined;
		break;

		default:
			return undefined;
	}

	_locker_blocker = 0;
	_held_parent = undefined;

	while (_parent_object != undefined &amp;&amp; _locker_blocker &lt; 20)
	{
		_held_parent = _parent_object;

		query = 'for $position in positions';
		query = query + ' where $position/parent_object_id = ' + _parent_object_id;
		if(ODoc.Name != 'subdivision')
			query = query + ' and $position/id != ' + _position_id;

		_temp_positions = XQuery( query + ' return $position');

		for (_temp_position in _temp_positions)
		{
			if (_temp_position.is_boss)
			{
				return _temp_position.basic_collaborator_id.OptForeignElem;
			}

		}
		_locker_blocker++;
		_parent_object_id = _parent_object.parent_object_id;
		_parent_object = _parent_object.parent_object_id.OptForeignElem;

	}

	if (_held_parent != undefined &amp;&amp; _parent_object==undefined &amp;&amp; _held_parent.org_id.HasValue)
	{
		query = 'for $position in positions';
		query = query + ' where $position/parent_object_id = null() and $position/org_id = ' + _held_parent.org_id + ' and $position/is_boss = true() return $position';

		_temp_position = ArrayOptFirstElem(XQuery( query ));
		if (_temp_position!= undefined)
			return _temp_position.basic_collaborator_id.OptForeignElem;
	}


	return undefined;


"/>



	<path_subs_filling PROPERTY="1" PARAM="_path_subs" PARAM="_person_id" PARAM="_person_doc" EXPR="
			try
			{
				if ( _person_doc == null || _person_doc == '' )
					throw 'no_doc';

				personDoc = _person_doc;
			}
			catch ( ee )
			{
				personDoc = OpenDoc( UrlFromDocID( _person_id ) ).TopElem;
			}

			_path_subs.AssignElem( personDoc.filling_path_subs() );
			return _path_subs;
	"/>


	<str_time_from_mseconds PROPERTY="1" PARAM="_mseconds" EXPR="
			_mseconds = Real( StrInt( _mseconds ) );
			return StrInt( _mseconds / 3600000, 2 ) + ':' + StrInt( ( _mseconds % 3600000 ) / 60000, 2 ) + ':' + StrInt( ( _mseconds % 60000 ) / 1000, 2 ) + ( ( _mseconds % 1000 ) > 0 ? '.' + ( _mseconds % 1000 ) : '' );
	"/>


<!--  START © 2008 by Tatiyana Dobrinina   -->


	<person_list_staff_by_person_id PROPERTY="1" PARAM="_personID" PARAM="_personDoc" PARAM="_depth" PARAM="_top" PARAM="_separator" EXPR="
			/*
				Возвращает строку с полным штатным расписанием (без должности!)
				PERSON_ID - ID сотрудника
				DEPTH - глубина штатного расписания, число, показывающее длину цепочки штатного расписания.
				                 Если DEPTH=0, то показывается полная цепочка штатного расписания.
				TOP - параметр расчета длины штатного расписания.
	            Если TOP=1, то длина штатного расписания расчитывается 'сверху', т.е. от организации.
	            Если TOP=0, то длина штатного расписания расчитывается 'снизу', т.е. от должности сотрудника.
				SEPARATOR - строка - разделитель. Если указана пустая строка '', по умолчанию используется разделитель ' -> '
			*/
			try
			{
				_personDoc.fullname;
			}
			catch(err)
			{
				try
				{
					_personDoc = OpenDoc(UrlFromDocID( Int(_personID) )).TopElem;
				}
				catch(err)
				{
					return ms_tools.get_const('xcbaunam4n');
				}
			}

			try
			{
				_depth = Int(_depth);
			}
			catch(err)
			{
				_depth = 0;
			}
			try
			{
				_direction=_top;
			}
			catch(err)
			{
				_direction = '0';
			}
			try
			{
				temp=_separator;
			}
			catch(err)
			{
				_separator='->';
			}

/*	ЗАПОЛНЕНИЕ МАССИВА Штатного расписания*/
			path_subsArray = Array();
			subs_counter = 0;
			try
			{
				depthCounter = 0;
				_parent_id = _personDoc.position_parent_id;
				do
				{
					curParent = ArrayFirstElem( XQuery('for $elem in subs where $elem/id=' + _parent_id + ' return $elem') );

					_child = new Object;
					_child.id = curParent.id;
					_child.type = curParent.type;
					_child.name = curParent.name;
					_child.parent_id = curParent.parent_id;
					path_subsArray[subs_counter] = _child;
					subs_counter++;

					_parent_id = curParent.parent_id;
					depthCounter++;
				} while( _parent_id != null &amp;&amp; depthCounter &lt; 50 )
			}
			catch ( dd )
			{
			}

			_result = '';
			if (_separator == '')
				_separator = ' -> ';

			if ( _depth == 0 )
			{
				for ( i=ArrayCount( path_subsArray )-1; i>=0; i=i-1 )
					_result = _result + (i==ArrayCount( path_subsArray )-1 ? '' : _separator ) +  path_subsArray[i].name;
			}
			else
			{
				switch ( _direction )
				{
					case '1':
						for ( i=0; i<ArrayCount( path_subsArray )&&i<= _depth ; i++ )
							_result = _result + (i==0 ? '' : _separator ) +  path_subsArray[i].name;
						break;

					case '0':
						_start_index = _depth - 1;
						if ( _start_index < 0 )
							_start_index = 0;
						if ( _start_index  >  ArrayCount( path_subsArray )-1 )
							_start_index = ArrayCount( path_subsArray )-1;
						for ( i=_start_index; i>=0; i=i-1 )
							_result = _result + (i==_start_index ? '' : _separator ) +  path_subsArray[i].name;
						break;
					default:
						_start_index = _depth - 1;
						if ( _start_index < 0 )
							_start_index = 0;
						if ( _start_index  >  ArrayCount( path_subsArray )-1 )
							_start_index = ArrayCount( path_subsArray )-1;
						for ( i=_start_index; i>=0; i=i-1 )
							_result = _result + (i==_start_index ? '' : _separator ) +  path_subsArray[i].name;
						break;
				}
			}
			return 	_result;
	"/>

	<convert_email_from_x40 PROPERTY="1" PARAM="_x40_email" PARAM="_end_mail" EXPR="
			try
			{
				_login = _x40_email.slice( _x40_email.lastIndexOf('/PN:')+4 );
				_domen = _x40_email.slice( _x40_email.indexOf('/PRMD:')+6, _x40_email.indexOf('/', _x40_email.indexOf('/PRMD:')+6 ) );
				return _login + '@' + _domen + _end_mail;
			}
			catch(err)
			{
				return '';
			}
	"/>

<!-- END  © 2008 by Tatiyana Dobrinina   -->
<!-- START by Maria Bukina -->

	<add_person_to_assessment_appraise PROPERTY="1" PARAM="_person_id" PARAM="_assessment_appraise_id" PARAM="_person_doc" PARAM="_doc_assessment_appraise" EXPR="
			try
			{
				if ( _person_doc == null || _person_doc == '' )
					throw 'no_person_doc';
				personDoc = _person_doc;
			}
			catch ( ee )
			{
				personDoc = OpenDoc( UrlFromDocID( _person_id ) ).TopElem;
			}
			try
			{
				if ( _doc_assessment_appraise == null || _doc_assessment_appraise == '' )
					throw 'no_assessment_appraise_doc';
				docAssessmentAppraise= _doc_assessment_appraise;
			}
			catch ( ee )
			{
				docAssessmentAppraise = OpenDoc( UrlFromDocID( _assessment_appraise_id ) );
			}
			if ( docAssessmentAppraise.TopElem.auditorys.ChildByKeyExists( _person_id ) )
			{
					return null;
			}
			newPerson = docAssessmentAppraise.TopElem.auditorys.AddChild();
			newPerson.person_id = _person_id;
			tools.common_filling( 'collaborator', newPerson, _person_id, personDoc );
			docAssessmentAppraise.Save();
			return docAssessmentAppraise;
	"/>
<!-- END by Maria Bukina -->



	<get_tag_cloud PROPERTY="1" EXPR="
			_objes = XQuery('for $elem in knowledge_parts where $elem/tags != \'\' return $elem');

			_tagArray = Array();
			for (_o in _objes)
			{
				_tagArray = ArrayUnion( _tagArray, String(_o.tags).split(';') );
			}

			/*
			_tagArray = ArraySort(_tagArray, 'This' ,'+');

			for (_i = 0; _i &lt; ArrayCount(_tagArray); _i++)
			{
				if (_i &gt; 0)
					if (_tagArray[_i-1] == _tagArray[_i])
						_tagArray[_i-1] = '';
			}
			*/

			for (_i = 0; _i &lt; ArrayCount(_tagArray); _i++)
			{
				if (ArrayCount(ArraySelect(_tagArray , 'This == _tagArray[_i]')) &gt; 1)
				{
					_tagArray[_i] = '';
				}
			}
			return ArraySort( ArraySelect(_tagArray, 'This != \'\'') , 'This', '+');
	"/>

	<check_field_name PROPERTY="1" PARAM="FIELD" PARAM="IS_STRICT_BEGIN" EXPR="
		try
		{
			FIELD = StrLowerCase(String(FIELD));

			if (StrLen(FIELD) == 0)
				throw 'empty!';
		}
		catch(_laza_)
		{
			return false;
		}

		try
		{
			if (IS_STRICT_BEGIN) IS_STRICT_BEGIN = true; else IS_STRICT_BEGIN = false;
		}
		catch(_laza_)
		{
			IS_STRICT_BEGIN = false;
		}



		if (IS_STRICT_BEGIN)
		{
			_cc = String(FIELD).charCodeAt(0);
			if (_cc < 97 ||  _cc > 122)
				return false;

			_i = 1;
		}
		else
			_i = 0;

		for (_n = _i; _n < StrLen(FIELD); _n++)
		{
			_cc = String(FIELD).charCodeAt(_n);
			if (_cc &gt;= 97 &amp;&amp; _cc &lt;= 122)
				continue;
			else if (_cc &gt;= 48 &amp;&amp; _cc &lt;= 57)
				continue;
			else if (_cc == 95)
				continue;
			else
				return false;
		}

		return true;
	"/>


	<get_doc_type_xmds PROPERTY="1" PARAM="iDocTypeIDParam" PARAM="teDocTypeParam" EXPR="
			try
			{
				if ( teDocTypeParam == null || teDocTypeParam == undefined )
					throw 'no_doc';
			}
			catch ( err )
			{
				teDocTypeParam = OpenDoc( UrlFromDocID( iDocTypeIDParam ) ).TopElem;
			}

			MY_PRETTY_XMD = tools.xml_header() + '\n';
			MY_PRETTY_XMD += '&lt;SPXML-FORM&gt;\n';
			MY_PRETTY_XMD += '&lt;USE FORM=&quot;//wtv/wtv_general.xmd&quot;/&gt;\n';

			MY_PRETTY_XMD += '&lt;' + teDocTypeParam.object_name + '&gt;\n';

			MY_PRETTY_XMD += '\t&lt;id TYPE=&quot;integer&quot; TITLE=&quot;ID&quot;/&gt;\n\t&lt;access&gt;\n\t\t&lt;INHERIT TYPE=&quot;access_doc_base&quot;/&gt;\n\t&lt;/access&gt;\n';

			_hier_field = ArrayOptFind(teDocTypeParam.fields, 'type == \'foreign_elem\' &amp;&amp; flag_extended == true &amp;&amp; catalog ==\'' + teDocTypeParam.object_name + '\' &amp;&amp; in_catalog == true');

			MY_PRETTY_CATALOG = tools.xml_header() + '\n';
			MY_PRETTY_CATALOG += '&lt;SPXML-FORM DOC-LIST=&quot;1&quot; OBJECT-NAME=&quot;' + teDocTypeParam.object_name + '&quot;' + (_hier_field != undefined ? ' HIER=&quot;1&quot; PARENT-ID-ELEM=&quot;' + _hier_field.name + '&quot;': '') + '&gt;\n';
			MY_PRETTY_CATALOG += '&lt;' + teDocTypeParam.object_name + 's&gt;\n&lt;' + teDocTypeParam.object_name + ' MULTIPLE=&quot;1&quot; PRIMARY-KEY=&quot;id&quot;&gt;\n';
			MY_PRETTY_CATALOG += '\t&lt;id TYPE=&quot;integer&quot; INDEXED=&quot;1&quot; TITLE=&quot;ID&quot;/&gt;\n';

			var bTranslatable = false;
			var sFieldTitle;

			for (_field in teDocTypeParam.fields)
			if (_field.type != 'heading')
			if (_field.is_multiple)
			{
				sFieldTitle = _field.title;
				MY_PRETTY_XMD += '\t&lt;' +_field.name+ 's&gt;\n';
				MY_PRETTY_XMD += '\t\t&lt;' +_field.name  + ' TITLE=&quot;' + sFieldTitle + '&quot;' + (_field.type == 'foreign_elem'? ' PRIMARY-KEY=&quot;'+_field.name+'_id&quot;' : '') +' MULTIPLE=&quot;1&quot;&gt;\n';
				if(_field.type == 'foreign_elem')
				{
					MY_PRETTY_XMD += '\t\t\t&lt;'+_field.name+'_id TYPE=&quot;integer&quot; FOREIGN-ARRAY=&quot;' + _field.catalog + 's&quot;/&gt;\n';
				}
				for (_sub_field in _field.sub_fields)
				if (_sub_field.type != 'heading')
				{
					sFieldTitle = _sub_field.title;
					switch (_sub_field.type)
					{
						case 'integer':
						case 'real':
						case 'bool':
							MY_PRETTY_XMD += '\t\t\t&lt;' + _sub_field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;'  + ' TYPE=&quot;' + _sub_field.type + '&quot;' + (_sub_field.type == 'bool' ? ' NOT-NULL=&quot;1&quot; DEFAULT=&quot;false&quot;': '') + '/&gt;\n';
							break;
						case 'date':
							MY_PRETTY_XMD += '\t\t\t&lt;' + _sub_field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;'  + ' TYPE=&quot;' + _sub_field.type + '&quot; TIME=&quot;' + (_sub_field.flag_extended ? 1 : 0) + '&quot;/&gt;\n';
							break;
						case 'foreign_elem':
						case 'file':
							MY_PRETTY_XMD += '\t\t\t&lt;' + _sub_field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;'  + ' TYPE=&quot;integer&quot; FOREIGN-ARRAY=&quot;' + _sub_field.catalog + 's&quot;/&gt;\n';
							break;
						default:
							MY_PRETTY_XMD += '\t\t\t&lt;' + _sub_field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;'  + ' TYPE=&quot;string&quot;/&gt;\n';
							break;
					}
				}

				MY_PRETTY_XMD += '\t\t&lt;/' +_field.name+ '&gt;\n';
				MY_PRETTY_XMD += '\t&lt;/' +_field.name+ 's&gt;\n';
			}
			else
			{
				sFieldTitle = _field.title;
				switch (_field.type)
				{
					case 'integer':
					case 'real':
					case 'bool':
						MY_PRETTY_XMD += '\t&lt;' + _field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;' + ' TYPE=&quot;' + _field.type + '&quot;' + (_field.type == 'bool' ? ' NOT-NULL=&quot;1&quot; DEFAULT=&quot;false&quot;': '') + '/&gt;\n';
						if (_field.in_catalog)
							MY_PRETTY_CATALOG += '\t&lt;' + _field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;' + ' TYPE=&quot;' + _field.type + '&quot;' + (_field.indexed ? ' INDEXED=&quot;1&quot;': '') + '/&gt;\n';
						break;
					case 'date':
						MY_PRETTY_XMD += '\t&lt;' + _field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;' + ' TYPE=&quot;' + _field.type + '&quot; TIME=&quot;' + (_field.flag_extended ? 1 : 0) + '&quot;/&gt;\n';
						if (_field.in_catalog)
							MY_PRETTY_CATALOG += '\t&lt;' + _field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;' + ' TYPE=&quot;' + _field.type + '&quot;' + (_field.indexed ? ' INDEXED=&quot;1&quot;': '') + ' TIME=&quot;' + (_field.flag_extended ? 1 : 0) + '&quot;/&gt;\n';
						break;
					case 'foreign_elem':
						MY_PRETTY_XMD += '\t&lt;' + _field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;' + ' TYPE=&quot;integer&quot; FOREIGN-ARRAY=&quot;' + _field.catalog + 's&quot;/&gt;\n';
						if (_field.in_catalog)
							MY_PRETTY_CATALOG += '\t&lt;' + _field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;' + ' TYPE=&quot;integer&quot; FOREIGN-ARRAY=&quot;' + _field.catalog + 's&quot;' + (_field.indexed ? ' INDEXED=&quot;1&quot;': '') + '/&gt;\n';
						break;

					case 'text':
						MY_PRETTY_XMD += '\t&lt;' + _field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;' + ' TYPE=&quot;string&quot; STORE-SECTION=&quot;cdata&quot;'
						if (_field.translatable.Value)
						{
							MY_PRETTY_XMD += ' x-localization=&quot;string&quot;';
							bTranslatable = true;
						}
						MY_PRETTY_XMD += '/&gt;\n';
						break;
					case 'list':
						MY_PRETTY_XMD += '\t&lt;' + _field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;' + '&gt;&lt;' +_field.name+ '_elem MULTIPLE=&quot;1&quot; PRIMARY-KEY=&quot;value&quot;&gt;&lt;value TYPE=&quot;string&quot;/&gt;&lt;/' +_field.name+ '_elem&gt;&lt;/' +_field.name+ '&gt;';
						break;
					default:
						MY_PRETTY_XMD += '\t&lt;' + _field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;' + ' TYPE=&quot;string&quot;'
						if (_field.translatable.Value)
						{
							bTranslatable = true;
							MY_PRETTY_XMD += ' x-localization=&quot;' +(_field.type == 'file' ? 'resource' : 'string')+ '&quot;';
						}
						MY_PRETTY_XMD += '/&gt;\n';
						if (_field.in_catalog)
							MY_PRETTY_CATALOG += '\t&lt;' + _field.name + ' TITLE=&quot;' + sFieldTitle + '&quot;' + ' TYPE=&quot;string&quot;' + (_field.indexed ? ' INDEXED=&quot;1&quot;': '') + '/&gt;\n';
						break;
				}
			}
			MY_PRETTY_CATALOG += '\t&lt;modification_date TYPE=&quot;date&quot; INDEXED=&quot;1&quot; TITLE=&quot;' + ms_tools.get_const('n6k2nxsxx4') + '&quot;/&gt;\n';
			MY_PRETTY_CATALOG += '\t&lt;app_instance_id TYPE=&quot;string&quot; TITLE=&quot;' + ms_tools.get_const('8qorpy64yd') + '&quot;/&gt;\n';

			MY_PRETTY_XMD += '\t&lt;doc_info TYPE=&quot;doc_info_base&quot;/&gt;\n';

			MY_PRETTY_XMD += '\t&lt;doc_type_himself TYPE=&quot;variant&quot; TEMP=&quot;1&quot;/&gt;\n';

			MY_PRETTY_XMD += '\t&lt;view TEMP=&quot;1&quot;&gt;\n\t\t&lt;INHERIT TYPE=&quot;desc_base&quot;/&gt;\n\t&lt;/view&gt;\n';

			if (bTranslatable)
				MY_PRETTY_XMD += '\t&lt;INHERIT TYPE=&quot;cl_localizations_base&quot;/&gt;\n';

			MY_PRETTY_XMD += '&lt;/' + teDocTypeParam.object_name + '&gt;\n';

			MY_PRETTY_XMD += '&lt;DocDesc PROPERTY=&quot;1&quot; EXPR=&quot;\'' + ms_tools.get_const('49k8p9ildr') + ' ' + HtmlEncode(teDocTypeParam.name) + '\'&quot;/&gt;\n&lt;/SPXML-FORM&gt;';

			MY_PRETTY_CATALOG += '\n\t&lt;OnBuild PROPERTY=&quot;1&quot; EXPR=&quot;id.Parent.AssignElem( SrcDoc.TopElem );\nmodification_date = SrcDoc.TopElem.doc_info.modification.date;\napp_instance_id = SrcDoc.TopElem.doc_info.creation.app_instance_id;\n&quot;/&gt;\n'

			MY_PRETTY_CATALOG += '&lt;/' + teDocTypeParam.object_name + '&gt;\n&lt;/' + teDocTypeParam.object_name + 's&gt;\n&lt;/SPXML-FORM&gt;'

			return ({ 'catalog_form_str': MY_PRETTY_CATALOG, 'object_form_str': MY_PRETTY_XMD, 'hier_field': _hier_field });
	"/>

	<generate_doc_type_xmds PROPERTY="1" PARAM="DOC_TOPELEM" PARAM="DOC_ID" EXPR="
			try
			{
				if (DOC_TOPELEM.Name != 'doc_type')
					throw ms_tools.get_const('oxwq8v77g0');
				TopElem = DOC_TOPELEM;
			}
			catch(_oshibka_)
			{
				alert(ms_tools.get_const('96vokkii6m') + '\n' + _oshibka_);
				return false;
			}

			try
			{
				DOC_ID = Int(DOC_ID);
			}
			catch(_myaso_)
			{
				try
				{
					DOC_ID = TopElem.Doc.DocID;
				}
				catch(_mega_myaso_)
				{
					DOC_ID = 0;
				}
			}

//			if (LdsIsServer || TopElem.Doc.IsChanged)
			{

				if ( ! LdsIsServer &amp;&amp; TopElem.Doc.IsChanged &amp;&amp; ! ActiveScreen.MsgBox(ms_tools.get_const('z79bz5t71v'), ms_tools.get_const('jnsgglj3di'), 'question', 'yes,no'))
					return false;

				var sObjectName = Trim(TopElem.object_name);
				if (StrLen(sObjectName) &lt; 4 || StrLen(sObjectName) &gt; 30)
				{
					_error_txt = TopElem.name + ': ' + ms_tools.get_const('koddokumentane');
					if (LdsIsServer)
						alert(_error_txt);
					else
						ActiveScreen.MsgBox( _error_txt, ms_tools.get_const('c_error'), 'error', 'ok');
					return false;
				}

				if (!tools.check_field_name(sObjectName))
				{
					_error_txt = TopElem.name + ': ' + ms_tools.get_const('6qvhln3flt');
					if (LdsIsServer)
						alert(_error_txt);
					else
						ActiveScreen.MsgBox(_error_txt, ms_tools.get_const('c_error'), 'error', 'ok');
					return false;
				}

				if (StrEnds(sObjectName, 's'))
				{
					_error_txt = TopElem.name + ': ' + StrNonTitleCase( ms_tools.get_const('nazvanieobekta') );
					if (LdsIsServer)
						alert(_error_txt);
					else
						ActiveScreen.MsgBox(_error_txt, ms_tools.get_const('c_error'), 'error', 'ok');
					return false;
				}

				TopElem.object_name = StrLowerCase(sObjectName);

				_all_types = XQuery('for $elem in doc_types where $elem/code = \'' + TopElem.object_name + '\' return $elem/Fields(\'id\')');
				_doc_count = ArrayCount(_all_types);

				_failure = false;
				if (_doc_count > 1)
					_failure = true;
				else if (_doc_count == 1 &amp;&amp; ArrayFirstElem(_all_types).id != DOC_ID)
					_failure = true;

				if (_failure)
				{
					_error_txt = TopElem.name + ': ' + ms_tools.get_const('tipdokumentast');
					if (LdsIsServer)
						alert(_error_txt);
					else
						ActiveScreen.MsgBox(_error_txt, ms_tools.get_const('c_error'), 'error', 'ok');
					return false;
				}

				for (_field in TopElem.fields)
				{
					if (!tools.check_field_name(_field.name, true))
					{
						_error_txt = StrReplace( StrReplace( StrReplace( ms_tools.get_const('sb18jkkoa8'), '{PARAM1}', TopElem.name ), '{PARAM2}', _field.name ), '{PARAM3}', _field.ChildIndex );
						if (LdsIsServer)
							alert(_error_txt);
						else
							ActiveScreen.MsgBox( _error_txt, ms_tools.get_const('c_error'), 'error', 'ok' );
						return false;
					}

					if (!LdsIsServer)
					if (_field.type == 'foreign_elem' &amp;&amp; _field.catalog != TopElem.object_name)
					{
						if ( FindOptCatalog( _field.catalog + 's' ) == undefined )
						{
							_error_txt = StrReplace( StrReplace( StrReplace( ms_tools.get_const('xu877xege9'), '{PARAM1}', TopElem.name ), '{PARAM2}', _field.name ), '{PARAM3}', _field.ChildIndex );
							if (LdsIsServer)
								alert(_error_txt);
							else
								ActiveScreen.MsgBox(_error_txt, ms_tools.get_const('c_error'), 'error', 'ok');
							return false;
						}
					}

					if (_field.name == 'doc_info' || _field.name == 'modification_date' || _field.name == 'app_instance_id' || _field.name == 'disp_block' || _field.name == 'doc_type_himself' || _field.name == 'id' || _field.name == 'view' )
					{
						_error_txt = TopElem.name + ': Field &quot;' + _field.name + '&quot; (' + _field.ChildIndex + ') belongs to system and should not be used.';
						if (LdsIsServer)
							alert(_error_txt);
						else
							ActiveScreen.MsgBox(_error_txt, ms_tools.get_const('c_error'), 'error', 'ok');
						return false;
					}

					if (_field.is_multiple)
					for (_sub_field in _field.sub_fields)
					{
						if (tools.check_field_name(_sub_field.name, true) == 'false' || _sub_field.name == _field.name || _sub_field.name == _field.name + '_id')
						{
							_error_txt = TopElem.name + ': Field &quot;' + _field.name + '&quot; (' + _field.ChildIndex + '): Sub field (' +_sub_field.name+ ') have improper or reserved name';
							if (LdsIsServer)
								alert(_error_txt);
							else
								ActiveScreen.MsgBox(_error_txt, ms_tools.get_const('c_error'), 'error', 'ok');
						}
					}
				}

				if (ArrayCount(TopElem.fields) == 0)
				{
					_error_txt = TopElem.name + ': ' + ms_tools.get_const('dlyadannogotipa');
					if (LdsIsServer)
						alert(_error_txt);
					else
						ActiveScreen.MsgBox(_error_txt, ms_tools.get_const('7ey6j94yku'), 'warning', 'ok');
				}
				else
				{
					if (TopElem.disp_name + '' == '')
					{
						_error_txt = TopElem.name + ': ' + ms_tools.get_const('neukazanopolek');
						if (LdsIsServer)
							alert(_error_txt);
						else
							ActiveScreen.MsgBox(_error_txt, ms_tools.get_const('c_error'), 'error', 'ok');
						return false;
					}

					TopElem.is_hier = (ArrayOptFind(TopElem.fields, 'This.type == \'foreign_elem\' &amp;&amp; This.flag_extended == true &amp;&amp; This.catalog ==\'' + TopElem.object_name + '\' &amp;&amp; This.in_catalog == true') != undefined);


					if ( (tools.sys_db_capability & tools.UNI_CAP_BASIC) != 0 )
					{
						oXmds = tools.get_doc_type_xmds( DOC_ID, TopElem );
						if ( !LdsIsServer )
						{
							CallServerMethod('tools', 'put_url_text_server', ([('x-local://wt_data/x-local://udt/udt_' + TopElem.object_name + '.xmd'), RValue(oXmds.object_form_str)]));
							CallServerMethod('tools', 'put_url_text_server', ([('x-local://wt_data/x-local://udt/udc_' + TopElem.object_name + '.xmd'), RValue(oXmds.catalog_form_str)]));
						}
						else
						{
							PutUrlData( 'x-local://wt_data/x-local://udt/udt_' + TopElem.object_name + '.xmd', oXmds.object_form_str );
							PutUrlData( 'x-local://wt_data/x-local://udt/udc_' + TopElem.object_name + 's.xmd', oXmds.catalog_form_str );
						}
					}

					_error_txt = TopElem.name + ': ' + ms_tools.get_const('formadannyhsoz');
					if (LdsIsServer)
						alert(_error_txt);
					else if ( TopElem.Doc.IsChanged )
						ActiveScreen.MsgBox( _error_txt, ms_tools.get_const('khjwkahivj'), 'info', 'ok' );
				}

				if (TopElem.Doc.IsChanged) // && (tools.sys_db_capability & tools.UNI_CAP_AZURE) == 0)
					TopElem.is_crave_for_reboot = true;

				return true;

			}
			return true;
	"/>

	<register_doc_type PROPERTY="1" PARAM="docDocTypePARAM" PARAM="iDocIDParam" EXPR="
		var oReturn = new Object;
		oReturn.success = false;
		try
		{
			if (docDocTypePARAM.Name != 'doc_type')
				throw ms_tools.get_const('oxwq8v77g0');
		}
		catch(_oshibka_)
		{
			try
			{
				docDocTypePARAM = OpenDoc(UrlFromDocID(iDocIDParam));
			}
			catch(_x_)
			{
				if (LdsIsServer)
					alert('Register DocType Error: ' + _x_);
				return oReturn;
			}
		}

		var oXmds = tools.get_doc_type_xmds(iDocIDParam, docDocTypePARAM.TopElem);

		oReturn.object_form_url = 'x-local://udt/udt_' + docDocTypePARAM.TopElem.object_name.Value + '.xmd';
		oReturn.catalog_form_url = 'x-local://udt/udc_' + docDocTypePARAM.TopElem.object_name.Value + 's.xmd';
		oReturn.catalog_form_hash = Md5Hex(oXmds.catalog_form_str);
		oReturn.catalog = docDocTypePARAM.TopElem.object_name.Value;

		var bOldLock = null;

		try
		{
			if (LdsIsServer &amp;&amp; docDocTypePARAM.TopElem.is_crave_for_reboot.Value)
			{
				if ((tools.sys_db_capability &amp; tools.UNI_CAP_BASIC) != 0)
				{
					bOldLock = tools.upgrade_locked.Value;
					if (bOldLock)
						tools.set_upgrade_locked(false);

					//tools.spxml_unibridge.Object.provider.SetProviderConfigValue('UpgradeLocked','false',false);
				}
			}

			RegisterFormFromStr( oReturn.catalog_form_url, oXmds.catalog_form_str );
			var formObject = RegisterFormFromStr(oReturn.object_form_url, oXmds.object_form_str);

			if (LdsIsServer)
			{
				//DefaultDb.RegisterCatalog( oReturn.catalog_form_url );
				DefaultDb.RegisterObjectType( oReturn.object_form_url, formObject );

				//if ((tools.sys_db_capability & tools.UNI_CAP_AZURE) != 0)
				if (tools.in_place_upgrade)
				{
					tools.spxml_unibridge.Object.provider.UpdateMetaInformationIfModified(oReturn.catalog_form_url, 0, oXmds.catalog_form_str);
					tools.spxml_unibridge.Object.provider.UpdateMetaInformationIfModified(oReturn.object_form_url, 0, formObject.Xml);
				}
				if (bOldLock != null &amp;&amp; bOldLock != tools.upgrade_locked.Value)
				{
					tools.set_upgrade_locked(bOldLock);
				}
			}
		}
		catch(_x_)
		{
			tools.alert_server( 'Doc type [' + docDocTypePARAM.DocID + '] &quot;' + docDocTypePARAM.TopElem.object_name + '&quot; register error: ' + _x_ );
			return oReturn;
		}

		var fldAccessBlock = access_blocks.GetOptChildByKey(docDocTypePARAM.TopElem.disp_block.access_block_type);
		if (fldAccessBlock != undefined)
			fldAccessBlock.objects_access += docDocTypePARAM.TopElem.object_name + ',';

		if (!LdsIsServer)
		{
			docDocTypePARAM.TopElem.disp_block.custom_flag = docDocTypePARAM.TopElem.is_crave_for_reboot;
			tools.disp_block_filling( docDocTypePARAM.TopElem, docDocTypePARAM.TopElem.disp_block );
		}
		var _virus_exchange_object_type = common.exchange_object_types.ObtainChildByKey(docDocTypePARAM.TopElem.object_name);
		_virus_exchange_object_type.disp_name = docDocTypePARAM.TopElem.disp_name;
		_virus_exchange_object_type.title = docDocTypePARAM.TopElem.name;
		_virus_exchange_object_type.web_title = docDocTypePARAM.TopElem.name;
		if ( docDocTypePARAM.TopElem.custom_web_template_id.HasValue )
			_virus_exchange_object_type.web_template = 'view_doc.html?mode=doc_type';
		_virus_exchange_object_type.is_custom = true;
		_virus_exchange_object_type.form_url = oReturn.object_form_url;


		var _virus_view_type = view_types.ObtainChildByKey( docDocTypePARAM.TopElem.object_name );
		_virus_view_type.is_hier = docDocTypePARAM.TopElem.is_hier;
		_virus_view_type.row_image_url = '\'ico/doc.ico\'';

		var _fld, _column, _cur_type, _cataloged = ArraySelect(docDocTypePARAM.TopElem.fields, 'This.in_catalog==true &amp;&amp; This.hide_level &lt; 1 &amp;&amp; !StrContains(\'text;list;heading\', This.type) &amp;&amp; This.is_multiple != true' );

		for( _fld in _cataloged )
		{
			_column = _virus_view_type.columns.AddChild();
			if ( _fld.type == 'foreign_elem' )
			{
				_cur_type = common.exchange_object_types.GetOptChildByKey( _fld.catalog );
				if (_cur_type == undefined)
				{
					_cur_type = ArrayOptFirstElem(XQuery('for $elem in doc_types where $elem/object_name = ' +XQueryLiteral(_fld.catalog)+ ' return $elem/Fields(\'id\',\'disp_name\')'));

					if (_cur_type != undefined)
					{
						_cur_type = ({'disp_name': (_cur_type.disp_name.Value)});
						if (LdsIsServer)
							alert( StrReplace( StrReplace( 'tools.register_doc_type WARNING: document type {PARAM2} links to yet unregistered document type {PARAM1}. Registration on faith.', '{PARAM1}', _fld.catalog ), '{PARAM2}', docDocTypePARAM.TopElem.object_name ) );
					}

				}

				if ( _cur_type != undefined )
				{
					_column.order = _fld.name + '.ForeignElem.' + _cur_type.disp_name;
					_column.name = ( 'ListElem.' + _fld.name + '.HasValue?ListElem.' + _column.order + ':\'\'' );
				}
				else
				{
					if (LdsIsServer)
						alert( StrReplace( StrReplace( StrReplace( ms_tools.get_const('9haklhl3zz'), '{PARAM1}', _fld.catalog ), '{PARAM2}', _fld.title ), '{PARAM3}', docDocTypePARAM.TopElem.name ) );
					_column.name = 'ListElem.' + _fld.name;
					_column.order = _fld.name;
				}
			}
			else
			{
				_column.name = 'ListElem.' + _fld.name;
				_column.order = _fld.name;
			}
			_column.const = CodeLiteral( _fld.title );
			_column.width = Int( ( 100 / ArrayCount( _cataloged ) ) ) + '%';
		}
/*
		if ( ! LdsIsServer )
		{
			var _dsp_blk, _fetched_item, _disp_dt_obj;
			for (_dsp_blk in disp_object_blocks)
				if (_dsp_blk.ChildExists('doc_type'))
					for (_disp_dt_obj in ArraySelectAll(_dsp_blk.Child('doc_type').objects))
					{
						if (_disp_dt_obj.id.HasValue==false)
							_disp_dt_obj.Delete();
						_fetched_item = ArrayOptFirstElem( XQuery( 'for $elem in doc_types where $elem/id = ' + _disp_dt_obj.id + ' return $elem/Fields(\'id\',\'access_block_type\')' ) );
						if (_fetched_item == undefined)
							_disp_dt_obj.Delete();
						else if (_fetched_item.access_block_type != _dsp_blk.id)
							_disp_dt_obj.Delete();
					}
		}
*/
		oReturn.success = true;

		if (docDocTypePARAM.TopElem.is_crave_for_reboot.Value)
		{
			docDocTypePARAM.TopElem.is_crave_for_reboot = false;
			docDocTypePARAM.Save();
		}

		return oReturn;
	"/>

	<create_certificate_to_event PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_even_id" PARAM="_type_id" PARAM="_doc_event" PARAM="bCreateByNotAssist" EXPR="
			try
			{
				if ( _doc_event == null || _doc_event == '' || _doc_event == undefined)
					throw 'no_doc';

				docEvent = _doc_event;
			}
			catch ( ee )
			{
				docEvent = OpenDoc( UrlFromDocID( _even_id ) );
			}
			try
			{
				bCreateByNotAssist;
			}
			catch ( ee )
			{
				bCreateByNotAssist = false;
			}
			return docEvent.TopElem.create_certificate( _type_id, null, bCreateByNotAssist );
	"/>

	<create_certificate_to_person PROPERTY="1" PARAM="_person_id" PARAM="_type_id" PARAM="_event_id" PARAM="_person_doc" PARAM="_type_doc" PARAM="_event_doc" EXPR="
			try
			{
				if ( _event_id == null || _event_id == '' )
					throw 'no_id';

				eventID = Int( _event_id );
				try
				{
					if ( _event_doc == null || _event_doc == '' )
						throw 'no_doc';

					eventDoc = _event_doc;
				}
				catch ( eee )
				{
					eventDoc = OpenDoc( UrlFromDocID( eventID ) ).TopElem;
				}
			}
			catch ( ee )
			{
				eventID = null;
				eventDoc = null;
			}
			try
			{
				if ( _person_doc == null || _person_doc == '' )
					throw 'no_doc';

				personDoc = _person_doc;
			}
			catch ( ee )
			{
				personDoc = OpenDoc( UrlFromDocID( _person_id ) ).TopElem;
			}
			try
			{
				if ( _type_doc == null || _type_doc == '' )
					throw 'no_doc';

				serttypeDoc = _test_doc;
			}
			catch ( eee )
			{
				serttypeDoc = OpenDoc( UrlFromDocID( _type_id ) ).TopElem;
			}

			docCertificate = OpenNewDoc( 'x-local://wtv/wtv_certificate.xmd' );
			docCertificate.TopElem.person_id = _person_id;
			docCertificate.TopElem.type_id = _type_id;

			tools.common_filling( 'collaborator', docCertificate.TopElem, _person_id, personDoc );

			docCertificate.TopElem.AssignElem( serttypeDoc );
			docCertificate.TopElem.type_name = serttypeDoc.name;
			docCertificate.TopElem.delivery_date = Date();
			docCertificate.TopElem.update_expire_date();

			if ( eventID != null )
			{
				docCertificate.TopElem.event_id = eventID;
				docCertificate.TopElem.education_org_id = eventDoc.education_org_id;
			}

			docCertificate.BindToDb( DefaultDb );
			docCertificate.Save();

			return docCertificate;
	"/>


	<get_main_forum_entry_by_forum_entry_id PROPERTY="1" PARAM="iForumEntryParam" PARAM="teForumEntryParam" EXPR="
			try
			{
				if ( teForumEntryParam == null || teForumEntryParam == '' )
					throw 'no_param'
			}
			catch ( err )
			{
				teForumEntryParam = OpenDoc( UrlFromDocID( iForumEntryParam ) ).TopElem;
			}

			_deep_counter = 0;
			while ( teForumEntryParam != undefined &amp;&amp; teForumEntryParam.parent_forum_entry_id.HasValue &amp;&amp; _deep_counter &lt; 50 )
			{
				iForumEntryParam = teForumEntryParam.parent_forum_entry_id;
				teForumEntryParam = teForumEntryParam.parent_forum_entry_id.OptForeignElem;
				_deep_counter++;
			}
			return iForumEntryParam;
	"/>

	<assign_qualification_to_person PROPERTY="1" PARAM="_person_id" PARAM="_event_id" PARAM="_qualification_id" PARAM="_assignment_date" PARAM="_expiration_date" PARAM="_qualification_test_array" PARAM="_qualification_course_array" PARAM="_send_mail" PARAM="_in_process" PARAM="bAssignTestsParam" PARAM="bAssignCoursesParam" PARAM="bUnconditionalAssignmentParam" PARAM="_qualification_assignment_doc" PARAM="teQualification" PARAM="tePerson" PARAM="bGivePointParam" EXPR="
			/*
				Присвоение квалификаций
				1)  personID 	                    - id сотрудника ( обязательный )
				2)  eventID 		                - id мероприятия
				3)  qualificationID		            - id квалификации ( обязательный )
				4)  assignment_date		            - дата присвоения квалификации
				5)  expiration_date		            - дата истечения квалификации
				6)  qualification_test_array		- массив законченных тестов сотрудника из параметра 1, которые будут записаны в карточку присвоения квалификации
				7)  _qualification_course_array		- массив законченных электронных курсов сотрудника из параметра 1, которые будут записаны в карточку присвоения квалификации
				8)  _send_mail		                - числовое значение 0/1 – не отправлять/отправлять уведомление сотруднику о присвоении квалификации
				9)  _in_process	                    - числовое значение 0/1 – не присвоена/в процессе ( in_process, если не передан, то по умолчанию = 0 )
				10) bAssignTestsParam	            - булевое значение назначать/не назначать тесты сотруднику присвоенной квалификации, если она в статусе «В процессе»
				11) bAssignCoursesParam 	        - булевое значение назначать/не назначать курсы сотруднику присвоенной квалификации, если она в статусе «В процессе»
				12) bUnconditionalAssignmentParam   - булевое значение, если false и в статусе «В процессе» и не заданы или равны [] параметры 6 и 7  – будет проверять прохождение всех испытаний квалификации
				13) _qualification_assignment_doc   - документ присвоенной квалификации, меняется статус квалификации в зависимости от параметра 9
				14) teQualification                 - TopElem квалификации, если задан, то в коде не будет вызываться OpenDoc карточки квалификации, что ускорит работу функции
				15) tePerson                        - TopElem сотрудника, передается в параметрах функции при назначении теста/курса сотруднику
				16) bGivePointParam				    - начислять баллы квалификации (вкладка 'Бонус'), true если присвоение происходит из контекстного меню нитерфейса администратора
			*/
			try
			{
				personID = Int( _person_id );
				qualificationID = Int( _qualification_id );
			}
			catch( err )
			{
				return null;
			}

			try
			{
				eventID = Int( _event_id );
			}
			catch ( err )
			{
				eventID = null;
			}

			try
			{
				assignment_date = Date( _assignment_date );
			}
			catch( err )
			{
				assignment_date = null;
			}

			try
			{
				expiration_date = Date( _expiration_date );
			}
			catch( err )
			{
				expiration_date = null;
			}

			try
			{
				if ( ArrayOptFirstElem( _qualification_test_array ) != undefined )
				{
					qualification_test_array = _qualification_test_array;
				}
				else
				{
					throw 'empty array'
				}
			}
			catch( err )
			{
				qualification_test_array = Array();
			}

			try
			{
				if ( ArrayOptFirstElem( _qualification_course_array ) != undefined )
				{
					qualification_course_array = _qualification_course_array;
				}
				else
				{
					throw 'empty array'
				}
			}
			catch( err )
			{
				qualification_course_array = Array();
			}

			try
			{
				in_process = Int( _in_process );
			}
			catch( err )
			{
				in_process = 0;
			}

			try
			{
				send_mail = Int( _send_mail );
			}
			catch( err )
			{
				send_mail = in_process != 1;
			}

			try
			{
				bAssignTests = bAssignTestsParam ? true : false;
			}
			catch( err )
			{
				bAssignTests = false;
			}

			try
			{
				bAssignCourses = bAssignCoursesParam ? true : false;
			}
			catch( err )
			{
				bAssignCourses = false;
			}

			try
			{
				bUnconditionalAssignment = bUnconditionalAssignmentParam ? true : false;
			}
			catch( err )
			{
				bUnconditionalAssignment = false;
			}

			try
			{
				_qualification_assignment_doc;
			}
			catch( err )
			{
				_qualification_assignment_doc = null;
			}

			try
			{
				tePerson;
			}
			catch( err )
			{
				tePerson = null;
			}

			try
			{
				bGivePoint = bGivePointParam ? true : false;
			}
			catch( err )
			{
				bGivePoint = false;
			}

			try
			{
				oParams;
			}
			catch( err )
			{
				oParams = null;
			}

			curAssignedQualification = undefined;
			if ( _qualification_assignment_doc == null )
				curAssignedQualification = ArrayOptFirstElem( XQuery( 'for $obj in qualification_assignments where $obj/person_id = ' + personID + ' and $obj/qualification_id = ' + qualificationID + ' and $obj/status=&quot;assigned&quot; return $obj' ) );

			if ( curAssignedQualification == undefined )
			{
				bCreateNew = true;
				strWhere = '';

				if ( _qualification_assignment_doc == null )
				{
					curAssignedQualification = ArrayOptFirstElem( XQuery( 'for $obj in qualification_assignments where $obj/person_id = ' + personID + ' and $obj/qualification_id = ' + qualificationID + ' and $obj/status=&quot;in_process&quot; return $obj' ) );
					if ( curAssignedQualification != undefined )
					{
						docQualificationAssignment = OpenDoc( UrlFromDocID( curAssignedQualification.id ) );
						bCreateNew = false;
					}
					else
					{
						bCreateNew = true;
					}
				}
				else
				{
					docQualificationAssignment = _qualification_assignment_doc;
					bCreateNew = false;
				}

				if ( bCreateNew )
				{
					docQualificationAssignment = OpenNewDoc( 'x-local://wtv/wtv_qualification_assignment.xmd' );
					docQualificationAssignment.TopElem.person_id = personID;
					docQualificationAssignment.TopElem.qualification_id = qualificationID;
					docQualificationAssignment.BindToDb( DefaultDb );
				}

				docQualificationAssignment.TopElem.status = in_process == 1 ? 'in_process' : 'assigned';
				docQualificationAssignment.TopElem.event_id = eventID;
				tools.common_filling( 'collaborator', docQualificationAssignment.TopElem, personID, tePerson );

				try
				{
					if (teQualification == undefined || teQualification == null) {
						throw '';
					}
				}
				catch( err )
				{
					try
					{
						teQualification = OpenDoc( UrlFromDocID( qualificationID ) ).TopElem;
					}
					catch( err )
					{
						teQualification = null;
					}
				}

				if ( teQualification != null )
				{
					if ( in_process == 0 )
					{
						if ( !teQualification.test_on_hire )
						{
							if  ( assignment_date != null &amp;&amp; teQualification.days_for_check.HasValue )
							{
								dDate = RawSecondsToDate( ( DateToRawSeconds( assignment_date ) + ( teQualification.days_for_check ) * 86400 ) );
								dBorderDate = RawSecondsToDate( ( DateToRawSeconds( assignment_date ) - ( teQualification.days_for_check ) * 86400 ) );
								strWhere = ' and $elem/start_learning_date > date( &quot;' + DateNewTime( dBorderDate,00,00,00 ) + '&quot; )';
								if ( expiration_date == null )
								{
									expiration_date = DateNewTime( dDate,00,00,00 );
								}
							}
						}

						docQualificationAssignment.TopElem.assignment_date = Date(assignment_date);
						docQualificationAssignment.TopElem.expiration_date = expiration_date;

						if ( bUnconditionalAssignment == false &amp;&amp; ( ArrayOptFirstElem( qualification_test_array ) == undefined &amp;&amp; ArrayOptFirstElem( qualification_course_array ) == undefined ) )
						{
							rScaled = teQualification.get_scaled_progress( personID, {
								'assignment_date': Date(assignment_date),
								'check_course': true,
								'check_test': true,
								'check_edctn_method': bUnconditionalAssignment,
								'check_cmpnd_method': bUnconditionalAssignment,
								'check_qualifications': bUnconditionalAssignment,
								'check_eval_cndtns': bUnconditionalAssignment } );
							if ( rScaled < 100.0 ) return null;
						}
						else
						{
							for( _elem in qualification_test_array )
							{
								_child = docQualificationAssignment.TopElem.test_learnings.ObtainChildByKey( _elem );
							}

							for( _elem in qualification_course_array )
							{
								_child = docQualificationAssignment.TopElem.learnings.ObtainChildByKey( _elem );
							}
						}
					}

					if ( bAssignTests &amp;&amp; in_process == 1 )
					{
						for ( fldTest in teQualification.assessments )
						{
							fldAssessment = fldTest.assessment_id.OptForeignElem;
							if ( fldAssessment != undefined )
							{
								if ( Trim( strWhere ) != '' )
								{
									firsLearning = ArrayOptFirstElem( XQuery( 'for $elem in test_learnings where $elem/person_id = ' + personID + ' and $elem/assessment_id = ' + fldAssessment.id + strWhere + ' return $elem' ) );
									if ( firsLearning != undefined )
										continue;
								}
								iDuration = null;
								if ( fldAssessment.duration_days.HasValue)
									iDuration = fldAssessment.duration_days;

								tools.activate_test_to_person( personID , fldAssessment.id, eventID, tePerson, null, null, iDuration, DateNewTime( Date(), 00,00,00 ) );
							}
						}
					}

					if ( bAssignCourses &amp;&amp; in_process == 1 )
					{
						for ( fldQCourse in teQualification.courses )
						{
							fldCourse = fldQCourse.course_id.OptForeignElem;
							if ( fldCourse != undefined )
							{
								if ( Trim( strWhere )!='' )
								{
									firsLearning = ArrayOptFirstElem( XQuery( 'for $elem in learnings where $elem/person_id = ' + personID + ' and $elem/course_id = ' + fldCourse.id + strWhere + ' return $elem' ) );
									if ( firsLearning != undefined )
										continue;
								}
								iDuration = null;
								if ( fldCourse.duration.HasValue )
									iDuration = fldCourse.duration;

								tools.activate_course_to_person( personID ,  fldCourse.id, eventID, tePerson, null, null, iDuration, DateNewTime( Date(), 00,00,00 ) );
							}
						}
					}
				}

				docQualificationAssignment.Save();

				if ( bGivePoint &amp;&amp; docQualificationAssignment.TopElem.status == 'assigned' )
				{
					try
					{
						if ( teQualification == null )
							teQualification = OpenDoc( UrlFromDocID( qualificationID ) ).TopElem;
					}
					catch( err )
					{
					}
					if ( teQualification != null )
					{
						for ( fldBonusElem in teQualification.game_bonuss )
						{
							if ( fldBonusElem.currency_type_id.HasValue &amp;&amp; fldBonusElem.sum.HasValue )
								tools.pay_new_transaction_by_object( personID, fldBonusElem.currency_type_id, fldBonusElem.sum, 'Bonus by qualification &quot;' + teQualification.name + '&quot;.', qualificationID );
						}
					}
				}

				if ( send_mail != 0 )
				{
					try
					{
						tools.create_notification( '61', docQualificationAssignment.DocID );
					}
					catch ( err ) {}
				}

				ms_tools.raise_system_event_env( 'common_assign_qualification', {
					'iQualificationId': qualificationID,
					'curUser': tools.get_cur_user(),
					'curUserID': tools.cur_user_id,
					'docQualificationAssignment': docQualificationAssignment,
					'EventID':eventID
				});
			}
			else
			{
				docQualificationAssignment = OpenDoc( UrlFromDocID( curAssignedQualification.id ) );
			}
			return docQualificationAssignment;
	"/>


	<assign_qualification_to_event PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="_even_id" PARAM="_doc_event" PARAM="_qualification_id" PARAM="_date" EXPR="
			try
			{
				if ( _doc_event == null || _doc_event == '' )
					throw 'no_doc';

				docEvent = _doc_event;
			}
			catch ( ee )
			{
				docEvent = OpenDoc( UrlFromDocID( _even_id ) );
			}
			return docEvent.TopElem.assign_qualification(  _qualification_id, _date, null,1 );
	"/>

	<save_custom_ui_form PROPERTY="1" PARAM="TEMPLATE" EXPR="
			try
			{
				if (TEMPLATE.Name != 'custom_admin_template') throw 'baaaad!';
			}
			catch(_x_)
			{
				try
				{
					TEMPLATE = OpenDoc(UrlFromDocID(Int(TEMPLATE))).TopElem;
					if (TEMPLATE.Name != 'custom_admin_template') throw 'baaaad!';
				}
				catch(_o_)
				{
					return false;
				}
			}

			screenFormUrl = 'x-local://wt_data/custom_forms/uif/uif_'+TEMPLATE.form_name+'.xms';
			try
			{
				DeleteUrl(screenFormUrl);
			}
			catch(_O_)
			{}
			try
			{
				PutUrlData(screenFormUrl, TEMPLATE.xms);
				return true;
			}
			catch(_O_)
			{
				return false;
			}
	"/>

	<get_custom_ui_form PROPERTY="1" PARAM="oCustomAdminTemplateParam" EXPR="
			iCustomAdminTemplateID = OptInt( oCustomAdminTemplateParam );
			if ( iCustomAdminTemplateID == undefined )
			{
				teCustomAdminTemplate = oCustomAdminTemplateParam;
				iCustomAdminTemplateID = teCustomAdminTemplate.id.Value;
			}
			else
			{
				teCustomAdminTemplate = OpenDoc( UrlFromDocID( iCustomAdminTemplateID ) ).TopElem;
			}

			if ( teCustomAdminTemplate.exec_code.code_url.HasValue )
			{
				return teCustomAdminTemplate.exec_code.code_url.Value;
			}

			if ( System.IsWebClient )
			{
				sFormUrl = ObtainTempFile( '.xms' );
			}
			else
			{
				sFormUrl = 'x-local://wt_data/custom_forms/uif/uif_' + teCustomAdminTemplate.form_name + '.xms';
				try
				{
					DeleteUrl( sFormUrl );
				}
				catch( err )
				{
				}
			}
			PutUrlData( sFormUrl, teCustomAdminTemplate.exec_code.code_text );
			return sFormUrl;
	"/>

	<get_custom_document_form PROPERTY="1" PARAM="CATALOG_NAME" EXPR="
			try
			{
				CATALOG_NAME = CATALOG_NAME + '';
			}
			catch(_O_)
			{
				Screen.MsgBox(ms_tools.get_const('0nk0k4zugy'),ms_tools.get_const('c_error'),'error','ok');
			}

			_open_with_default = true;
			_cur_doc_type = ArrayFirstElem(XQuery('for $elem in doc_types where $elem/object_name = ' + XQueryLiteral(CATALOG_NAME) + ' return $elem'));

			if (_cur_doc_type.custom_admin_template_id.HasValue)
			{
				_templade_catalog = ArrayOptFirstElem(XQuery('for $elem in custom_admin_templates where $elem/id = ' +_cur_doc_type.custom_admin_template_id+ ' return $elem' ));
				if (_templade_catalog != undefined)
				{
					_open_with_default = false;
				}
			}

			if (_open_with_default)
				return 'x-local://wtv/udt_doc_form.xms';
			else
				return 'x-local://wt_data/custom_forms/uif/uif_'+_templade_catalog.form_name+'.xms';
	"/>

	<get_custom_document_data_form_url PROPERTY="1" PARAM="sCatalogNameParam" EXPR="
			sUdtUrl = 'x-local://udt/';
			return sUdtUrl + sCatalogNameParam + '.xmd';
	"/>


	<knowledge_part_path_by_knowledge_part_id PROPERTY="1" PARAM="_knowledge_partID" PARAM="_knowledge_partDoc" PARAM="_depth" PARAM="_top" PARAM="_separator" EXPR="
		/*
			Возвращает строку с полным путем для карты знаний
			knowledge_partID - ID карты знаний
			DEPTH - глубина штатного расписания, число, показывающее длину цепочки штатного расписания.
							 Если DEPTH=0, то показывается полная цепочка штатного расписания.
			TOP - параметр расчета длины штатного расписания.
			Если TOP=1, то длина штатного расписания расчитывается 'сверху', т.е. от класификатора.
			Если TOP=0, то длина штатного расписания расчитывается 'снизу', т.е. от карты знаний.
			SEPARATOR - строка - разделитель. Если указана пустая строка '', по умолчанию используется разделитель ' -> '
		*/
		try
		{
			_knowledge_partDoc.name;
		}
		catch(err)
		{
			try
			{
				_knowledge_partDoc = OpenDoc(UrlFromDocID( Int(_knowledge_partID) )).TopElem;
			}
			catch(err)
			{
				return ms_tools.get_const('xcbaunam4n');
			}
		}

		try
		{
			_depth = Int(_depth);
		}
		catch(err)
		{
			_depth = 0;
		}
		try
		{
			temp=_top;
		}
		catch(err)
		{
			_top = '0';
		}
		try
		{
			temp=_separator;
		}
		catch(err)
		{
			_separator='->';
		}

		try
		{
			_cur_knowledge_part = ArrayFirstElem( XQuery('for $elem in knowledge_parts where $elem/id=' + _knowledge_partID + ' return $elem') );
		}
		catch(err)
		{
			return ms_tools.get_const('jxn08fbr49');
		}

/*	ЗАПОЛНЕНИЕ МАССИВА путей*/
		path_partsArray = Array();
		parts_counter = 0;
		try
		{
			depthCounter = 0;
			_parent_id = _knowledge_partDoc.parent_object_id;
			while( _parent_id.HasValue &amp;&amp; depthCounter &lt; 50 )
			{
				curParent = ArrayFirstElem( XQuery('for $elem in knowledge_parts where $elem/id=' + _parent_id + ' return $elem') );

				_child = new Object;
				_child.id = curParent.id;
				_child.name = curParent.name;
				_child.parent_id = curParent.parent_object_id;
				path_partsArray[parts_counter] = _child;
				parts_counter++;

				_parent_id = curParent.parent_object_id;
				depthCounter++;
			}
		}
		catch ( dd )
		{
		}

		_result = '';
		if (_separator == '')
			_separator = ' -> ';

		if ( _depth == 0 )
		{
			for ( i=ArrayCount( path_partsArray )-1; i>=0; i=i-1 )
				_result = _result + (i==ArrayCount( path_partsArray )-1 ? '' : _separator ) +  path_partsArray[i].name;
		}
		else
		{
			switch ( _top )
			{
				case '1':
					for ( i=ArrayCount( path_partsArray )-1; i>=0 &amp;&amp; (ArrayCount( path_partsArray ) - i) <= _depth ; i=i-1 )
						_result = _result + (i==ArrayCount( path_partsArray )-1 ? '' : _separator ) +  path_partsArray[i].name;
					break;

				case '0':
					_start_index = _depth - 1;
					if ( _start_index < 0 )
						_start_index = 0;
					if ( _start_index  >  ArrayCount( path_partsArray )-1 )
						_start_index = ArrayCount( path_partsArray )-1;
					for ( i=_start_index; i>=0; i=i-1 )
						_result = _result + (i==_start_index ? '' : _separator ) +  path_partsArray[i].name;
					break;
				default:
					_start_index = _depth - 1;
					if ( _start_index < 0 )
						_start_index = 0;
					if ( _start_index  >  ArrayCount( path_partsArray )-1 )
						_start_index = ArrayCount( path_partsArray )-1;
					for ( i=_start_index; i>=0; i=i-1 )
						_result = _result + (i==_start_index ? '' : _separator ) +  path_partsArray[i].name;
					break;
			}
		}
		return 	_result;
	"/>


	<get_func_manager_substitution PROPERTY="1" PARAM="arrFuncManagerParam" PARAM="oParams" EXPR="
			try
			{
				oParams;
			}
			catch ( err )
			{
				oParams = ({});
			}
			sPersonFieldName = oParams.GetOptProperty( 'person_field_name', 'person_id' );
			iSubstitutionType = OptInt( oParams.GetOptProperty( 'substitution_type_id' ), null );
			sSubstitutionType = '';
			if ( iSubstitutionType != null )
			{
				sSubstitutionType = ' and $elem/substitution_type_id = ' + iSubstitutionType;
			}

			var arrSubstitutionPersonIDs = ArraySelectAll( XQuery( 'for $elem in substitutions where MatchSome( $elem/object_id, (' + ArrayMerge( arrFuncManagerParam, sPersonFieldName, ',' ) + ') ) and $elem/status = \'active\' and ( $elem/start_date = null() or $elem/start_date &lt; date(\'' + CurDate + '\') ) and ( $elem/finish_date = null() or $elem/finish_date &gt; date(\'' + CurDate + '\') )' + sSubstitutionType + ' return $elem/Fields(\'object_id\',\'person_id\')' ) );
			if ( ArrayOptFirstElem( arrSubstitutionPersonIDs ) == undefined )
				return ArrayExtract( arrFuncManagerParam, sPersonFieldName );

			var catSubstitution, fldFuncManagerElem;
			var arrPersonIDs = [];
			for ( fldFuncManagerElem in arrFuncManagerParam )
			{
				catSubstitution = ArrayOptFindByKey( arrSubstitutionPersonIDs, fldFuncManagerElem.Child( sPersonFieldName ).Value, 'object_id' );
				if ( catSubstitution == undefined )
					arrPersonIDs.push( fldFuncManagerElem.Child( sPersonFieldName ).Value );
				else
					arrPersonIDs.push( catSubstitution.person_id.Value );
			}
			return arrPersonIDs;
	"/>

	<get_uni_user_bosses PROPERTY="1" PARAM="objectParam" PARAM="oParams" EXPR="
			iObjectID = 0;
			try
			{
				iObjectID = Int( objectParam );
			}
			catch ( err )
			{
			}
			try
			{
				oParams;
			}
			catch ( err )
			{
				oParams = ({});
			}
			if ( iObjectID == 0 )
			{
				iObjectID = OptInt( oParams.GetOptProperty( 'object_id' ) );
				if ( iObjectID == undefined )
				{
					try
					{
						if ( objectParam.IsTopElem )
						{
							if ( objectParam.ChildExists( 'id' ) )
								iObjectID = objectParam.id.Value;
							else
								iObjectID = objectParam.Doc.DocID;
							teObject = objectParam;
						}
						else
						{
							throw 'not_top_elem';
						}
					}
					catch ( err )
					{
						try
						{
							iObjectID = objectParam.DocID;
							teObject = objectParam.TopElem;
						}
						catch( err )
						{
							throw 'Invalid input parameters. Unable to retrieve the object ID.';
						}
					}
				}
				else
				{
					teObject = objectParam;
				}
			}
			else
			{
				teObject = OpenDoc( UrlFromDocID( iObjectID ) ).TopElem;
			}
			var bReturnPersons = oParams.GetOptProperty( 'return_object_type', 'collaborator' ) == 'collaborator';
			var bReturnID = oParams.GetOptProperty( 'return_object_value', 'field' ) == 'id';
			var arrRes = [];
			teSubdivision = null;

			function find_func_executive( teObjectParam, iObjectIDParam, bArr )
			{
				if ( bReturnPersons )
				{
					var oFuncManagers;
					if ( bArr )
					{
						oFuncManagers = teObjectParam;
					}
					else
					{
						if ( teObjectParam == null )
							teObjectParam = OpenDoc( UrlFromDocID( iObjectIDParam ) ).TopElem;
						oFuncManagers = teObjectParam.func_managers;
					}
					var arrFuncManager = ArraySelectByKey( oFuncManagers, true, 'is_native' );
					if ( ArrayOptFirstElem( arrFuncManager ) != undefined )
					{
						var arrPersonIDs = tools.get_func_manager_substitution( arrFuncManager, { 'person_field_name': 'person_id', 'substitution_type_id': oParams.GetOptProperty( 'substitution_type_id', null ) } );
						if ( bReturnID )
							return arrPersonIDs;
						else
							return QueryCatalogByKeys( 'collaborators', 'id', arrPersonIDs );
					}
				}
				else
				{
					if ( bArr )
						arrRes = ArrayUnion( arrRes, teObjectParam );
					else
						arrRes = ArrayUnion( arrRes, XQuery( 'for $elem in func_managers where $elem/object_id = ' + iObjectIDParam + ' return $elem' ) );
				}
				return null;
			}

			switch ( teObject.Name )
			{
				case 'collaborator':
					xarrPerson = find_func_executive( teObject, iObjectID, false );
					if ( xarrPerson != null &amp;&amp; bReturnPersons )
						return xarrPerson;

					xarrGroups = XQuery( 'for $elem in group_collaborators where $elem/collaborator_id = ' + iObjectID + ' return $elem/Fields(\'group_id\')' );
					xarrPerson = find_func_executive( XQuery( 'for $elem in func_managers where MatchSome( $elem/object_id, (' + ArrayMerge( xarrGroups, 'group_id', ',' ) + ') ) and $elem/person_id != ' + iObjectID + ' return $elem' ), iObjectID, true );
					if ( xarrPerson != null &amp;&amp; bReturnPersons )
						return xarrPerson;

					iParentID = teObject.position_parent_id.Value;
					break;

				case 'position':
					try
					{
						xarrPerson = find_func_executive( null, teObject.basic_collaborator_id, false );
					}
					catch( err )
					{
						xarrPerson = null;
					}
					if ( xarrPerson != null &amp;&amp; bReturnPersons )
						return xarrPerson;

					iParentID = teObject.parent_object_id.Value;
					break;

				case 'subdivision':
					iParentID = iObjectID;
					teSubdivision = teObject;
					break;

				case 'org':
					try
					{
						xarrPerson = find_func_executive( teObject, iObjectID, false );
					}
					catch( err )
					{
						xarrPerson = [];
					}
					if ( bReturnPersons )
						return xarrPerson;
					else
						return arrRes;
					break;

				default:
					throw 'Invalid input parameters. This type of object is not supported.';
			}

			var iWhileCounter = 0;
			var arrPersonIDs = [];
			while ( iWhileCounter &lt; 50 &amp;&amp; iParentID != null )
			{
				iWhileCounter++;

				xarrPosition = XQuery( 'for $elem in positions where $elem/parent_object_id = ' + iParentID + ' and $elem/is_boss = true() and $elem/basic_collaborator_id != null() return $elem/Fields(\'id\',\'basic_collaborator_id\')' );
				if ( ArrayOptFirstElem( xarrPosition ) != undefined )
				{
					if ( teObject.Name != 'collaborator' || ArrayOptFindByKey( xarrPosition, iObjectID, 'basic_collaborator_id' ) == undefined )
					{
						if ( bReturnPersons )
						{
							arrPersonIDs = tools.get_func_manager_substitution( xarrPosition, { 'person_field_name': 'basic_collaborator_id', 'substitution_type_id': oParams.GetOptProperty( 'substitution_type_id', null ) } );
							if ( bReturnID )
							{
								return arrPersonIDs;
							}
							else
							{
								xarrPerson = QueryCatalogByKeys( 'collaborators', 'id', arrPersonIDs );
								if ( ArrayOptFirstElem( xarrPerson ) != undefined )
									return xarrPerson;
							}
						}
						else
						{
							xarrManagers = XQuery( 'for $elem in func_managers where MatchSome( $elem/object_id, (' + ArrayMerge( xarrPosition, 'id', ',' ) + ') ) return $elem' );
							arrRes = ArrayUnion( arrRes, xarrManagers );
						}
					}
				}

				try
				{
					xarrPerson = find_func_executive( teSubdivision, iParentID, false );
				}
				catch( err )
				{
					xarrPerson = null;
				}
				if ( xarrPerson != null )
					return xarrPerson;
				teSubdivision = null;

				catSubdivision = ArrayOptFirstElem( XQuery( 'for $elem in subdivisions where $elem/id = ' + iParentID + ' return $elem/Fields(\'parent_object_id\')' ) );
				if ( catSubdivision == undefined )
					iParentID = null;
				else
					iParentID = catSubdivision.parent_object_id.Value;
			}

			try
			{
				xarrPerson = find_func_executive( null, teObject.org_id, false );
				if ( xarrPerson != null &amp;&amp; bReturnPersons )
					return xarrPerson;
			}
			catch ( err )
			{
			}

			return arrRes;
	"/>

	<get_uni_user_boss PROPERTY="1" PARAM="objectParam" PARAM="oParams" EXPR="
			try
			{
				oParams;
			}
			catch ( err )
			{
				oParams = ({});
			}
			catPerson = ArrayOptFirstElem( tools.get_uni_user_bosses( objectParam, oParams ) );
			return catPerson;
	"/>



	<workflow_escalation_process PROPERTY="1" CALLER-ENV="1" PARAM="_source" PARAM="_escalation_code" PARAM="_workflow_id" PARAM="_workflow_doc" PARAM="_alterCurObjectID" EXPR="
				_workflow_id = Int( _workflow_id );
				try
				{
					curWorkflow = _workflow_doc;
				}
				catch ( hg )
				{
					curWorkflow = OpenDoc( UrlFromDocID( _workflow_id ) ).TopElem;
				}

				try
				{
					curEscalation = curWorkflow.escalations.GetChildByKey( _escalation_code );
				}
				catch ( ee )
				{
					return false;
				}

				try
				{
					alterCurObjectID = _alterCurObjectID;
				}
				catch( bebe )
				{
					alterCurObjectID = undefined;
				}
				var curObject = _source.TopElem;
				var curObjectID = _source.DocID;

				for ( _operation in curEscalation.operations )
					switch ( _operation.type )
					{
						case 'set_workflow_state':
							curObject.workflow_state = _operation.workflow_state_id;
							curObject.workflow_state_name = curObject.get_workflow_state_name( curWorkflow );
							break;

						case 'set_workflow_field_value':
							curObject.workflow_fields.ObtainChildByKey( _operation.workflow_field_id ).value = _operation.workflow_field_value;
							break;

						case 'set_request_status':
							try
							{
								curObject.status_id = _operation.request_status_id;
							}
							catch ( sdf )
							{
								alert( sdf );
							}
							break;

						case 'event_insert':
							try
							{
								docObject = OpenDoc( UrlFromDocID( curObject.object_id ) );
								if ( curObject.is_group )
								{
									for ( _person in curObject.persons )
										tools.add_person_to_event( _person.PrimaryKey, curObject.object_id, null, docObject, null, curObject.person_id );
								}
								else
								{
									tools.add_person_to_event( curObject.person_id, curObject.object_id, null, docObject );
								}
							}
							catch ( sdf )
							{
								alert( sdf );
							}
							break;

						case 'eval_str':
							sLastWorkflowState = curObject.workflow_state.Value;
							sLastWorkflowStateName = curObject.workflow_state_name.Value;
							eval( _operation.eval_str );
							if ( sLastWorkflowState != curObject.workflow_state &amp;&amp; sLastWorkflowStateName == curObject.workflow_state_name )
								curObject.workflow_state_name = curObject.get_workflow_state_name( curWorkflow );
							break;

						case 'send_notification':
							tools.create_notification( _operation.notification_id, curObjectID, null, '', curObject );
							break;

						case 'request_processing':
							tools.request_processing( curObjectID, _source );
							break;

						case 'request_rejecting':
							tools.request_rejecting( curObjectID, _source );
							break;

						case 'print_form':
							if ( _operation.print_form_id.HasValue )
								Response.Write( '&lt;script language=&quot;javascript&quot;&gt;window.open(&quot;view_print_form.html?print_form_id=' + _operation.print_form_id + '&sid=' + tools_web.get_sum_sid( _operation.print_form_id ) + '&object_id=' + (alterCurObjectID != undefined ? alterCurObjectID : curObjectID) +   '&quot;,&quot;form' + _operation.print_form_id + '&quot;);&lt;/script&gt;' );
							break;

						case 'set_workflow_custom_state':
							try
							{
								_stage_num = Int( Request.Form.stage_max_num );
								_person_num = Int( Request.Form.person_max_num );
							}
							catch ( err )
							{
								break;
							}

							curObject.workflow_custom_states.Clear();

							_prev_state = null;
							_counter_state = 0;
							for ( _stage_counter=0; _stage_counter &lt;= _stage_num; _stage_counter++ )
							{
								if ( ! Request.Form.HasProperty( 'stage_name_' + _stage_counter ) )
									continue;

								_custom_state = curObject.workflow_custom_states.AddChild();
								_custom_state.code = 'cs' + StrInt( _counter_state, 5 );
								_custom_state.name = Request.Form.GetProperty( 'stage_name_' + _stage_counter );
								_custom_state.common_state_code = _operation.workflow_state_id;

								for ( _person_counter=0; _person_counter &lt;= _person_num; _person_counter++ )
									try
									{
										_person_id = Int( Request.Form.GetProperty( 'stage_' + _stage_counter + '_person_' + _person_counter ) );

										_condition = _custom_state.conditions.AddChild();
										_condition.type = 'if_cur_user';
										_condition.cur_user_type = 'cur_person';
										_condition.person_id = _person_id;
									}
									catch ( ss )
									{
									}

								_custom_state.condition_eval_str = tools.build_condition_eval_str( _custom_state.conditions, _workflow_id, curWorkflow );

								if ( _prev_state == null )
								{
									curObject.workflow_state = _custom_state.PrimaryKey;
									curObject.workflow_state_name = curObject.get_workflow_state_name( curWorkflow );
								}
								else
								{
									_prev_state.next_workflow_custom_state_code = _custom_state.PrimaryKey;
								}

								_prev_state = _custom_state;
								_counter_state++;
							}
							break;

						case 'set_next_workflow_custom_state':
							_custom_state = ArrayOptFind( curObject.workflow_custom_states, 'PrimaryKey == curObject.workflow_state' );
							if ( _custom_state != undefined &amp;&amp; _custom_state.next_workflow_custom_state_code.HasValue )
							{
								curObject.workflow_state = _custom_state.next_workflow_custom_state_code;
								curObject.workflow_state_name = curObject.get_workflow_state_name( curWorkflow );
							}
							break;
					}

			return true;
	"/>


	<get_user_comp_profiles PROPERTY="1" PARAM="objectParam" EXPR="
			var iUserObjectID = 0;
			var teUserObject = null;
			var arrCompProfiles = Array();
			try
			{
				iUserObjectID = Int(objectParam);
			}
			catch (_x_)
			{
			}
			if ( iUserObjectID == 0 )
			{
				try
				{
					iUserObjectID = objectParam.DocID;
					teUserObject = objectParam.TopElem;
				}
				catch (_x_)
				{
					try
					{
						if (objectParam.Name != 'collaborator')
							throw 'not a person';

						teUserObject = objectParam;
					}
					catch(_o_)
					{
						throw 'Invalid input parameters. Unable to retrieve the object ID.';
					}
				}
			}
			else
			{
				try
				{
					teUserObject = OpenDoc( UrlFromDocID( iUserObjectID ) ).TopElem;
				}
				catch( err )
				{
					teUserObject = null;
				}
			}


			if (teUserObject != null)
			{
				if (teUserObject.position_id.HasValue)
				{
					try
					{
						tePositionObject = OpenDoc( UrlFromDocID( teUserObject.position_id ) ).TopElem;
					}
					catch(ex)
					{
						tePositionObject = null;
					}

					if (tePositionObject!=null)
					{

						arrCodes = String(tePositionObject.competence_codes).split('\n');
						sQueryString = 'for $elem in competence_profiles';
						bFirst = true;
						for (iCodeElem in arrCodes)
						{
							if (iCodeElem != '')
							{
								if (bFirst)
									sQueryString = sQueryString + ' where $elem/code = '+XQueryLiteral(iCodeElem);
								else
									 sQueryString = sQueryString + ' or $elem/code = '+XQueryLiteral(iCodeElem);
								bFirst = false;
							}
						}
						sQueryString = sQueryString + ' order by $elem/code return $elem';
						if (!bFirst)
							arrCompProfiles = XQuery(sQueryString);
						else
							arrCompProfiles = new Array();

						if (tePositionObject.competence_profile_id.HasValue)
						{
							try
							{
								arrCompProfiles=ArrayUnion(arrCompProfiles,XQuery('for $elem in competence_profiles where $elem/id='+tePositionObject.competence_profile_id+' return $elem'))
							}
							catch(ex)
							{
							}
						}

						if (ArrayOptFirstElem(arrCompProfiles)==undefined)
						{
							if (tePositionObject.position_common_id.HasValue)
							{
								try
								{
									tePositionCommonObject = OpenDoc( UrlFromDocID( tePositionObject.position_common_id ) ).TopElem;
								}
								catch(ex)
								{
									tePositionCommonObject = null;
								}

								if (tePositionCommonObject!=null)
								{
									if (tePositionCommonObject.competence_profile_id.HasValue)
									{
										try
										{
											arrCompProfiles=ArrayUnion(arrCompProfiles,XQuery('for $elem in competence_profiles where $elem/id='+tePositionCommonObject.competence_profile_id+' return $elem'))
										}
										catch(ex)
										{
										}
									}
								}
							}
						}
					}
				}
			}


			return arrCompProfiles;
	"/>


	<get_object_data_from_package_url PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sUrlPackageParam" PARAM="iObjectIDParam" PARAM="sObjectTypeParam" EXPR="
			var oRes = { error: 0, error_text: '', object_xml: '' };
			try
			{
				var sTempUrlObjects = UrlAppendPath( sUrlPackageParam, 'update.xml' );
				var teUpdate = OpenDoc( sTempUrlObjects ).TopElem;
				var fldObjectType = teUpdate.Child( sObjectTypeParam + 's' );
				var fldObject = ArrayFind( fldObjectType, 'OptInt(This.id)==' + Int( iObjectIDParam ) );
				oRes.object_xml = fldObject.GetXml( { 'tabs': false, 'DocHeader': false } );
			}
			catch ( err )
			{
				oRes.error = 1;
				oRes.error_text = err;
			}
			return oRes;
	"/>

	<get_package_log PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sUrlPackageParam" PARAM="oParam" EXPR="
			try
			{
				if ( oParam == undefined )
				{
					throw 'no_data';
				}
			}
			catch ( err )
			{
				oParam = ({});
			}
			var bCheckVersion = oParam.GetOptProperty( 'bCheckVersion', false );
			bDeleteTempDir = oParam.GetOptProperty( 'bDeleteTempDir', true );

			teForm = OpenNewDoc( 'x-local://wtv/wtv_view_package.xml' ).TopElem;

			function create_temp_dir( sZipUrlParam )
			{
				try
				{
					sTempDir = ObtainTempFile();
					CreateDirectory( sTempDir );
				}
				catch( err )
				{
					sTempDir = 'x-local://trash/temp/' + Random( 1111111111, 9999999999 );
				}
				tools.zip_extract( sZipUrlParam, sTempDir );
				return sTempDir;
			}

			function process_package_objects( sUpdateUrlParam )
			{
				fldPackageChild = teForm.download_packages.AddChild();
				fldPackageChild.id = tools.random_string( 6 );
				fldPackageChild.type = 'objects';

				teUpdate = OpenDoc( sUpdateUrlParam ).TopElem;
				tools.package_log_filling( fldPackageChild, teUpdate );

				teForm.sel_package_id = fldPackageChild.PrimaryKey;
			}

			try
			{
				sSuffix = StrLowerCase( UrlPathSuffix( sUrlPackageParam ) );
				if ( sSuffix == '.zip' )
				{
					sTempDir = create_temp_dir( sUrlPackageParam );
					teForm.temp_package_url = sTempDir;
					sDescUrl = UrlAppendPath( sTempDir, 'desc.xml' );
					sUpdateUrl = UrlAppendPath( sTempDir, 'update.xml' );

					if ( tools.file_url_exists( sDescUrl ) )
					{
						teForm.package_type = 'desc';
						teDesc = OpenDoc( sDescUrl, 'form=x-local://wtv/wtv_form_download_packages.xmd' ).TopElem;
						teForm.download_packages.AssignElem( teDesc );

						for ( fldDownloadPackageElem in teForm.download_packages )
						{
							if ( fldDownloadPackageElem.type == 'objects' )
							{
								sObjSuffix = StrLowerCase( UrlPathSuffix( fldDownloadPackageElem.url ) );
								sTempDirObjects = null;
								if ( sObjSuffix == '.zip' )
								{
									sTempDirObjects = create_temp_dir( UrlAppendPath( sTempDir, fldDownloadPackageElem.url ) );
									fldDownloadPackageElem.temp_package_url = sTempDirObjects;
									sTempUrlObjects = UrlAppendPath( sTempDirObjects, 'update.xml' );
								}
								else
								{
									sTempUrlObjects = UrlAppendPath( sTempDir, fldDownloadPackageElem.url );
								}

								teUpdate = OpenDoc( sTempUrlObjects ).TopElem;

								if( bCheckVersion )
								{
									if( teUpdate.ChildExists( 'basic' ) )
									{
										if ( ms_tools.compare_versions( teUpdate.basic.server_version, ms_tools.call_server_method( 'tools', 'get_version', [ 'wtv' ] ) ) != 0 )
										{
											teForm.error = 100;
											return teForm;
										}
									}
								}

								tools.package_log_filling( fldDownloadPackageElem, teUpdate );

								if ( bDeleteTempDir &amp;&amp; sTempDirObjects != null )
								{
									try
									{
										DeleteDirectory( sTempDirObjects );
										fldDownloadPackageElem.temp_package_url.Clear();
									}
									catch ( err )
									{
									}
								}
							}
						}
					}
					else if ( tools.file_url_exists( sUpdateUrl ) )
					{
						process_package_objects( UrlAppendPath( sTempDir, 'update.xml' ) );
					}

					if ( bDeleteTempDir )
					{
						try
						{
							DeleteDirectory( sTempDir );
							teForm.temp_package_url.Clear();
						}
						catch ( err )
						{
						}
					}
				}
				else if ( sSuffix == '.xml' )
				{
					process_package_objects( sUrlPackageParam );
				}
			}
			catch ( err )
			{
				teForm.error = 500;
				teForm.error_text = err;
			}

			return teForm;
	"/>

	<package_log_filling PROPERTY="1" PARAM="fldPackageTarget" PARAM="fldSourceParam" EXPR="
			iItemCounter = 0;
			fldPackageTarget.objects.Clear();
			fldPackageTarget.custom_templates.Clear();
			fldPackageTarget.lists.Clear();
			fldPackageTarget.deleted_objects.Clear();
			fldPackageTarget.access_roles.Clear();

			for ( fldObjectTypeElem in common.exchange_object_types )
			{
				if ( fldSourceParam.ChildExists( fldObjectTypeElem.PrimaryKey + 's' ) )
				{
					for ( fldObjectElem in fldSourceParam.Child( fldObjectTypeElem.PrimaryKey + 's' ) )
					{
						try
						{
							teObject = OpenDocFromStr( fldObjectElem.Xml, 'ui-text=1;form=' + fldObjectTypeElem.form_url ).TopElem;
						}
						catch(err)
						{
							alert('ERROR: package_log_filling:\r\n' + err + '\r\n' + fldObjectElem.Xml)
							throw err + '\r\n' + fldObjectElem.Xml
						}
						fldObjectChild = fldPackageTarget.objects.AddChild();
						fldObjectChild.id = fldObjectElem.id;
						fldObjectChild.type = fldObjectTypeElem.PrimaryKey;
						fldObjectChild.object_form = fldObjectTypeElem.form_url;
						try
						{
							fldObjectChild.name = GetObjectProperty( teObject, fldObjectTypeElem.disp_name );
						}
						catch ( err )
						{
							fldObjectChild.name = err;
						}
						iItemCounter++;
					}
				}
			}

			if ( fldSourceParam.ChildExists( 'custom_templates' ) )
			{
				teCustomTemplates = OpenDocFromStr( fldSourceParam.custom_templates.Xml, 'ui-text=1;form=x-local://wtv/wtv_custom_templates.xmd' ).TopElem;
				for ( fldObjectElem in teCustomTemplates )
				{
					if ( fldObjectElem.ChildExists( 'fields' ) )
						for ( fldFieldElem in fldObjectElem.fields )
						{
							fldPackageTarget.custom_templates.AddChild().AssignElem( fldFieldElem );
							iItemCounter++;
						}
					if ( fldObjectElem.ChildExists( 'items' ) )
						for ( fldItemElem in fldObjectElem.items )
							for ( fldFieldElem in fldItemElem.fields )
							{
								fldPackageTarget.custom_templates.AddChild().AssignElem( fldFieldElem );
								iItemCounter++;
							}
				}
			}

			if ( fldSourceParam.ChildExists( 'lists' ) )
			{
				teLists = OpenDocFromStr( fldSourceParam.lists.Xml, 'ui-text=1;form=x-local://wtv/wtv_lists.xmd' ).TopElem;
				for ( fldListElem in teLists )
					if ( fldListElem.ChildNum != 0 )
					{
						fldListChild = fldPackageTarget.lists.AddChild();
						fldListChild.field = fldListElem.Name;
						fldListChild.num = fldListElem.ChildNum;
						iItemCounter++;
					}
			}

			if ( fldSourceParam.ChildExists( 'deleted_objects' ) )
			{
				for ( fldSourceDeleteObjectElem in fldSourceParam.deleted_objects )
				{
					fldDeleteObjectChild = fldPackageTarget.deleted_objects.AddChild();
					fldDeleteObjectChild.AssignElem( fldSourceDeleteObjectElem );
					iItemCounter++;
				}
			}

			if ( fldSourceParam.ChildExists( 'access_roles' ) )
			{
				teAccessRoles = OpenDocFromStr( fldSourceParam.access_roles.Xml, 'ui-text=1;form=x-local://wtv/wtv_access_roles.xmd' ).TopElem;
				fldPackageTarget.access_roles.AssignElem( teAccessRoles );
				iItemCounter += teAccessRoles.ChildNum;
			}

			return iItemCounter;
	"/>

	<wvars_to_script PROPERTY="1" PARAM="listWVarsPARAM" PARAM="bWarily" EXPR="
		try
		{
			bWarily = (bWarily == true);
		}
		catch(_Error_)
		{
			bWarily = false;
		}
		var __fldWVar, _sWVARName, __s_anti_str = 'SCOPE_WVARS=({});';
		var __s_anti_str_value, __s_anti_str_value_bool;
		//if(ObjectType(listWVarsPARAM) != 'XmElem') return '';
		for (__fldWVar in listWVarsPARAM)
		if (ObjectType(__fldWVar) == 'XmElem')
		{
			_sWVARName = StrReplace(__fldWVar.name, '.', '_');
			if ( ! ValidateName(_sWVARName, false) )
				throw 'ERROR wvars_to_script: Invalid wvar name = ' + CodeLiteral( __fldWVar.name.Value );

			switch (__fldWVar.type.Value)
			{
				case 'foreign_elem':
				{
					if ( StrBegins( __fldWVar.value, '[' ) &amp;&amp; StrEnds( __fldWVar.value, ']' ) )
					{
						__s_anti_str_value = EncodeJson( ArrayExtract( SafeEval( __fldWVar.value ), 'OptInt(This.__value)' ) );
					}
					else
					{
						__s_anti_str_value = ('OptInt(\'' + __fldWVar.value.Value + '\', null)');
					}
					break;
				}
				case 'integer':
				case 'file':
					__s_anti_str_value = OptInt(__fldWVar.value.Value, 'null');
					break;
				case 'real':
					__s_anti_str_value = OptReal(__fldWVar.value.Value, 'null');
					break;
				case 'date':
					try
					{
						__s_anti_str_value = 'Date(\'' +Date(__fldWVar.value.Value)+ '\')';
					}
					catch(_dateErr_)
					{
						__s_anti_str_value = 'null';
					}
					break;
				case 'bool':
					__s_anti_str_value_bool = (__fldWVar.value.Value == true || __fldWVar.value.Value == 'true' || __fldWVar.value.Value == 1 || __fldWVar.value.Value == '1');
					__s_anti_str_value = (__s_anti_str_value_bool ? 'true': 'false');
					break;
				case 'heading':
				case 'folder':
					break;
				default:
					__s_anti_str_value = CodeLiteral(__fldWVar.value.Value);
			}
			if (bWarily)
				__s_anti_str += 'try{'+_sWVARName+' = '+_sWVARName+';} catch(_killHumAnZ13_) {';
			__s_anti_str += 'var ' + _sWVARName + '=' + __s_anti_str_value + ';' + (bWarily ? '};':'');
			__s_anti_str += 'SCOPE_WVARS.SetProperty(' + CodeLiteral( _sWVARName ) + ',' + __s_anti_str_value + ');';
		}
		return __s_anti_str;
	"/>

	<object_to_script PROPERTY="1" PARAM="ObjectPARAM" PARAM="bWarily" EXPR="
		try
		{
			bWarily = (bWarily == true);
		}
		catch(e)
		{
			bWarily = false;
		}

		if(ObjectType(ObjectPARAM) != 'JsObject')
			return '';

		var sToScript = 'SCOPE_WVARS=({});';
		var itemVAR, sVARName;
		var itemValue, sToScriptValue;
		for(itemObjName in ObjectPARAM)
		{
			sVARName = StrReplace(itemObjName, '.', '_');
			if ( ! ValidateName(sVARName, false) )
				throw 'ERROR object_to_script: Invalid variable name = ' + CodeLiteral( itemObjName );

			itemVAR = ObjectPARAM.GetProperty(itemObjName);
			if(ObjectType(itemVAR) == 'BmObject' || ObjectType(itemVAR) == '')
			{
				sToScriptValue = CodeLiteral(itemVAR);
			}
			else if(ObjectType(itemVAR) == 'JsObject')
			{
				itemValue = itemVAR.GetOptProperty('value',null);
				if(itemVAR.HasProperty('type'))
				{
					switch(itemVAR.GetOptProperty('type',''))
					{
						case 'foreign_elem':
						{
							if ( StrBegins( itemValue, '[' ) &amp;&amp; StrEnds( itemValue, ']' ) )
							{
								sToScriptValue = EncodeJson( ArrayExtract( SafeEval( itemValue ), 'OptInt(This.__value)' ) );
							}
							else
							{
								sToScriptValue = CodeLiteral(OptInt(itemValue, null));
							}
							break;
						}
						case 'integer':
						case 'file':
							sToScriptValue = CodeLiteral(OptInt(itemValue, null));
							break;
						case 'real':
							sToScriptValue = CodeLiteral(OptReal(itemValue, null));
							break;
						case 'date':
							sToScriptValue = CodeLiteral(OptDate(itemValue));
							break;
						case 'bool':
							sToScriptValue = ((itemValue == true || itemValue == 'true' || itemValue == 1 || itemValue == '1') ? 'true': 'false');
							break;
						default:
							sToScriptValue = CodeLiteral(itemValue);
					}
				}
				else
					sToScriptValue = CodeLiteral(itemValue);
			}

			if (bWarily) sToScript += 'try{' + sVARName + '=' + sVARName + ';} catch(e) {';
			sToScript += 'var ' + sVARName + '=' + sToScriptValue + ';';
			if (bWarily) sToScript += '};';
			sToScript +=  'SCOPE_WVARS.SetProperty(' + CodeLiteral( sVARName ) + ',' + sToScriptValue + ');';
		}
		return sToScript;
	"/>

	<wvars_to_object PROPERTY="1" PARAM="listWVarsPARAM" EXPR="
		var oRes = Object();
		for ( fldVWarElem in listWVarsPARAM )
		{
			switch ( fldVWarElem.OptChild( 'type' ) )
			{
				case 'foreign_elem':
				{
					if ( StrBegins( fldVWarElem.value, '[' ) &amp;&amp; StrEnds( fldVWarElem.value, ']' ) )
					{
						oRes.SetProperty( fldVWarElem.name, ArrayExtract( SafeEval( fldVWarElem.value ), 'OptInt(This.__value)' ) );
					}
					else
					{
						oRes.SetProperty( fldVWarElem.name, OptInt( fldVWarElem.value.Value, null ) );
					}
					break;
				}
				case 'integer':
				case 'file':
				{
					oRes.SetProperty( fldVWarElem.name, OptInt( fldVWarElem.value.Value, null ) );
					break;
				}
				case 'real':
				{
					oRes.SetProperty( fldVWarElem.name, OptReal( fldVWarElem.value.Value, null ) );
					break;
				}
				case 'date':
				{
					oRes.SetProperty( fldVWarElem.name, OptDate( fldVWarElem.value.Value, null ) );
					break;
				}
				case 'bool':
				{
					oRes.SetProperty( fldVWarElem.name, tools_web.is_true( fldVWarElem.value.Value ) );
					break;
				}
				default:
				{
					oRes.SetProperty( fldVWarElem.name, fldVWarElem.value.Value );
					break;
				}
			}
		}
		return oRes;
	"/>
	<copy_directory PROPERTY="1" PARAM="sSourceDirPARAM" PARAM="sDestDirPARAM" EXPR="
			if (!IsDirectory(sSourceDirPARAM))
				return false;
			try
			{
				if (!tools.file_url_exists( sDestDirPARAM ) || !IsDirectory(sDestDirPARAM))
					CreateDirectory(sDestDirPARAM);
			}
			catch(_x_)
			{
				return false;
			}

			var aFileNames = ReadDirectory(sSourceDirPARAM);
			var sFileName, sTempDir;
			for (sFileName in aFileNames)
			{
				if (IsDirectory(sFileName))
				{
					sTempDir = UrlAppendPath(sDestDirPARAM, UrlFileName(sFileName));
					if (!IsDirectory(sTempDir))
						CreateDirectory(sTempDir);
					tools.copy_directory(sFileName, sTempDir)
				}
				else
					CopyFile(UrlToFilePath(sFileName), UrlToFilePath(UrlAppendPath(sDestDirPARAM, UrlFileName(sFileName))));
			}
			return true;
	"/>

	<send_event_notifications PROPERTY="1" PARAM="_event_id" PARAM="_doc_event" PARAM="send_type" EXPR="

			docEvent = undefined
			try
			{
				if ( _doc_event == null || _doc_event == '' )
					throw 'no_doc';

				docEvent = _doc_event;
			}
			catch ( dd )
			{
			    try
				{
					docEvent = OpenDoc( UrlFromDocID( Int(_event_id) ) );
				}
				catch(ex)
				{
				}
			}

			sSendType = 'all'
			try
			{
				sSendType = Trim(send_type)
			}
			catch(ex)
			{
			}

			if (docEvent.TopElem.event_settings.send_type=='adding')
			{
				if (docEvent.TopElem.event_settings.send_collaborators||docEvent.TopElem.event_settings.send_bosses)
				{
					for ( _collaborator in docEvent.TopElem.collaborators )
					{
						if (sSendType!='not_send')
						{
							if (docEvent.TopElem.event_settings.send_collaborators)
							{
								arrCollaborResults = XQuery( 'for $elem in event_results where $elem/event_id = ' + docEvent.TopElem.Doc.DocID + ' and $elem/person_id='+_collaborator.PrimaryKey+' return $elem' );
								if (sSendType =='new')
								{
									try
									{
										arrNotifResults = ArraySelect(arrCollaborResults,'Date(last_sending_date)<= Date(\''+Date()+'\')')
									}
									catch(ex)
									{
										arrNotifResults = Array()
									}

									if (ArrayOptFirstElem(arrNotifResults)!=undefined)
									{
										continue;
									}
								}

								try
								{
									curResult=ArrayOptFirstElem(arrCollaborResults)
									if (curResult!=undefined)
									{
										docEventResult=OpenDoc( UrlFromDocID( curResult.id ) )
										docEventResult.TopElem.last_sending_date = Date();
										docEventResult.Save();
									}
								}
								catch(ex)
								{
								}
								tools.create_notification( '23', _collaborator.PrimaryKey, docEvent.TopElem.name, docEvent.TopElem.Doc.DocID, null, docEvent.TopElem );
							}
						}
						if (docEvent.TopElem.event_settings.send_bosses)
						{
							tools.create_notification( '25', _collaborator.PrimaryKey, docEvent.TopElem.name, docEvent.TopElem.Doc.DocID, null, docEvent.TopElem );
						}
					}
				}

				if (docEvent.TopElem.event_settings.send_tutors)
				{
					for( _tutor in docEvent.TopElem.tutors )
						tools.create_notification( '51', _tutor.collaborator_id, '', docEvent.TopElem.Doc.DocID, null, docEvent.TopElem );
				}

				if (docEvent.TopElem.event_settings.send_event_preparations)
				{
					for( _even_preparation in docEvent.TopElem.even_preparations )
						tools.create_notification( '53', _even_preparation.person_id, '', docEvent.TopElem.Doc.DocID, null, docEvent.TopElem );
				}

				if (docEvent.TopElem.event_settings.send_lectors)
				{
					for( _person in docEvent.TopElem.lectors )
						tools.create_notification( '55', _person.lector_id, '', docEvent.TopElem.Doc.DocID, null, docEvent.TopElem );
				}
			}

			return true
	"/>

	<read_object ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="sSomeObjectPARAM" EXPR="
		sSomeObjectPARAM = Trim(sSomeObjectPARAM);
		var oObject = new Object;
		if (sSomeObjectPARAM != &quot;&quot;)
		{
			var s1stChar = sSomeObjectPARAM.charAt(0);
			if (s1stChar == &quot;&lt;&quot;)
			{
				var oSomeXmlObj = null;
				try
				{
					oSomeXmlObj = OpenDocFromStr(sSomeObjectPARAM).TopElem;
				}
				catch(_o_)
				{}
				if (oSomeXmlObj != null)
				{
					function processXmlDeeper(_oXmlObj, _oDestObj)
					{
						var _vNewElem;
						if (_oXmlObj.ChildNum > 0)
						{
							_vNewElem = new Object;
							var _xmlChildElemDeeper;
							for (_xmlChildElemDeeper in _oXmlObj)
								processXmlDeeper(_xmlChildElemDeeper, _vNewElem);
						}
						else
							_vNewElem = _oXmlObj.Value;

						var _oOlderField = _oDestObj.GetOptProperty(_oXmlObj.Name);
						if (_oOlderField == undefined)
							_oDestObj.SetProperty(_oXmlObj.Name, _vNewElem);
						else if (IsArray(_oOlderField))
							_oOlderField[ArrayCount(_oOlderField)] = _vNewElem;
						else
							_oDestObj.SetProperty(_oXmlObj.Name, ([_oOlderField,_vNewElem]));
					}
					var _xmlChildElem;
					if (oSomeXmlObj.ChildNum > 0)
					for (_xmlChildElem in oSomeXmlObj)
						processXmlDeeper(_xmlChildElem, oObject);
				}
			}
			else if (s1stChar == &quot;{&quot; || s1stChar == &quot;[&quot;)
			{
				try
				{
					//oObject = SafeEval(&quot;(&quot;+sSomeObjectPARAM + &quot;)&quot;);
					oObject = ParseJson( sSomeObjectPARAM );
				}
				catch(_o_)
				{
					alert(_o_ + '\n' + &quot;(&quot;+sSomeObjectPARAM + &quot;)&quot;);
				}
			}
		}
		return oObject;
	"/>


	<array_to_text PROPERTY="1" PARAM="_aArrayPARAM" PARAM="_sFormatPARAM" PARAM="_sNamePARAM" EXPR="
			if (!IsArray(_aArrayPARAM)) return null;

			if (_sFormatPARAM != 'json') _sFormatPARAM = 'xml';

			try
			{
				_sNamePARAM = Trim(_sNamePARAM);
				if (_sNamePARAM == '')
					throw 'empty';
			}
			catch(_x_)
			{
				_sNamePARAM = 'data';
			}

			var _vArrayElem, _aSubPairs, _iObjType, _vField, _sResult,_aPairs = Array();
			for (_vArrayElem in _aArrayPARAM)
			{
				_aPairs[ArrayCount(_aPairs)] = tools.object_to_text(_vArrayElem, _sFormatPARAM);

			}
			return tools.merge_text_array(_aPairs, (_sFormatPARAM == 'json' ? null: _sNamePARAM), false, _sFormatPARAM);
	"/>

	<merge_text_array PROPERTY="1" PARAM="_aDataPARAM" PARAM="_sName" PARAM="_bObj" PARAM="_sFormatPARAM" EXPR="
			if (_sFormatPARAM != 'json') _sFormatPARAM = 'xml';
			if (_bObj)
			{
				if (_sFormatPARAM == 'json')
				{
					return (_sName ? String.fromCharCode(34) + _sName + String.fromCharCode(34) + ':' : '')+ '{' +ArrayMerge(_aDataPARAM, 'This', ',')+ '}';
				}
				else
				{
					return (_sName ? '&lt;' + _sName + '&gt;':'') + ArrayMerge(_aDataPARAM, 'This', '') + (_sName ? '&lt;/' + _sName + '&gt;':'');
				}
			}
			else
			{
				if (_sFormatPARAM == 'json')
				{
					return (_sName ? String.fromCharCode(34) + _sName + String.fromCharCode(34) + ':' : '')+ '[' +ArrayMerge(_aDataPARAM, 'This', ',')+ ']';
				}
				else
				{
					//return (_sName ? '&lt;' + _sName + '&gt;':'') + ArrayMerge(_aDataPARAM, 'This', '') + (_sName ? '&lt;/' + _sName + '&gt;':'');
					if (_sName)
						return ArrayMerge(_aDataPARAM, CodeLiteral('&lt;' + _sName + '&gt;') +' + This + ' + CodeLiteral('&lt;/' + _sName + '&gt;'), '');
					else
						return ArrayMerge(_aDataPARAM, 'This', '');
				}
			}
	"/>

	<!-- <object_to_text PROPERTY="1" PARAM="objectPARAM" PARAM="sFormatPARAM" PARAM="iMaxDepthPARAM" EXPR="

		function o2t(_vObjectPARAM, _sFormatPARAM, iDepth, __sNoName, _maxDepth)
		{
			if (_sFormatPARAM != 'json') _sFormatPARAM = 'xml';
			function _writeElem(_sName,_vValue)
			{
				function writeJSONValue(_vSourceValue, bCooked)
				{
					switch (DataType(_vSourceValue))
					{
						case 'bool':
							_vSourceValue = (_vSourceValue ? true : false);
							break;
						case 'integer':
							if (_vSourceValue &gt; 2147483647)
								_vSourceValue = '&quot;' + StrInt(_vSourceValue) + '&quot;';
						case 'real':
							break;
						default:
							//_vSourceValue = Trim(StrReplace(_vSourceValue, '\\', '\\\\'));
							if (!bCooked)
							{
								//_vSourceValue = HtmlEncode(_vSourceValue);
								//_vSourceValue = '&quot;' + _vSourceValue + '&quot;';
								if (_vSourceValue === undefined)
									_vSourceValue = 'null';
								else
									_vSourceValue = CodeLiteral(_vSourceValue, '&quot;');
							}
							/*
							else
								_vSourceValue = Trim(StrReplace(_vSourceValue, '\\', '\\\\'));
							*/
					}
					return _vSourceValue;
				}
				var _sResult = '';
				var flagReprocessed = false;
				switch (DataType(_vValue))
				{
					case 'object':
						if (iDepth &gt; _maxDepth)
							_vValue = '!!Maximum depth exceeded!!';
						else
						{
							try
							{
								_vValue.charAt(0);
								_vValue =  _vValue + '';
							}
							catch(_Error_)
							{
								_vValue = o2t(_vValue, _sFormatPARAM, iDepth + 1, _sName, _maxDepth);
								if (IsArray(_vValue))
								{
									if (_vValue[1] == 3)
										_sName = null;
									_vValue = _vValue[0];
								}
								flagReprocessed = true;
							}
						}
						break;
					case 'date':
						_vValue = StrXmlDate(_vValue);
						break;
				}
				if (_sFormatPARAM == 'xml' &amp;&amp; !flagReprocessed)
				{
					if (!StrBegins(Trim(_vValue), '&lt;![CDATA['))
						_vValue = HtmlEncode(_vValue);
				}

				if (_sName == undefined || _sName == null)
				{
					if (_sFormatPARAM == 'json')
					{
						_sResult = writeJSONValue(_vValue, flagReprocessed);
					}
					else
					{
						if (_sName == null)
							_sResult = _vValue;
						else
							_sResult = '&lt;' + (__sNoName == undefined ? 'value' : __sNoName)+'&gt;' + _vValue + '&lt;/' + (__sNoName == undefined ? 'value' : __sNoName) +'&gt;';
					}
				}
				else
				{
					if (_sFormatPARAM == 'json')
						_sResult = String.fromCharCode(34) + _sName + String.fromCharCode(34) + ':' + writeJSONValue(_vValue, flagReprocessed);
					else
						_sResult = '&lt;' + _sName + '&gt;' + _vValue + '&lt;/' + _sName + '&gt;';
				}
				return _sResult;
			}

			var _aSubPairs, _iObjType, _vField;
			_aSubPairs = Array();
			switch (DataType(_vObjectPARAM))
			{
				case 'object':
					_iObjType = 0;
					try
					{
						_vObjectPARAM.Name;
						_iObjType = 1;
					}
					catch(_Er_)
					{
						try
						{
							_vObjectPARAM.HasProperty('p');
							_iObjType = 2;
						}
						catch(_Err_)
						{
							try
							{
								//if (DataType(ArrayOptFirstElem(_vObjectPARAM)) != 'object')
								if (IsArray(_vObjectPARAM))
									_iObjType = 3;
							}
							catch(_Error_)
							{
							}
						}
					}

					switch (_iObjType)
					{
						case 1:
							var _vTempVal, _vFields, _sFldName, _aFldNames = ArraySelectDistinct(ArrayExtract(_vObjectPARAM, 'This.Name'), 'This');

							for (_sFldName in _aFldNames)
							{
								_vTempVal = undefined;
								for (_vField in ArraySelect(_vObjectPARAM, 'This.Name == ' + CodeLiteral(_sFldName)))
								{
									if (_vField.IsMultiple)
									{
										if (_vTempVal == undefined)
											_vTempVal = new Array();
										_vTempVal.push(_writeElem((_sFormatPARAM == 'xml' ? _vField.Name: null), _vField.HasValue ? (_sFormatPARAM == 'xml' ? _vField.XmlValue: _vField.Value) : _vField));
									}
									else
									{
										_vTempVal = _writeElem(_vField.Name, _vField.HasValue || _vField.Type != '' &amp;&amp; _vField.Type != 'variant' &amp;&amp; _vField.Type != 'binary' ? (_sFormatPARAM == 'xml' ? _vField.XmlValue: _vField.Value) : _vField);
									}
								}

								if (IsArray(_vTempVal))
									_aSubPairs.push(tools.merge_text_array(_vTempVal,(_sFormatPARAM == 'xml'? null : _sFldName), false, _sFormatPARAM));
								else
									_aSubPairs.push(_vTempVal);
							}
							break;
						case 2:
							for (_vField in _vObjectPARAM)
								_aSubPairs.push(_writeElem(_vField, _vObjectPARAM.GetProperty(_vField)));
							break;
						case 3:
							for (_vField in _vObjectPARAM)
								_aSubPairs.push(_writeElem(undefined, _vField));
							break;
					}

					if (_sFormatPARAM == 'xml' &amp;&amp; __sNoName != undefined)
					{
						return ([(tools.merge_text_array(_aSubPairs, null, (_iObjType == 1 || _iObjType == 2), _sFormatPARAM)), (_iObjType)]);
					}
					else
					return tools.merge_text_array(_aSubPairs, null, (_iObjType == 1 || _iObjType == 2), _sFormatPARAM);
					break;
				default:
					return _writeElem('value', _vObjectPARAM);
			}
		}

		try
		{
			iMaxDepthPARAM = Int(iMaxDepthPARAM);
			if (iMaxDepthPARAM &lt; 1)
				throw 'wat?';
		}
		catch(_x_)
		{
			iMaxDepthPARAM = 10;
		}

		return o2t(objectPARAM, sFormatPARAM, 0, undefined, iMaxDepthPARAM);
	"/> -->

	<object_to_text ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="objectPARAM" PARAM="sFormatPARAM" PARAM="iMaxDepthPARAM" EXPR="
		function _AppendStr(_vValue)
		{
			if (bOld)
			{
				_RESULT.push(String(_vValue));
			}
			else
				_RESULT.AppendStr(_vValue);
		}

		function _writeElem(_sName,_vValue)
		{
			function writeJSONValue(_vSourceValue)
			{
				switch (DataType(_vSourceValue))
				{
					case 'bool':
						_vSourceValue = (_vSourceValue ? true : false);
						break;
					case 'integer':
						if (_vSourceValue > 2147483647)
							_vSourceValue = CodeLiteral(StrInt(_vSourceValue), '&quot;');
					case 'real':
						break;
					default:
						if (_vSourceValue === undefined)
							_vSourceValue = 'null';
						else
							_vSourceValue = CodeLiteral(_vSourceValue, '&quot;');
						break;
				}
				return _vSourceValue;
			}
			var _sResult = '';
			var flagReprocessed = false;
			switch (DataType(_vValue))
			{
				case 'object':
					if (iDepth > _maxDepth)
						_vValue = '!!Maximum depth exceeded!!';
					else
					{
						try
						{
							_vValue.charAt(0);
							_vValue =  _vValue + '';
						}
						catch(_Error_)
						{
							flagReprocessed = true;
						}
					}
					break;
				case 'date':
					_vValue = StrXmlDate(_vValue);
					break;
			}
			if (_sFormatPARAM == 'xml' && !flagReprocessed)
			{
				if (!StrBegins(Trim(_vValue), '&lt;![CDATA['))
					_vValue = HtmlEncode(_vValue);
			}

			var nameless = (_sName == undefined || _sName == null);

			if (nameless)
			{
				if (_sFormatPARAM == 'json')
				{
					if (flagReprocessed)
					{
						o2t(_vValue, _sFormatPARAM, iDepth + 1, _sName, _maxDepth);
					}
					else
						_AppendStr(writeJSONValue(_vValue, flagReprocessed));
				}
				else
				{
					if (_sName != null)
						_sName = (__sNoName == undefined ? 'value' : __sNoName);
						//_AppendStr('<' + (__sNoName == undefined ? 'value' : __sNoName)+'>');

					if (flagReprocessed)
					{
						o2t(_vValue, _sFormatPARAM, iDepth + 1, _sName, _maxDepth);
					}
					else
					{
						_AppendStr('<' + _sName +'>');
						_AppendStr(_vValue);
						_AppendStr('</' + _sName +'>');
					}
					//if (_sName != null) _AppendStr('</' + (__sNoName == undefined ? 'value' : __sNoName) +'>');
				}
			}
			else
			{
				if (_sFormatPARAM == 'json')
				{
					_AppendStr(CodeLiteral(_sName, '&quot;') + ':');
					if (flagReprocessed)
					{
						o2t(_vValue, _sFormatPARAM, iDepth + 1, _sName, _maxDepth);
					}
					else
						_AppendStr(writeJSONValue(_vValue));
				}
				else
				{
					//_AppendStr('<' + _sName + '>');

					if (flagReprocessed)
					{
						o2t(_vValue, _sFormatPARAM, iDepth + 1, _sName, _maxDepth);
					}
					else
					{
						_AppendStr('<' + _sName + '>');
						_AppendStr(_vValue);
						_AppendStr('</' + _sName + '>');
					}
					//_AppendStr('</' + _sName + '>');
				}
			}
		}

		function merger(_aDataPARAM, _sName, _bObj, _sFormatPARAM)
		{
			var elem;
			if (_sFormatPARAM != 'json') _sFormatPARAM = 'xml';

			var titled = (_sName != null && _sName != '' && _sName != undefined);

			if (_sFormatPARAM == 'json')
			{
				if (titled)
					_AppendStr(CodeLiteral(_sName, '&quot;') + ':');
				_AppendStr(_bObj ? '{' : '[');
				var sub, i = 0;

				for (elem in _aDataPARAM)
				{
					if (i > 0)
						_AppendStr(',');
					i++;

					if (elem[2])
					{
						merger(elem[1], elem[0], false, _sFormatPARAM);
					}
					else
						_writeElem(elem[0], elem[1]);
				}

				_AppendStr(_bObj ? '}' : ']');

			}
			else
			{
				if (_bObj)
				{
					if (titled)
						_AppendStr('<' + _sName + '>');

					for (elem in _aDataPARAM)
					{
						if (elem[2])
						{
							merger(elem[1], elem[0], false, _sFormatPARAM);
						}
						else
							_writeElem(elem[0], elem[1]);
					}
					if (titled)
						_AppendStr('</' + _sName + '>');
				}
				else
				{
					for (elem in _aDataPARAM)
					{
						if (titled)
							_AppendStr('<' + _sName + '>');

						if (elem[2])
						{
							merger(elem[1], elem[0], false, _sFormatPARAM);
						}
						else
							_writeElem(elem[0], elem[1]);

						if (titled)
							_AppendStr('</' + _sName + '>');
					}
				}
			}
		}

		function o2t(_vObjectPARAM, _sFormatPARAM, iDepth, __sNoName, _maxDepth)
		{
			if (_sFormatPARAM != 'json') _sFormatPARAM = 'xml';


			var _aSubPairs, _iObjType, _vField;
			_aSubPairs = Array();
			switch (DataType(_vObjectPARAM))
			{
				case 'object':
					_iObjType = 0;
					try
					{
						_vObjectPARAM.Name;
						_iObjType = 1;
					}
					catch(_Er_)
					{
						try
						{
							_vObjectPARAM.HasProperty('p');
							_iObjType = 2;
						}
						catch(_Err_)
						{
							try
							{
								if (IsArray(_vObjectPARAM))
									_iObjType = 3;
							}
							catch(_Error_)
							{
							}
						}
					}

					switch (_iObjType)
					{
						case 1:
							var _vTempVal, _vFields, bDeep, _sFldName, _aFldNames = ArraySelectDistinct(ArrayExtract(_vObjectPARAM, 'This.Name'), 'This');

							for (_sFldName in _aFldNames)
							{
								_vTempVal = undefined;
								bDeep = false;
								for (_vField in ArraySelect(_vObjectPARAM, 'This.Name == ' + CodeLiteral(_sFldName)))
								{
									if (_vField.IsMultiple)
									{
										if (_vTempVal == undefined)
											_vTempVal = new Array();
										_vTempVal.push(([(_sFormatPARAM == 'xml' ? _vField.Name: null), (_vField.HasValue ? (_sFormatPARAM == 'xml' ? _vField.XmlValue: _vField.Value) : _vField), false]));

										bDeep = true;
									}
									else
									{
										_vTempVal = ([_vField.Name, (_vField.HasValue || _vField.Type != '' && _vField.Type != 'variant' && _vField.Type != 'binary' ? (_sFormatPARAM == 'xml' ? _vField.XmlValue: _vField.Value) : _vField) , false]);
									}
								}

								if (bDeep)
									_aSubPairs.push(([(_sFormatPARAM == 'xml'? null : _sFldName), _vTempVal, true]));
								else
									_aSubPairs.push(_vTempVal);
							}
							break;
						case 2:
							for (_vField in _vObjectPARAM)
								_aSubPairs.push(([_vField, _vObjectPARAM.GetProperty(_vField), false]));
							break;
						case 3:
							for (_vField in _vObjectPARAM)
								_aSubPairs.push(([undefined, _vField, false]));
							break;
					}

					if (_sFormatPARAM == 'xml' && __sNoName != undefined)
					{
						if (_iObjType != 3)
							_AppendStr('<' + __sNoName + '>');
						merger(_aSubPairs, null, (_iObjType == 1 || _iObjType == 2), _sFormatPARAM);

						if (_iObjType != 3)
							_AppendStr('</' + __sNoName + '>');
					}
					else
					{
						merger(_aSubPairs, null, (_iObjType == 1 || _iObjType == 2), _sFormatPARAM);
					}
					break;
				default:
					_writeElem('value', _vObjectPARAM);
			}
		}

		try
		{
			iMaxDepthPARAM = Int(iMaxDepthPARAM);
			if (iMaxDepthPARAM < 1)
				throw 'wat?';
		}
		catch(_x_)
		{
			iMaxDepthPARAM = 10;
		}

		var _RESULT;
		var bOld = !LdsIsServer && System.IsWebClient;
		if (bOld)
		{
			_RESULT = new Array();
		}
		else
		{
			_RESULT = new Binary;
			_RESULT.AssignStr('');
		}

		o2t(objectPARAM, sFormatPARAM, 0, undefined, iMaxDepthPARAM);

		return (bOld ? ArrayMerge(_RESULT, 'This', '') : _RESULT.GetStr());
	"/>


	<create_object_version PROPERTY="1" PARAM="oDocParam" EXPR="
			sObjectName = '';
			try
			{
				teObject = oDocParam.TopElem;
				sObjectName = teObject.Name;

				fldAdminAccessCatalog = admin_access_catalogs.GetOptChildByKey( sObjectName );
				if ( fldAdminAccessCatalog != undefined &amp;&amp; fldAdminAccessCatalog.backup_object_version )
				{
					oLastSavedData = oDocParam.LastSavedData;
					oLastSavedDataCopy = oLastSavedData.Clone();
					oLastSavedDataCopy.doc_info.Clear();
					oDocCopy = teObject.Clone();
					oDocCopy.doc_info.Clear();
					if ( ! oDocCopy.EqualToElem( oLastSavedDataCopy ) )
					{
						docObjectVersion = OpenNewDoc( 'x-local://wtv/wtv_object_version.xmd' );
						try
						{
							docObjectVersion.TopElem.object_modification_date = teObject.doc_info.modification.date;
						}
						catch ( e )
						{
							docObjectVersion.TopElem.object_modification_date = Date();
						}
						try
						{
							docObjectVersion.TopElem.name = tools.get_doc_desc( teObject );
						}
						catch ( e )
						{
						}
						docObjectVersion.TopElem.catalog_name = sObjectName;
						docObjectVersion.TopElem.object_id = oDocParam.DocID;
						docObjectVersion.TopElem.object_xml = oLastSavedData.GetXml( { 'tabs': false } );
						//docObjectVersion.BindToDb( 'trash' );
						docObjectVersion.BindToDb( DefaultDb );
						docObjectVersion.Save();
					}
				}
			}
			catch ( err )
			{
				alert( 'Error create_object_version for object ' + sObjectName + ': ' + err );
			}
	"/>



	<get_mandatory_learnings PROPERTY="1" PARAM="iPersonIDParam" PARAM="iObjectIDParam" PARAM="tePersonParam" PARAM="teObjectParam" EXPR="
			try
			{
				if ( tePersonParam == null || tePersonParam == '' )
					throw 'no_doc';
			}
			catch ( dd )
			{
			    tePersonParam = OpenDoc( UrlFromDocID( iPersonIDParam ) ).TopElem;
			}

			var resArray = Array();

			function add_objects( iSourseObjectIDParam )
			{
				try
				{
					teSourseObjectParam = OpenDoc( UrlFromDocID( iSourseObjectIDParam ) ).TopElem;
				}
				catch ( err )
				{
					return;
				}

				switch( teObjectParam.Name )
				{
					case 'course':
						xarrEduProgram = QueryCatalogByKeys( 'education_methods', 'id', ArrayExtract( teSourseObjectParam.education_methods, 'PrimaryKey' ) );
						for ( catElem in xarrEduProgram )
							if ( catElem.course_id == iObjectIDParam )
							{
								resArray[ ArrayCount( resArray ) ] = ({
									'source_object_id': iSourseObjectIDParam,
									'source_object_type': teSourseObjectParam.Name,
									'source_object_name': teSourseObjectParam.name,
									'object_id': catElem.id,
									'object_type': catElem.Name,
									'object_name': catElem.name
								});
							}
						break;

					case 'assessment':
						xarrAssessments = QueryCatalogByKeys( 'assessments', 'id', ArrayExtract( teSourseObjectParam.assessments, 'PrimaryKey' ) );
						for ( catElem in xarrAssessments )
							if ( catElem.id == iObjectIDParam )
							{
								resArray[ ArrayCount( resArray ) ] = ({
									'source_object_id': iSourseObjectIDParam,
									'source_object_type': teSourseObjectParam.Name,
									'source_object_name': teSourseObjectParam.name,
									'object_id': catElem.id,
									'object_type': catElem.Name,
									'object_name': catElem.title
								});
							}
						break;

					default:
						arrSourse = teObjectParam.Name == 'compound_program' ? teSourseObjectParam.compound_programs : teSourseObjectParam.education_methods;
						for ( fldEduMethodElem in arrSourse )
							if ( fldEduMethodElem.PrimaryKey == iObjectIDParam )
							{
								resArray[ ArrayCount( resArray ) ] = ({
									'source_object_id': iSourseObjectIDParam,
									'source_object_type': teSourseObjectParam.Name,
									'source_object_name': teSourseObjectParam.name,
									'object_id': iObjectIDParam,
									'object_type': teObjectParam.Name,
									'object_name': teObjectParam.name
								});
							}
						break;
				}
			}

			try
			{
				tePosition = OpenDoc( UrlFromDocID( tePersonParam.position_id ) ).TopElem;
			}
			catch ( err )
			{
				tePosition = undefined;
			}
			if ( tePosition != undefined )
			{
				add_objects( tePosition.position_common_id );

				try
				{
					tePositionFamily = OpenDoc( UrlFromDocID( tePersonParam.position_family_id ) ).TopElem;
				}
				catch ( err )
				{
					tePositionFamily = undefined;
				}
				if ( tePositionFamily != undefined )
					add_objects( tePositionFamily.subdivision_group_id );
			}

			xarrGroup = XQuery( 'for $elem in group_collaborators where $elem/collaborator_id = ' + iPersonIDParam + ' return $elem' );
			for ( catGroupElem in xarrGroup )
				add_objects( catGroupElem.group_id );

			return resArray;
	"/>


	<!-- UNI -->
	<get_relative_boss_types PROPERTY="1" PARAM="objectParam" PARAM="oPersonParam" EXPR="
			iObjectID = 0;
			teObject = null;
			try
			{
				iObjectID = objectParam.Value;
			}
			catch ( err )
			{
				try
				{
					iObjectID = Int( objectParam );
				}
				catch ( err )
				{
				}
			}
			if ( iObjectID == 0 )
			{
				try
				{
					iObjectID = objectParam.Doc.DocID;
					teObject = objectParam;
				}
				catch ( err )
				{
					try
					{
						iObjectID = objectParam.DocID;
						teObject = objectParam.TopElem;
					}
					catch( err )
					{
						throw 'Invalid input parameters. Unable to retrieve the object ID.';
					}
				}
			}

			xarrManagers = ArrayDirect( XQuery( 'for $elem in func_managers where $elem/person_id = ' + iObjectID + ' and $elem/boss_type_id != null() order by $elem/catalog return $elem' ) );
			catManager = ArrayOptFirstElem( xarrManagers );
			if ( catManager == undefined )
				return [];

			iPersonID = OptInt( oPersonParam );
			arrPersons = undefined;
			arrPersonsCount = 0;
			sPrimaryKey = 'id';
			bIsProperty = true;
			if ( iPersonID == undefined )
			{
				oFirstPerson = ArrayOptFirstElem( oPersonParam );
				if ( oFirstPerson == undefined )
					return [];

				try
				{
					sPrimaryKey = oFirstPerson.PrimaryKey.Name;
					bIsProperty = false;
				}
				catch ( err )
				{
				}
				arrPersonsCount = ArrayCount( oPersonParam );
				if ( arrPersonsCount == 1 )
					iPersonID = Int( GetObjectProperty( oFirstPerson, sPrimaryKey ) );
				arrPersons = oPersonParam;
			}

			xarrManagersCount = ArrayCount( xarrManagers );
			iManagerCounter = 1;
			arrResult = Array();

			while ( catManager.catalog == 'collaborator' )
			{
				if ( iPersonID == undefined )
				{
					if ( ArrayOptFindByKey( arrPersons, ( '' + catManager.object_id ), sPrimaryKey ) != undefined )
						arrResult.push( catManager );
				}
				else
				{
					if ( catManager.object_id == iPersonID )
						arrResult.push( catManager );
				}

				if ( iManagerCounter &gt;= xarrManagersCount )
					return arrResult;
				catManager = xarrManagers[ iManagerCounter ];
				iManagerCounter++;
			}

			while ( catManager.catalog == 'group' )
			{
				if ( iPersonID == undefined )
				{
					if ( ArrayOptFirstElem( XQuery( 'for $elem in group_collaborators where $elem/group_id = ' + catManager.object_id + ' and MatchSome( $elem/collaborator_id, (' + ArrayMerge( arrPersons, sPrimaryKey, ',' ) + ') ) return $elem' ) ) != undefined )
						arrResult.push( catManager );
				}
				else
				{
					if ( ArrayOptFirstElem( XQuery( 'for $elem in group_collaborators where $elem/group_id = ' + catManager.object_id + ' and $elem/collaborator_id = ' + iPersonID + ' return $elem' ) ) != undefined )
						arrResult.push( catManager );
				}

				if ( iManagerCounter &gt;= xarrManagersCount )
					return arrResult;
				catManager = xarrManagers[ iManagerCounter ];
				iManagerCounter++;
			}

			dFirstOrg = true;
			while ( catManager.catalog == 'org' )
			{
				if ( iPersonID == undefined )
				{
					if ( dFirstOrg )
					{
						if ( bIsProperty || oFirstPerson.Name != 'collaborator' || ! oFirstPerson.ChildExists( 'org_id' ) )
							arrPersons = QueryCatalogByKeys( 'collaborators', 'id', ArrayExtract( arrPersons, 'Int(' + sPrimaryKey + ')' ) );
						dFirstOrg = false;
					}
					if ( ArrayOptFindByKey( arrPersons, ( '' + catManager.object_id ), 'org_id' ) != undefined )
						arrResult.push( catManager );
				}
				else
				{
					if ( dFirstOrg )
					{
						catPerson = ArrayFirstElem( XQuery( 'for $elem in collaborators where $elem/id = ' + iPersonID + ' return $elem' ) );
						dFirstOrg = false;
					}
					if ( catPerson.org_id == catManager.object_id )
						arrResult.push( catManager );
				}

				if ( iManagerCounter &gt;= xarrManagersCount )
					return arrResult;
				catManager = xarrManagers[ iManagerCounter ];
				iManagerCounter++;
			}

			while ( catManager.catalog == 'position' )
			{
				if ( catManager.parent_id.HasValue || catManager.org_id.HasValue )
				{
					if ( iPersonID == undefined )
					{
						if ( ArrayOptFirstElem( tools.xquery( 'for $elem in subs where IsHierChild( $elem/id, ' + ( catManager.parent_id.HasValue ? catManager.parent_id : catManager.org_id ) + ' ) and $elem/basic_collaborator_id != null() and MatchSome( $elem/basic_collaborator_id, (' + ArrayMerge( arrPersons, sPrimaryKey, ',' ) + ') ) order by $elem/Hier() return $elem/basic_collaborator_id' ) ) != undefined )
							arrResult.push( catManager );
					}
					else
					{
						if ( ArrayOptFirstElem( tools.xquery( 'for $elem in subs where IsHierChild( $elem/id, ' + ( catManager.parent_id.HasValue ? catManager.parent_id : catManager.org_id ) + ' ) and $elem/basic_collaborator_id = ' + iPersonID + ' order by $elem/Hier() return $elem/basic_collaborator_id' ) ) != undefined )
							arrResult.push( catManager );
					}
				}

				if ( iManagerCounter &gt;= xarrManagersCount )
					return arrResult;
				catManager = xarrManagers[ iManagerCounter ];
				iManagerCounter++;
			}

			while ( catManager.catalog == 'subdivision' )
			{
				if ( iPersonID == undefined )
				{
					if ( ArrayOptFirstElem( tools.xquery( 'for $elem in subs where IsHierChild( $elem/id, ' + catManager.object_id + ' ) and $elem/basic_collaborator_id != null() and MatchSome( $elem/basic_collaborator_id, (' + ArrayMerge( arrPersons, sPrimaryKey, ',' ) + ') ) order by $elem/Hier() return $elem/basic_collaborator_id' ) ) != undefined )
						arrResult.push( catManager );
				}
				else
				{
					if ( ArrayOptFirstElem( tools.xquery( 'for $elem in subs where IsHierChild( $elem/id, ' + catManager.object_id + ' ) and $elem/basic_collaborator_id = ' + iPersonID + ' order by $elem/Hier() return $elem/basic_collaborator_id' ) ) != undefined )
						arrResult.push( catManager );
				}

				if ( iManagerCounter &gt;= xarrManagersCount )
					return arrResult;
				catManager = xarrManagers[ iManagerCounter ];
				iManagerCounter++;
			}

			return arrResult;
	"/>

	<!-- UNI -->
	<get_relative_operations PROPERTY="1" PARAM="oManagerParam" EXPR="
			arrFuncManagers = oManagerParam;

			arrFuncManagers = ArraySelectDistinct( arrFuncManagers, 'boss_type_id' );
			xarrBossTypes = QueryCatalogByKeys( 'boss_types', 'id', ArrayExtract( arrFuncManagers, 'boss_type_id' ) );

			return tools.get_relative_operations_by_boss_types( xarrBossTypes );
	"/>

	<check_relative_operation PROPERTY="1" PARAM="oManagerParam" PARAM="oOperationParam" EXPR="
			iOperationID = OptInt( oOperationParam );
			if ( iOperationID == undefined )
			{
				catOperation = ArrayOptFirstElem( tools.xquery( 'for $elem in operations where $elem/action = ' + CodeLiteral( oOperationParam ) + ' return $elem/id' ) );
				if ( catOperation == undefined )
					return false;
				iOperationID = catOperation.id.Value;
			}

			arrFuncManagers = oManagerParam;
			xarrBossTypes = QueryCatalogByKeys( 'boss_types', 'id', ArrayExtract( arrFuncManagers, 'boss_type_id' ) );
			for ( catBossTypeElem in xarrBossTypes )
				if ( catBossTypeElem.operations.HasValue &amp;&amp; ArrayOptFind( String( catBossTypeElem.operations ).split( ';' ), 'This==\'' + iOperationID + '\'' ) != undefined )
					return true;

			return false;
	"/>

	<get_object_relative_boss_types PROPERTY="1" PARAM="iUserIDParam" PARAM="iObjectIDParam" EXPR="

			var iObjectID = iObjectIDParam;
			var teObject = null
			try
			{
				teObject = OpenDoc( UrlFromDocID( iObjectID ) ).TopElem;
			}
			catch(ex)
			{
			}


			arrResult = new Array();
			if (teObject != null)
			{
				switch(teObject.Name)
				{
					case 'event':

						arrManagers = new Array();
						if(teObject.org_id.HasValue)
							arrManagers = ArrayUnion(arrManagers, XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/catalog = \'org\' and $elem/object_id = ' + teObject.org_id + ' order by $elem/catalog return $elem' ));
						if(teObject.subdivision_id.HasValue)
							arrManagers = ArrayUnion(arrManagers, XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/catalog = \'subdivision\' and $elem/object_id = ' + teObject.subdivision_id + ' order by $elem/catalog return $elem' ));

						for(fldGroup in teObject.groups)
						{
							arrManagers = ArrayUnion(arrManagers, XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/catalog = \'group\' and $elem/object_id = ' + fldGroup.group_id + ' order by $elem/catalog return $elem' ));
						}

						arrManagers = ArraySelectDistinct( arrManagers, 'boss_type_id' );
						xarrBossTypes = QueryCatalogByKeys( 'boss_types', 'id', ArrayExtract( arrManagers, 'boss_type_id' ) );

						if(teObject.tutors.ChildByKeyExists(iUserIDParam))
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'event_tutor\' return $elem' ));
						}

						if( ArrayOptFind(teObject.even_preparations, 'This.person_id == ' + iUserIDParam) != undefined )
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'event_preparation\' return $elem' ));
						}
						if(ArrayOptFirstElem(XQuery( 'for $elem in event_results where $elem/person_id = ' + iUserIDParam + ' and $elem/event_id=' + iObjectID + ' return $elem' )) != undefined)
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'event_participaint\' return $elem' ));
						}

						if( ArrayOptFirstElem( XQuery( 'for $elem in event_lectors where $elem/person_id = ' + iUserIDParam + ' and $elem/event_id = ' + iObjectID + ' return $elem' ) ) != undefined )
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'event_lector\' return $elem' ));
						}
						//arrSubPersons = tools.get_sub_person_ids_by_func_manager_id(iUserIDParam);
						arrSubPersons = tools.get_direct_sub_person_ids(iUserIDParam);
						for(fldCollaborator in teObject.collaborators)
						{
							if(ArrayOptFind(arrSubPersons, 'This==' + fldCollaborator.PrimaryKey)!=undefined)
							{
								xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'event_participaint_boss\' return $elem' ));
								break;
							}
						}
						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;event&quot;\') != undefined'), 'PrimaryKey');

						break;

					case 'org':

						arrManagers = new Array();
						arrManagers = XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/catalog = \'org\' and $elem/object_id = ' + iObjectIDParam + ' order by $elem/catalog return $elem' );
						xarrBossTypes = QueryCatalogByKeys( 'boss_types', 'id', ArrayExtract( arrManagers, 'boss_type_id' ));
						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;org&quot;\') != undefined'), 'PrimaryKey');
						break;

					case 'subdivision':

						arrManagers = new Array();
						oSub = teObject;
						iSubId = iObjectID;
						do
						{
							arrManagers = ArrayUnion(arrManagers, XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/catalog = \'subdivision\' and $elem/object_id = ' + iSubId + ' order by $elem/catalog return $elem' ));
							arrManagers = ArrayUnion(arrManagers, XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/catalog = \'position\' and $elem/parent_id = ' + iSubId + ' order by $elem/catalog return $elem' ));
							if(oSub.parent_object_id.HasValue && oSub.parent_object_id.OptForeignElem != undefined)
							{
								iSubId = oSub.parent_object_id;
								oSub = oSub.parent_object_id.ForeignElem;
							}
							else
								iSubId = null;
						}
						while(iSubId);
						if(teObject.org_id.HasValue)
						{
							arrManagers = ArrayUnion(arrManagers, XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/catalog = \'org\' and $elem/object_id = ' + teObject.org_id + ' order by $elem/catalog return $elem' ));
						}
						xarrBossTypes = QueryCatalogByKeys( 'boss_types', 'id', ArrayExtract( arrManagers, 'boss_type_id' ));
						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;' + teObject.Name + '&quot;\') != undefined'), 'PrimaryKey');
						break;

					case 'group': // Manu: I could not understand what the hell was here.
						arrManagers = XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/object_id = ' + iObjectIDParam + ' and $elem/catalog = \'group\' return $elem' );
						xarrBossTypes = QueryCatalogByKeys( 'boss_types', 'id', ArraySelectDistinct( ArrayExtract( arrManagers, 'boss_type_id' ), 'This' ) );
						arrResult = ArraySelect( xarrBossTypes, 'ArrayCount(This.object_type)==0 || ArrayOptFind(This.object_type,\'This.Value==&quot;group&quot;\')!=undefined' );
						break;

					case 'personnel_reserve':

						xarrBossTypes = Array();

						fldTutor=teObject.talent_pool_func_managers.GetOptChildByKey(iUserIDParam)
						if(fldTutor!=undefined&&fldTutor.boss_type_id.HasValue)
						{
							xarrBossTypes = XQuery( 'for $elem in boss_types where $elem/id = '+fldTutor.boss_type_id+' return $elem' );
						}

						if (teObject.person_id==iUserIDParam)
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'talent_pool_participaint\' return $elem' ));
						}

						if (teObject.career_reserve_type_id.OptForeignElem!=undefined)
						{
							arrFuncManagers=XQuery('for $elem in talent_pool_func_managers where $elem/object_id='+teObject.career_reserve_type_id+' and $elem/person_id= '+iUserIDParam+' return $elem')

							for (fldFuncManager in arrFuncManagers)
							{
								xarrBossTypes = ArrayUnion(xarrBossTypes,XQuery( 'for $elem in boss_types where $elem/id = '+fldFuncManager.boss_type_id+' return $elem' ));

							}
						}

						xarrSubPersons = tools.get_sub_persons_by_func_manager_id(iUserIDParam);

						if(ArrayOptFind(xarrSubPersons, 'This.PrimaryKey == ' + teObject.person_id) != undefined && teObject.person_id != iUserIDParam)
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'talent_pool_boss\' return $elem' ));
						}
						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;personnel_reserve&quot;\') != undefined'), 'PrimaryKey');

						break;

					case 'career_reserve':

						xarrBossTypes = Array();

						fldTutor=teObject.tutors.GetOptChildByKey(iUserIDParam)
						if(fldTutor!=undefined&&fldTutor.boss_type_id.HasValue)
						{
							xarrBossTypes = XQuery( 'for $elem in boss_types where $elem/id = '+fldTutor.boss_type_id+' return $elem' );
						}

						for( fldTask in teObject.tasks )
						{
							if (fldTask.commission_persons.ChildByKeyExists(iUserIDParam))
							{
								xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'talent_pool_commission\' return $elem' ));
								break;
							}
						}

						if (teObject.person_id==iUserIDParam)
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'talent_pool_participaint\' return $elem' ));
						}

						xarrSubPersons = tools.get_sub_persons_by_func_manager_id(iUserIDParam);

						if(ArrayOptFind(xarrSubPersons, 'This.PrimaryKey == ' + teObject.person_id) != undefined && teObject.person_id != iUserIDParam)
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'talent_pool_boss\' return $elem' ));
						}
						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;career_reserve&quot;\') != undefined'), 'PrimaryKey');

						break;

					case 'career_reserve_type':

						xarrBossTypes = Array();

						fldTutor=teObject.talent_pool_func_managers.GetOptChildByKey(iUserIDParam)
						if(fldTutor!=undefined&&fldTutor.boss_type_id.HasValue)
						{
							xarrBossTypes = XQuery( 'for $elem in boss_types where $elem/id = '+fldTutor.boss_type_id+' return $elem' );
						}

						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;career_reserve_type&quot;\') != undefined'), 'PrimaryKey');

						break;

					case 'key_position':

						xarrBossTypes = Array();

						fldTutor=teObject.talent_pool_func_managers.GetOptChildByKey(iUserIDParam)
						if(fldTutor!=undefined&&fldTutor.boss_type_id.HasValue)
						{
							xarrBossTypes = XQuery( 'for $elem in boss_types where $elem/id = '+fldTutor.boss_type_id+' return $elem' );
						}


						if (teObject.career_reserve_type_id.OptForeignElem!=undefined)
						{
								arrFuncManagers=XQuery('for $elem in talent_pool_func_managers where $elem/object_id='+teObject.career_reserve_type_id+' and $elem/person_id= '+iUserIDParam+' return $elem')

								for (fldFuncManager in arrFuncManagers)
								{
									xarrBossTypes = ArrayUnion(xarrBossTypes,XQuery( 'for $elem in boss_types where $elem/id = '+fldFuncManager.boss_type_id+' return $elem' ));

								}
						}

						if (ArrayOptFirstElem(XQuery('for $elem in successors where $elem/person_id='+iUserIDParam+' and  $elem/key_position_id='+iObjectID+' return $elem'))!=undefined)
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'talent_pool_participaint\' return $elem' ));
						}
						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;key_position&quot;\') != undefined'), 'PrimaryKey');

						break;

					case 'successor':

						xarrBossTypes = Array();


						if (teObject.person_id==iUserIDParam)
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'talent_pool_participaint\' return $elem' ));
						}

						fldKeyPosition=teObject.key_position_id.OptForeignElem
						if (fldKeyPosition!=undefined)
						{
							arrFuncManagers=XQuery('for $elem in talent_pool_func_managers where $elem/object_id='+fldKeyPosition.id+' and $elem/person_id= '+iUserIDParam+' return $elem')

							for (fldFuncManager in arrFuncManagers)
							{
								xarrBossTypes = ArrayUnion(xarrBossTypes,XQuery( 'for $elem in boss_types where $elem/id = '+fldFuncManager.boss_type_id+' return $elem' ));
							}

							fldCareerReserveType=fldKeyPosition.career_reserve_type_id.OptForeignElem
							if (fldCareerReserveType!=undefined)
							{
								arrFuncManagers=XQuery('for $elem in talent_pool_func_managers where $elem/object_id='+fldCareerReserveType.id+' and $elem/person_id= '+iUserIDParam+' return $elem')
								for (fldFuncManager in arrFuncManagers)
								{
									xarrBossTypes = ArrayUnion(xarrBossTypes,XQuery( 'for $elem in boss_types where $elem/id = '+fldFuncManager.boss_type_id+' return $elem' ));
								}
							}

						}
						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;successor&quot;\') != undefined'), 'PrimaryKey');

						break;
					case 'task':

						if (teObject.source_object_id.HasValue&&teObject.source_object_type.HasValue)
						{
							xarrBossTypes = tools.get_object_relative_boss_types(iUserIDParam, teObject.source_object_id);
							arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;'+teObject.source_object_type+'&quot;\') != undefined'), 'PrimaryKey');
						}

						break;
					case 'project_participant':
							if (teObject.ChildExists('project_id')&&teObject.project_id.HasValue)
							{
								iObjectID=teObject.project_id
							}
					case 'project':

						arrIDs=[]
						arrProjectGroups=XQuery('for $elem in project_participants where $elem/project_id=' + iObjectID + ' and $elem/catalog=\'group\' and $elem/boss_type_id!=null()  and ( $elem/status_id = \'active\' or $elem/status_id = null() ) return $elem')
						for (fldProjectGroup in arrProjectGroups)
						{
							if (ArrayOptFirstElem(XQuery('for $elem in group_collaborators where $elem/collaborator_id='+iUserIDParam+' and $elem/group_id='+fldProjectGroup.object_id+' return $elem'))!=undefined)
							{
								arrIDs.push(fldProjectGroup.boss_type_id);
							}
						}
						arrIDs=ArrayUnion(arrIDs,ArrayExtract(XQuery('for $elem in project_participants where $elem/object_id=' + iUserIDParam + ' and $elem/project_id=' + iObjectID + ' and $elem/catalog=\'collaborator\' and $elem/boss_type_id!=null()  and ( $elem/status_id = \'active\' or $elem/status_id = null() ) return $elem'),'boss_type_id'))

						xarrBossTypes = QueryCatalogByKeys( 'boss_types', 'id', arrIDs);

						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;project&quot;\') != undefined'), 'PrimaryKey');

						break;

					case 'collaborator':

						var _aFuncManagers = XQuery('for $elem in func_managers where $elem/object_id = ' + iObjectID + ' and $elem/person_id = ' + iUserIDParam + ' return $elem');

						var v_im_in_groups = ArrayMerge(XQuery('for $elem in group_collaborators where $elem/collaborator_id = ' + iObjectID + ' return $elem'), 'This.group_id', ';');

						var a_my_groups = XQuery('for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/catalog = \'group\' return $elem');
						a_my_groups = ArraySelect(a_my_groups, 'StrContains(&quot;' + v_im_in_groups + '&quot;, object_id)');
						_aFuncManagers = ArrayUnion(_aFuncManagers, a_my_groups);

						var a_boss_types_arr = Array();
						var a_spat_id = Array();
						try
						{
							a_spat_id[ArrayCount(a_spat_id)] = teObject.org_id;
							var cat_parent_document_object = teObject.position_id.ForeignElem.parent_object_id.OptForeignElem;

							var i_boss_of_sub, cat_my_position = ArrayOptFirstElem(XQuery('for $elem in positions where $elem/basic_collaborator_id = ' + iUserIDParam + ' return $elem'));
							if (cat_my_position != undefined &amp;&amp; cat_my_position.is_boss && cat_my_position.parent_object_id.HasValue)
								i_boss_of_sub = cat_my_position.parent_object_id;
							else
								i_boss_of_sub = null;

							cat_parent_document_object = ArrayOptFirstElem(XQuery('for $sub in subdivisions where $sub/id = '+XQueryLiteral(cat_parent_document_object.PrimaryKey)+ ' return $sub'));
							while (cat_parent_document_object != undefined)
							{
								a_spat_id[ArrayCount(a_spat_id)] = cat_parent_document_object.PrimaryKey;

								if (i_boss_of_sub == cat_parent_document_object.PrimaryKey)
								{
									a_boss_types_arr = ArrayUnion(a_boss_types_arr, XQuery('for $elem in boss_types where $elem/is_std = true() return $elem'));


									i_boss_of_sub = null;
								}

								cat_parent_document_object = ArrayOptFirstElem(XQuery('for $sub in subdivisions where $sub/id = '+XQueryLiteral(cat_parent_document_object.parent_object_id)+ ' return $sub'));
							}
						}
						catch(_gop_)
						{}

						if (ArrayOptFirstElem(a_spat_id) != undefined)
						{
							_aFuncManagers = ArrayUnion(_aFuncManagers, ArraySelect(QueryCatalogByKeys('func_managers', 'object_id', a_spat_id), 'This.person_id == '+ iUserIDParam));
						}

						a_boss_types_arr = ArrayUnion(QueryCatalogByKeys('boss_types', 'id', ArrayExtract(_aFuncManagers, 'boss_type_id')), a_boss_types_arr);

						return ArraySelectDistinct(ArraySelect(a_boss_types_arr, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;collaborator&quot;\') != undefined'), 'PrimaryKey');
						break;
					case 'recruitment_plan':
						xarrBossTypes = Array();
						if(teObject.coordinators.ChildByKeyExists(iUserIDParam))
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes,XQuery( 'for $elem in boss_types where $elem/id = ' + teObject.coordinators.GetChildByKey(iUserIDParam).boss_type_id +' return $elem' ));
						}
						return xarrBossTypes;
						break;
					case 'vacancy_response':
						xarrBossTypes = Array();
						if (teObject!=null)
						{
							if (teObject.vacancy_id.HasValue)
							{
								teVacancy=null

								try
								{

									teVacancy = OpenDoc( UrlFromDocID( teObject.vacancy_id ) ).TopElem;
								}
								catch(err)
								{}
								bRecruiter=((teVacancy!=null&&teVacancy.collaborator_id.HasValue&&teVacancy.collaborator_id==iUserIDParam)||(teObject.recruiter_person_id.HasValue&&teObject.recruiter_person_id==iUserIDParam))
								if( bRecruiter)
								{
									xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'recruitment_principal\' return $elem' ));
								}
							}
						}
						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;vacancy_response&quot;\') != undefined'), 'PrimaryKey');
						break;
					case 'recommendation':
						xarrBossTypes = Array();
						if (teObject!=null)
						{
							if (teObject.vacancy_id.HasValue)
							{
								teVacancy=null

								try
								{

									teVacancy = OpenDoc( UrlFromDocID( teObject.vacancy_id ) ).TopElem;
								}
								catch(err)
								{}
								bRecruiter=((teVacancy!=null&&teVacancy.collaborator_id.HasValue&&teVacancy.collaborator_id==iUserIDParam))
								if( bRecruiter)
								{
									xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'recruitment_principal\' return $elem' ));
								}
							}
						}
						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;recommendation&quot;\') != undefined'), 'PrimaryKey');
						break;
					case 'education_plan':

						arrManagers = new Array();

						if (teObject.group_id.HasValue)
						{
							arrManagers = ArrayUnion(arrManagers, XQuery( 'for $elem in func_managers where $elem/person_id = ' + iUserIDParam + ' and $elem/object_name = \'group\' and $elem/object_id = ' + teObject.group_id + ' order by $elem/catalog return $elem' ));
						}

						arrManagers = ArraySelectDistinct( arrManagers, 'boss_type_id' );
						xarrBossTypes = QueryCatalogByKeys( 'boss_types', 'id', ArrayExtract( arrManagers, 'boss_type_id' ) );

						if(teObject.tutor_id==iUserIDParam)
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'education_plan_element_tutor\' or $elem/code = \'education_plan_tutor\' return $elem' ));
						}

						if (tools.is_user_boss(iUserIDParam, teObject.person_id))
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'education_plan_participaint_boss\' return $elem' ));
						}

						if (iUserIDParam == teObject.person_id)
						{
							xarrBossTypes = ArrayUnion(xarrBossTypes, XQuery( 'for $elem in boss_types where $elem/code = \'education_plan_participaint\' return $elem' ));
						}

						xarrBossTypes = ArraySelectDistinct(xarrBossTypes, 'id');
						arrResult = ArraySelectDistinct(ArraySelect(xarrBossTypes, 'ArrayOptFirstElem(This.object_type) == undefined || ArrayOptFind(This.object_type, \'This.Value == &quot;education_plan&quot;\') != undefined'), 'PrimaryKey');

						break;

				}
			}
			return arrResult;
	"/>

	<get_relative_operations_by_boss_types PROPERTY="1" PARAM="arrBossTypesParam" PARAM="sCatalogNameParam" EXPR="
			arrOperationsIDs = [];
			for ( catBossTypeElem in arrBossTypesParam )
				if ( catBossTypeElem.operations.HasValue )
					arrOperationsIDs = ArrayUnion( arrOperationsIDs, String( catBossTypeElem.operations ).split( ';' ) );
			if ( ArrayCount( arrOperationsIDs ) == 0 )
				return [];

			try
			{
				if ( sCatalogNameParam == null )
					throw 'no_data';
			}
			catch ( err )
			{
				sCatalogNameParam = '';
			}
			arrOperationsIDs = ArrayExtract( arrOperationsIDs, 'Int(This)' );
			xarrOperations = QueryCatalogByKeys( 'operations', 'id', ArraySelectDistinct( arrOperationsIDs, 'This' ) );
			if ( sCatalogNameParam == '#empty#' )
				return ArraySelect( xarrOperations, 'This.operation_catalog_list.Value == \'\'' );
			else if ( sCatalogNameParam == '' )
				return xarrOperations;
			else
				return ArraySelect( xarrOperations, 'StrContains(\',\'+This.operation_catalog_list.Value+\',\',\',' + sCatalogNameParam + ',\')' );
	"/>

	<get_object_relative_operations PROPERTY="1" PARAM="iUserIDParam" PARAM="iObjectIDParam" PARAM="sCatalogNameParam" EXPR="
		try
		{
			if ( sCatalogNameParam == null )
				throw 'no_data';
		}
		catch ( err )
		{
			sCatalogNameParam = '';
		}
		return tools.get_relative_operations_by_boss_types( tools.get_object_relative_boss_types( iUserIDParam, iObjectIDParam ), sCatalogNameParam );
	"/>

	<check_operation_rights PROPERTY="1" PARAM="arrOperationsParam" PARAM="teCurUserParam" PARAM="sActionParam" EXPR="
		if ( teCurUserParam != null &amp;&amp; teCurUserParam != '' &amp;&amp; teCurUserParam.access.access_role == 'admin' )
			return true;

		return ( ArrayOptFindByKey( arrOperationsParam, sActionParam, 'action' ) != undefined );
	"/>

	<extend_object PROPERTY="1" PARAM="oObjectRecipient" PARAM="oObjectSource" EXPR="
		if (DataType(oObjectRecipient) == 'object' && DataType(oObjectSource) == 'object')
		{
			var sPropName;
			for (sPropName in oObjectSource)
				oObjectRecipient.SetProperty(sPropName, oObjectSource.GetProperty(sPropName));
		}
		return oObjectRecipient;
	"/>

	<current_user_boss_type TYPE="variant"/>
	<get_current_user_operations PROPERTY="1" EXPR="
			if ( ! tools.current_user_boss_type.HasValue )
				tools.current_user_boss_type = ArrayOptFirstElem( XQuery( 'for $elem in boss_types where $elem/code = \'current_user\' return $elem' ) );

			catCurrentUserBossType = tools.current_user_boss_type.Object;
			if ( catCurrentUserBossType == undefined )
				return [];

			arrOperationsIDs = [];
			if ( catCurrentUserBossType.operations.HasValue )
				arrOperationsIDs = String( catCurrentUserBossType.operations ).split( ';' );

			if ( ArrayCount( arrOperationsIDs ) == 0 )
				return [];

			arrOperationsIDs = ArrayExtract( arrOperationsIDs, 'Int(This)' );
			return QueryCatalogByKeys( 'operations', 'id', ArraySelectDistinct( arrOperationsIDs, 'This' ) );
	"/>


	<assign_elems PROPERTY="1" PARAM="fldTarget" PARAM="fldSourceParam" PARAM="arrFieldNamesParam" EXPR="
			for ( sFieldNameElem in arrFieldNamesParam )
				fldTarget.Child( sFieldNameElem ).AssignElem( fldSourceParam.Child( sFieldNameElem ) );
	"/>
	<assign_elems_exclude PROPERTY="1" PARAM="fldTarget" PARAM="fldSourceParam" PARAM="arrFieldNamesParam" EXPR="
			for ( fldElem in fldTarget )
			{
				fldChild = fldSourceParam.OptChild( fldElem.Name );
				if ( fldChild != undefined &amp;&amp; ArrayOptFind( arrFieldNamesParam, 'This==\'' + fldElem.Name + '\'' ) == undefined )
					fldElem.AssignElem( fldChild );
			}
	"/>



	<get_foreign_field PROPERTY="1" PARAM="fldForeignFieldParam" PARAM="sFieldParam" PARAM="sErrTextParam" EXPR="
			catForeignElem = fldForeignFieldParam.OptForeignElem;
			return catForeignElem == undefined ? sErrTextParam : catForeignElem.Child( sFieldParam ).Value;
	"/>

	<get_short_login_by_login PROPERTY="1" PARAM="sLoginParam" EXPR="
			if ( StrContains( sLoginParam, '@' ) )
			{
				return sLoginParam.slice( 0, sLoginParam.indexOf( '@' ) );
			}
			return sLoginParam.slice( sLoginParam.lastIndexOf( '\\' ) + 1 );
	"/>

	<get_user_by_login PROPERTY="1" PARAM="Login" PARAM="AuthType" EXPR="
		try
		{
			if ( Login == '' )
			{
				return undefined;
			}

			_login1 = global_settings.settings.login_case_sensitive ? Login : StrLowerCase( Login );
			if ( AuthType != 'ntlm' )
			{
				user = ArrayOptFirstElem( XQuery( 'for $user in collaborators where $user/' + ( global_settings.settings.login_case_sensitive ? '' : 'lowercase_' ) + 'login = ' + XQueryLiteral( _login1 ) + ' return $user' ) );

			}
			else
			{
				user = ArrayOptFirstElem( XQuery( 'for $user in collaborators where $user/' + ( global_settings.settings.login_case_sensitive ? '' : 'lowercase_' ) + 'login = ' + XQueryLiteral( _login1 ) + ' return $user' ) );
				if ( user == undefined )
				{
					user = ArrayOptFirstElem( XQuery( 'for $user in collaborators where $user/short_login = ' + XQueryLiteral( tools.get_short_login_by_login( Login ) ) + ' return $user' ) );
				}
			}

			return user
		}
		catch(ex)
		{
			//alert(ex)
			return undefined;
		}

	"/>


	<set_form_last_seved_data PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sCatalogNameParam" PARAM="bValueParam" EXPR="
			if ( ! LdsIsServer )
			{
				CallServerMethod( 'tools', 'set_form_last_seved_data', [ RValue( sCatalogNameParam ), RValue( bValueParam ) ] );
				return;
			}

			//fldObjectType = common.exchange_object_types.GetChildByKey( sCatalogNameParam );
			//teFetchForm = FetchForm( fldObjectType.form_url );
			teFetchForm = FetchForm( tools.get_object_form_url( sCatalogNameParam, false ) );
			teFetchForm.UseLastSavedData = tools_web.is_true( bValueParam );
	"/>


	<get_knowledge_parts_by_person_id PROPERTY="1" PARAM="person_id" EXPR="
			//made by Tatiana Dobrynina
			resultArray = Array();
			try
			{
				personDoc = OpenDoc( UrlFromDocID( Int(person_id) ) ).TopElem;
				personPositionsArray = XQuery('for $elem in positions where $elem/basic_collaborator_id=' + person_id + ' and $elem/knowledge_profile_id!=null() return $elem')
				for ( _position in personPositionsArray )
				{
					try
					{
						knowledgeProfileDoc = OpenDoc( UrlFromDocID( _position.knowledge_profile_id )).TopElem;
					}
					catch(err)
					{ continue; }
					resultArray = ArrayUnion( resultArray, QueryCatalogByKeys('knowledge_parts', 'id', ArrayExtract( knowledgeProfileDoc.knowledge_parts, 'knowledge_part_id' )) )
				}
				resultArray = ArrayUnion( resultArray, QueryCatalogByKeys('knowledge_parts', 'id', ArrayExtract( personDoc.knowledge_parts, 'knowledge_part_id' )) )

			}
			catch(err)
			{
				return Array();
			}

			return ArraySelectDistinct( resultArray, 'id');
	"/>

	<get_experts_by_person_id PROPERTY="1" PARAM="person_id" EXPR="
			//made by Tatiana Dobrynina
			resultArray = Array();
			resultIdArray = Array();

			for ( _kp in tools.get_knowledge_parts_by_person_id(person_id) )
			{
				try
				{
					kpDoc = OpenDoc( UrlFromDocID( _kp.id ) ).TopElem;
				}
				catch(err)
				{
					continue;
				}
				resultIdArray =  ArrayUnion( resultIdArray, ArrayExtract( kpDoc.experts, 'expert_id' ) )
			}

			return QueryCatalogByKeys( 'experts', 'id', resultIdArray )
	"/>



	<get_object_name_field_value PROPERTY="1" PARAM="oObjectParam" EXPR="
			iObjectID = OptInt( oObjectParam );
			if ( iObjectID != undefined )
				oObjectParam = OpenDoc( UrlFromDocID( iObjectID ) ).TopElem;
			return GetObjectProperty( oObjectParam, common.exchange_object_types.GetChildByKey( oObjectParam.Name ).disp_name );
	"/>


	<copy_url PROPERTY="1" PARAM="sDestDirPARAM" PARAM="sSourceDirPARAM" EXPR="
		if ( LdsIsServer &amp;&amp; (tools.sys_db_capability &amp; tools.UNI_CAP_BASIC) != 0 &amp;&amp; tools.spxml_unibridge.Object.provider.FetchUrlAttribute( sSourceDirPARAM ,'Length' ) != undefined &amp;&amp; StrBegins( sSourceDirPARAM, 'x-local://') &amp;&amp; !StrBegins( sDestDirPARAM, 'x-local://trash/') )
		{
			try
			{
				var res = tools.spxml_unibridge.Object.provider.LoadUrlToDisk(sSourceDirPARAM, UrlToFilePath(sDestDirPARAM));
				return res;
			}
			catch(eee)
			{
				alert(eee);
				throw eee;
			}
		}
		else
		{
			if ( ! LdsIsServer &amp;&amp; ! System.IsWebClient &amp;&amp; StrBegins( sSourceDirPARAM, 'file://' ) )
			{
				sSourceDirPath = UrlToFilePath( sSourceDirPARAM )
				var iLen = UrlFileSize( sSourceDirPARAM );
				try
				{
					var sID = tools.upload_begin( sDestDirPARAM, iLen );

					var iIndexStart = iIndexFinish = 0;
					var iDelta = 10000000; // 10 MB
					while ( iIndexStart < iLen )
					{
						if ( ( iLen - iIndexStart ) < iDelta )
							iIndexFinish = iLen;
						else
							iIndexFinish = iIndexStart + iDelta;

						sData = LoadFileDataRange( sSourceDirPath, iIndexStart, iIndexFinish );
						tools.upload_range( sID, iIndexStart, iIndexFinish, sData );

						iIndexStart += iDelta;
					}

					return tools.upload_end( sID );
				}
				catch ( err )
				{
					LogEvent( 'spxml', err );
				}
			}
			return CopyUrl( sDestDirPARAM, sSourceDirPARAM );
		}
	"/>

	<zip_extract PROPERTY="1" PARAM="sSourceDirPARAM" PARAM="sDestDirPARAM" EXPR="
		if ( LdsIsServer &amp;&amp; (tools.sys_db_capability &amp; tools.UNI_CAP_DATA_STORAGE) != 0 )
		{
//alert('tools: zip_extract: sSourceDirPARAM: '+sSourceDirPARAM);
//alert('tools: zip_extract: sDestDirPARAM: '+sDestDirPARAM);
			return tools.spxml_unibridge.Object.provider.ZipExtractUrlToDataStorage(sSourceDirPARAM, sDestDirPARAM);
		}
		else
		{
			sTempUrl = '';
			sLowerSourceDir = StrLowerCase( sSourceDirPARAM );
			if ( StrBegins( sLowerSourceDir, 'x-local://' + DefaultDb + '/' ) || StrBegins( sLowerSourceDir, 'x-local://trash/' ) || StrBegins( sLowerSourceDir, 'x-local://share/' ) )
			{
				sTempUrl = ObtainTempFile( '.zip' );
				tools.copy_url( sTempUrl, sSourceDirPARAM );
				sSourceDirPARAM = UrlToFilePath(sTempUrl);
			}
			else if(StrBegins( sLowerSourceDir, 'x-local://') || StrBegins( sLowerSourceDir, 'file:/' ))
			{
				sSourceDirPARAM = UrlToFilePath(sSourceDirPARAM);
			}
//alert('tools: zip_extract: sSourceDirPARAM: ' + sSourceDirPARAM);
//alert('tools: zip_extract: sDestDirPARAM: ' + sDestDirPARAM);
			if(StrBegins( sDestDirPARAM, 'x-local://' ) || StrBegins( sDestDirPARAM, 'file:/' ))
				sDestDirPARAM = UrlToFilePath(sDestDirPARAM);

			is_ok = 0;
			if( LdsIsServer || local_settings.settings.use_dotnet_zip )
			{
				var oZip = tools.get_object_assembly( 'Zip' );
				oZip.CharSet = 'windows-1251';
				iRes = oZip.OpenArchive( sSourceDirPARAM );
				if ( iRes != 1 )
				{
					var sErrorMessage = oZip.GetError();
					oZip.Close();
					oZip = null;
					throw sErrorMessage;
				}
				iRes = oZip.Extract( sDestDirPARAM );
				if ( iRes != 1 )
				{
					var sErrorMessage = oZip.GetError();
					oZip.Close();
					oZip = null;
					throw sErrorMessage;
				}
				oZip.Close();
				oZip = null;
			}
			else
			{
				is_ok = ZipExtract( sSourceDirPARAM, sDestDirPARAM );
			}
			if ( sTempUrl != '' )
				try
				{
					DeleteUrl( sTempUrl );
				}
				catch ( err )
				{
					alert( err );
				}
			return is_ok;
		}
	"/>
	<zip_create PROPERTY="1" PARAM="sArchivePathPARAM" PARAM="sContentPathPARAM" PARAM="sContentDirPathPARAM" EXPR="
		if(LdsIsServer || local_settings.settings.use_dotnet_zip)
		{
			sTempUrl = '';
			sLowerContentPath = StrLowerCase( sContentPathPARAM );
			if ( StrBegins( sLowerContentPath, 'x-local://' + DefaultDb + '/' ) || StrBegins( sLowerContentPath, 'x-local://trash/' ) )
			{
				sTempUrl = ObtainTempFile( FileName(UrlToFilePath(sContentPathPARAM)) );
				tools.copy_url( sTempUrl, sContentPathPARAM );
				sContentPathPARAM = UrlToFilePath(sTempUrl);
			}

			var oZip = tools.get_object_assembly( 'Zip' );
			oZip.OpenOrCreate(sArchivePathPARAM);
			oZip.SetCompressionLevel(6);
			if(PathIsDirectory(sContentPathPARAM))
			{
				oZip.AddDirectory(sContentPathPARAM);
			}
			else
			{
				try
				{
					if(sContentDirPathPARAM == '')
						throw 'no directory';
				}
				catch(x)
				{
					sContentDirPathPARAM = undefined;
				}
				if(sContentDirPathPARAM == undefined)
					oZip.AddFiles(sContentPathPARAM);
				else
					oZip.AddFilesToPath(sContentPathPARAM, sContentDirPathPARAM);
			}
			oZip.Save();
			oZip.Close();
			oZip = null;

			if ( sTempUrl != '' )
			{
				try
				{
					DeleteUrl( sTempUrl );
				}
				catch ( err )
				{
					alert( err );
				}
			}
		}
		else
		{
			ZipCreate(sArchivePathPARAM, sContentPathPARAM);
		}
	"/>

	<sys_db_type PROPERTY="1" EXPR="(tools.sys_db_capability & tools.UNI_CAP_BASIC) == 0 ? 'xml' : 'undefined'"/>
	<sys_db_capability TYPE="integer" EXPR-INIT="0"/>
	<sys_db_capability_ex TYPE="integer" EXPR-INIT="0"/>
	<sys_db_capability_role_tags TYPE="integer" EXPR-INIT="0"/>
	<uid TYPE="string" EXPR-INIT="0"/>


	<UNI_CAP_BASIC TYPE="integer" EXPR-INIT="1"/>

	<UNI_CAP_BLOB_STREAM TYPE="integer" EXPR-INIT="2"/>
	<UNI_CAP_CLUSTER TYPE="integer" EXPR-INIT="4"/>
	<UNI_CAP_WORKER_ROLE TYPE="integer" EXPR-INIT="8"/>
	<UNI_CAP_WEB_ROLE TYPE="integer" EXPR-INIT="16"/>

	<UNI_CAP_IMPORT_DOCS_BATCH TYPE="integer" EXPR-INIT="32"/>
	<UNI_CAP_IMPORT_CATALOG_BATCH TYPE="integer" EXPR-INIT="64"/>
	<UNI_CAP_IMPORT_BLOBS_BATCH TYPE="integer" EXPR-INIT="128"/>
	<UNI_CAP_IMPORT_LOCAL_BLOBS_BATCH TYPE="integer" EXPR-INIT="256"/>

	<UNI_CAP_EXPORT_DOCS_BATCH TYPE="integer" EXPR-INIT="512"/>
	<UNI_CAP_EXPORT_CATALOG_BATCH TYPE="integer" EXPR-INIT="1024"/>
	<UNI_CAP_EXPORT_BLOBS_BATCH TYPE="integer" EXPR-INIT="2048"/>
	<UNI_CAP_EXPORT_LOCAL_BLOBS_BATCH TYPE="integer" EXPR-INIT="4096"/>
	<UNI_CAP_FT_INDEX TYPE="integer" EXPR-INIT="8192"/>
	<UNI_CAP_MULTI_TENANCY TYPE="integer" EXPR-INIT="16384"/>
	<UNI_CAP_AZURE TYPE="integer" EXPR-INIT="32768"/>
	<UNI_CAP_MSSQL TYPE="integer" EXPR-INIT="65536"/>
	<UNI_CAP_ORACLE TYPE="integer" EXPR-INIT="131072"/>
	<UNI_CAP_DATA_STORAGE TYPE="integer" EXPR-INIT="262144"/>

	<UNI_CAP_USER_CACHE TYPE="integer" EXPR-INIT="524288"/>
	<UNI_CAP_DISTR_CACHE TYPE="integer" EXPR-INIT="1048576"/>
	<UNI_CAP_SYNC_CATALOG TYPE="integer" EXPR-INIT="16777216"/>
	<UNI_CAP_TEMP_OBJECTS_IN_MEMORY TYPE="integer" EXPR-INIT="33554432"/>
	<UNI_CAP_FT_INDEX_BLOBS TYPE="integer" EXPR-INIT="134217728"/>
	<UNI_CAP_PD TYPE="integer" EXPR-INIT="536870912"/>
	<UNI_CAP_APP_INSIGHTS TYPE="integer" EXPR-INIT="268435456"/>

	<UNI_CAP_AGENT_MANAGER TYPE="integer" EXPR-INIT="2"/>
	<UNI_CAP_INVENTORY TYPE="integer" EXPR-INIT="32"/>
	<UNI_CAP_ALL_ROLE_TAG TYPE="integer" EXPR-INIT="0"/>
	<UNI_CAP_AGENT_ROLE_TAG TYPE="integer" EXPR-INIT="2"/>
	<UNI_CAP_NOTIFICATION_ROLE_TAG TYPE="integer" EXPR-INIT="4"/>
	<UNI_CAP_SCRIPT_QUEUE_ROLE_TAG TYPE="integer" EXPR-INIT="8"/>
	<UNI_CAP_WEBSOCKET_ROLE_TAG TYPE="integer" EXPR-INIT="16"/>
	<UNI_CAP_WEBONLY_ROLE_TAG TYPE="integer" EXPR-INIT="32"/>
	<UNI_CAP_VCLASS_RECORDER_ROLE_TAG TYPE="integer" EXPR-INIT="64"/>
	<UNI_CAP_MEDIA_HANDLER_ROLE_TAG TYPE="integer" EXPR-INIT="128"/>
	<UNI_CAP_NEURAL_HANDLER_ROLE_TAG TYPE="integer" EXPR-INIT="256"/>

	<spxml_unibridge TYPE="variant"/>

	<app_insights_threshold TYPE="integer" EXPR-INIT="0"/>

	<spxml_unibridge_stage TYPE="integer" NOT-NULL="1" DEFAULT="0"/>

	<UNI_STAGE_INIT TYPE="integer" EXPR-INIT="1"/>
	<UNI_STAGE_COMPLETE TYPE="integer" EXPR-INIT="2"/>

	<doc_types_catalog_hashes>
		<doc_types_catalog_hash MULTIPLE="1" PRIMARY-KEY="object_name">
			<object_name TYPE="string"/>
			<object_hash TYPE="string"/>
		</doc_types_catalog_hash>
	</doc_types_catalog_hashes>
	<doc_types_catalog_registered TYPE="bool" NOT-NULL="1" DEFAULT="false"/>

	<register_doc_types_catalog_by_serialized_str ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="sSerializedCatalogsToRegPARAM" PARAM="bServerCheck" EXPR="
		var oJSON = SafeEval(sSerializedCatalogsToRegPARAM);
		return tools.register_doc_types_catalog(oJSON, bServerCheck);
	"/>

	<register_doc_types_catalog PROPERTY="1" PARAM="aCatalogsToRegPARAM" PARAM="bServerCheck" EXPR="
			var oReturnInfo, fldHash, bOk = true;
			for (oReturnInfo in aCatalogsToRegPARAM)
			{
				fldHash = tools.doc_types_catalog_hashes.ObtainChildByKey(oReturnInfo.catalog);

				if (fldHash.object_hash.Value != oReturnInfo.catalog_form_hash)
				{
					DefaultDb.RegisterCatalog(oReturnInfo.catalog_form_url);
					fldHash.object_hash = oReturnInfo.catalog_form_hash;
				}
			}
			if (bServerCheck && !LdsIsServer)
			{
				var sSerialized = '(' + tools.array_to_text(aCatalogsToRegPARAM, 'json') + ')';
				if (CallServerMethod('tools','register_doc_types_catalog_by_serialized_str', ([RValue(sSerialized), false])) != true)
					bOk = false;
			}

			return bOk;
	"/>



	<get_disp_name_value PROPERTY="1" PARAM="oObjectParam" EXPR="
			sDispName = common.exchange_object_types.GetChildByKey( oObjectParam.Name ).disp_name;
			return StrContains( sDispName, '.' ) ? oObjectParam.EvalPath( sDispName ) : GetObjectProperty( oObjectParam, sDispName );
	"/>

	<read_selected_date PROPERTY="1" PARAM="sSomeObjectPARAM" EXPR="
	    sSomeObjectPARAM = Trim(sSomeObjectPARAM);
		//alert(sSomeObjectPARAM);

		var oParamSelectedObject = new Object;

		sObjectParam = StrRangePos(sSomeObjectPARAM,sSomeObjectPARAM.indexOf('{')+1,sSomeObjectPARAM.indexOf('}'))
		//alert(sObjectParam);
		arrStrParams = sObjectParam.split(',');
		if (ArrayOptFirstElem(arrStrParams) != undefined)
		{
		    for (i=0; i < ArrayCount(arrStrParams); i++)
			{
				strChangeParam = Trim(StrReplace(arrStrParams[i],'&quot;',''));
                //alert(strChangeParam);
				sNameParam = StrRangePos(strChangeParam,0,strChangeParam.indexOf('&#058;'));
				//alert(sNameParam);
				if (sNameParam == 'id' || sNameParam == 'type')
				{
					if (sNameParam == 'id')
					{
						oParamSelectedObject.id = StrRightRangePos(strChangeParam,strChangeParam.indexOf('&#058;')+1);
					}
					if (sNameParam == 'type')
					{
						oParamSelectedObject.type = StrRightRangePos(strChangeParam,strChangeParam.indexOf('&#058;')+1);
					}
				}
			}

		}

	    return oParamSelectedObject;
	"/>


	<get_sum_sid PROPERTY="1" CALLER-ENV="1" PARAM="sIdParam" EXPR="
			return tools_web.get_sum_sid( sIdParam, Request.Session.sid );
	"/>
	<check_sum_sid PROPERTY="1" CALLER-ENV="1" PARAM="sIdParam" PARAM="sSumParam" EXPR="
			return tools_web.check_sum_sid( sIdParam, sSumParam, Request.Session.sid );
	"/>

	<build_simple_phone PROPERTY="1" PARAM="strPhoneParam" EXPR="
		try
		{
			str = strPhoneParam;

			str = StrReplace( str, ' ', '' );
			str = StrReplace( str, '(', '' );
			str = StrReplace( str, ')', '' );
			str = StrReplace( str, '+', '' );
			str = StrReplace( str, '-', '' );

			str = StrReplace( str, ',', ' ' );
			str = StrReplace( str, ';', ' ' );

			return str;
		}
		catch(ex)
		{
			alert(ex)
			return null
		}
	"/>

	<build_phone PROPERTY="1" PARAM="strPhoneParam" EXPR="
	try
	{
		if ( strPhoneParam == '' || strPhoneParam==null)
			return '';

		str = tools.build_simple_phone( strPhoneParam );
		if ( str == '' )
			return '';

		array = ParsePhones( strPhoneParam );

		for ( entry in array )
		{
			if ( entry.RegionCode == '' )
				continue;

			subStr = entry.MainPart;
			subStr = StrReplace( subStr, ' ', '' );
			subStr = StrReplace( subStr, '-', '' );

			str += ' ';
			str += subStr;
		}

		return str;
	}
	catch(ex)
	{
		alert(ex)
		return null
	}
	"/>


	<recommend_library_material_to_person PROPERTY="1" PARAM="iPersonIDParam" PARAM="iMaterialIDParam" PARAM="tePersonParam" PARAM="teMaterialParam" PARAM="bSendNotificationParam" PARAM="iEducationPlanID" PARAM="bCommentParam" EXPR="

		try{
				iEducationPlanID = OptInt( iEducationPlanID, null );
		}
		catch( ex )
		{
			iEducationPlanID = null;
		}
		iPersonID = Int( iPersonIDParam );
		iMaterialID = Int( iMaterialIDParam );

		fldActiveMaterial = ArrayOptFirstElem( XQuery( 'for $elem in library_material_viewings where $elem/person_id = ' + iPersonID + ' and $elem/material_id = ' + iMaterialID + ' and $elem/state_id!=\'finished\' return $elem' ) );
		if ( fldActiveMaterial != undefined )
			return fldActiveMaterial.id;

		try
		{
			if ( tePersonParam == null || tePersonParam == '' || tePersonParam == undefined )
				throw 'no_doc';

			tePerson = tePersonParam;
		}
		catch ( err )
		{
			tePerson = OpenDoc( UrlFromDocID( iPersonID ) ).TopElem;
		}

		try
		{
			if ( teMaterialParam == null || teMaterialParam == '' || teMaterialParam == undefined )
				throw 'no_doc';

			teMaterial = teMaterialParam;
		}
		catch ( err )
		{
			teMaterial = OpenDoc( UrlFromDocID( iMaterialID ) ).TopElem;
		}

		try
		{
			bSendNotification=bSendNotificationParam
		}
		catch ( err )
		{
			bSendNotification=true
		}

		try
		{
			sComment = bCommentParam
		}
		catch ( err )
		{
			sComment = ''
		}

		docLibraryMaterialViewing = OpenNewDoc( 'x-local://wtv/wtv_library_material_viewing.xmd' );
		docLibraryMaterialViewing.TopElem.person_id = iPersonID;
		docLibraryMaterialViewing.TopElem.material_id = iMaterialID;
		docLibraryMaterialViewing.TopElem.material_name = teMaterial.name;
		docLibraryMaterialViewing.TopElem.education_plan_id = iEducationPlanID;
		docLibraryMaterialViewing.TopElem.comment = sComment;

		tools.common_filling( 'collaborator', docLibraryMaterialViewing.TopElem, iPersonID, tePerson );

		docLibraryMaterialViewing.BindToDb( DefaultDb );
		docLibraryMaterialViewing.Save();

		if ( bSendNotification )
		{
			tools.create_notification( '81', docLibraryMaterialViewing.DocID, sComment );
		}
		return docLibraryMaterialViewing;
	"/>

	<opt_date PROPERTY="1" PARAM="oDateParam" PARAM="oDefaultParam" EXPR="
		try
		{
			return Date( oDateParam );
		}
		catch ( err )
		{
			try
			{
				return oDefaultParam;
			}
			catch ( err2 )
			{
				return undefined;
			}
		}
	"/>


	<str_negative_number PROPERTY="1" PARAM="iNumberParam" EXPR="
			return iNumberParam == null ? '' : ( iNumberParam &lt; 0 ? '-' + ( 0-iNumberParam ) : '' + iNumberParam );
	"/>

	<beautify_file_size PROPERTY="1" PARAM="iByteSizePARAM" PARAM="bAddUnitPARAM" EXPR="
		iByteSizePARAM = OptInt(iByteSizePARAM);
		if (iByteSizePARAM == undefined)
			return '*error*';
		try
		{
			bAddUnitPARAM = (bAddUnitPARAM == true);
		}
		catch(_x_)
		{
			bAddUnitPARAM = true;
		}

		if (iByteSizePARAM > 1000000000)
			iByteSizePARAM = StrReal(iByteSizePARAM / 1073741824.0, 2) + (bAddUnitPARAM ? ' ' + ms_tools.get_const('gb') : '');
		else if (iByteSizePARAM > 1000000)
			iByteSizePARAM = StrReal(iByteSizePARAM / 1048576.0, 2) + (bAddUnitPARAM ? ' ' + ms_tools.get_const('mb') : '');
		else if (iByteSizePARAM > 1000)
			iByteSizePARAM = StrReal(iByteSizePARAM / 1024.0, 2) + (bAddUnitPARAM ? ' ' + ms_tools.get_const('kb') : '');
		else if (bAddUnitPARAM)
			iByteSizePARAM += ' ' + StrNonTitleCase( ms_tools.get_const('bayt') );
		else
			iByteSizePARAM = StrInt(iByteSizePARAM);

		return iByteSizePARAM;
	"/>


	<get_ft_value PROPERTY="1" PARAM="sValueParam" EXPR="
			if ( (tools.sys_db_capability & tools.UNI_CAP_BASIC) == 0 )
				return StrReplace( UnifySpaces( sValueParam ), ' ', '_' );
			else
				return sValueParam;
	"/>


	<get_agent_command_queue_xml PROPERTY="1" PARAM="iServerAgentIDParam" PARAM="sElementIDParam" PARAM="sElemsIDParam" PARAM="dDateParam" EXPR="
			teCommand = OpenDocFromStr( tools.xml_header() + '&lt;queue_command/&gt;' ).TopElem;
			teCommand.AddChild( 'type', 'string' ).Value = 'run_agent';
			teCommand.AddChild( 'agent_id', 'integer' ).Value = iServerAgentIDParam;
			teCommand.AddChild( 'element_id', 'string' ).Value = sElementIDParam;
			teCommand.AddChild( 'elems_id_str', 'string' ).Value = sElemsIDParam;
			teCommand.AddChild( 'dDateParam', 'string' ).Value = dDateParam;
			return teCommand.GetXml( { 'tabs': false } );
	"/>


	<get_uid_cached_doc PROPERTY="1" PARAM="sUIDParam" PARAM="sUrlParam" EXPR="
			return '$$uid_' + sUIDParam + '_' + sUrlParam;
	"/>
	<check_and_refresh_cached_docs PROPERTY="1" PARAM="sUrlParam" EXPR="
			try
			{
				sUID = tools.get_uid_cached_doc( tools.uid, sUrlParam );
				is_uid = tools.spxml_unibridge.Object.provider.GetUserData( sUID );
				if ( is_uid == null || is_uid == undefined )
				{
					ReplaceCachedDoc( sUrlParam, OpenDoc( sUrlParam ) );
					tools.spxml_unibridge.Object.provider.SetUserData( sUID, '1', 86400 );
				}
				return true;
			}
			catch ( err )
			{
				return false;
			}
	"/>


	<open_str_win_ini PROPERTY="1" PARAM="sFileText" EXPR="
			teSections = OpenDocFromStr( tools.xml_header() + '&lt;sections/&gt;' ).TopElem;
			fldSection = null;
			for ( sLineElem in String( sFileText ).split( '\n' ) )
			{
				sLineElem = Trim( sLineElem );
				if ( StrLen( sLineElem ) == 0 || StrBegins( sLineElem, ';' ) || StrBegins( sLineElem, '#' ) )
					continue;

				if ( StrBegins( sLineElem, '[' ) &amp;&amp; StrEnds( sLineElem, ']' ) )
				{
					fldSection = teSections.AddChild( StrLowerCase( StrRangePos( sLineElem, 1, StrLen( sLineElem ) - 1 ) ), 'string' );
				}
				else
				{
					iIndex = sLineElem.indexOf( '=' );
					if ( iIndex &gt; 0 )
					{
						sName = StrLowerCase( Trim( StrLeftRange( sLineElem, iIndex ) ) );
						if ( fldSection == null )
							fldField = teSections.AddChild( sName, 'string' );
						else
							fldField = fldSection.AddChild( sName, 'string' );
						fldField.Value = Trim( StrRightRangePos( sLineElem, iIndex + 1 ) );
					}
					else if ( fldSection != null )
					{
						fldSection.Value += sLineElem + '\n';
					}
				}
			}
			return teSections;
	"/>
	<open_doc_win_ini PROPERTY="1" PARAM="sUrlParam" EXPR="
			return tools.open_str_win_ini( LoadUrlText( sUrlParam ) );
	"/>


	<log PROPERTY="1" CALLER-ENV="1" PARAM="sTextParam" PARAM="sMessageTypeParam" PARAM="bShowAdditionalInfoParam" EXPR="
		function getAddInfo()
		{
			try
			{
				_sAddInfo = '';
				Env = Request.Session.Env;
				if(Env.curMode != null && Env.curMode != undefined)
					_sAddInfo += ', curMode = ' + Env.curMode;
				if(Env.curObjectID != null && Env.curObjectID != undefined)
					_sAddInfo += ', curObjectID = ' + Env.curObjectID;
				if(Env.curDocID != null && Env.curDocID != undefined)
					_sAddInfo += ', curDocID = ' + Env.curDocID;
				if(Env.curUserID != null && Env.curUserID != undefined)
					_sAddInfo += ', curUserID = ' + Env.curUserID + ' ';
				if( _sAddInfo != '' )
				{
					if(String(_sAddInfo).charAt(0) == ',')
						_sAddInfo = StrRightRangePos(String(_sAddInfo), 2);
				}
				else
				{
					_sAddInfo = 'no additional info';
				}

				return _sAddInfo;
			}
			catch(x)
			{
				return x;
			}
		}

		try
		{
			sMessageTypeParam;
		}
		catch(x)
		{
			sMessageTypeParam = 'info';
		}

		try
		{
			bShowAdditionalInfoParam;
		}
		catch(x)
		{
			bShowAdditionalInfoParam = (sMessageTypeParam == 'error');
		}

		switch(sMessageTypeParam)
		{
			case 'error':
				alert( 'ERROR: ' + sTextParam);
				sAddInfo = '';
				if(bShowAdditionalInfoParam)
				{
					sAddInfo = getAddInfo();
					alert( 'ERROR: ' + sAddInfo);
				}
				if(global_settings.settings.disp_log_debug)
				{
					LogEvent( 'debug', 'ERROR: ' + sTextParam);
					if(bShowAdditionalInfoParam)
					{
						LogEvent( 'debug', 'ERROR: ' + sAddInfo);
					}
				}
				break;

			case 'debug':
				if(global_settings.settings.disp_log_debug)
				{
					LogEvent( 'debug', 'DEBUG: ' + sTextParam);
					if(bShowAdditionalInfoParam)
					{
						LogEvent( 'debug', 'DEBUG: ' + getAddInfo());
					}
				}
				break;

			case 'info':
			default:
				alert( 'INFO: ' + sTextParam);
				sAddInfo = '';
				if(bShowAdditionalInfoParam)
				{
					sAddInfo = getAddInfo();
					alert('INFO: ' + sAddInfo);
				}
				if(global_settings.settings.disp_log_debug)
				{
					LogEvent( 'debug', 'INFO: ' + sTextParam);
					if(bShowAdditionalInfoParam)
					{
						LogEvent( 'debug', 'INFO: ' + sAddInfo);
					}
				}
				break;
		}
	"/>


	<get_sibscriber_subscriptions PROPERTY="1" PARAM="iPersonIDParam" PARAM="sMessageTypeParam" PARAM="bShowAdditionalInfoParam" EXPR="
			xarrPersonSubscriptions = XQuery( 'for $elem in subscriptions where $elem/document_id = ' + iPersonIDParam + ' and ( $elem/date_to = null() or $elem/date_to > ' + XQueryLiteral( Date() ) + ' ) return $elem' );
			xarrBlogSubscriptions = XQuery( 'for $elem in subscriptions where some $blog in blogs satisfies ( $elem/document_id = $blog/id and $blog/object_id = ' + iPersonIDParam + ' ) and ( $elem/date_to = null() or $elem/date_to > ' + XQueryLiteral( Date() ) + ' ) return $elem' );
			return ArrayUnion( xarrPersonSubscriptions, xarrBlogSubscriptions );
	"/>


	<file_url_exists PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sFilePathParam" EXPR="
			bExists = FilePathExists( UrlToFilePath( sFilePathParam ) );
			if ( ! bExists &amp;&amp; LdsIsServer &amp;&amp; (tools.sys_db_capability & tools.UNI_CAP_BLOB_STREAM) != 0 )
			{
				return ( tools.spxml_unibridge.Object.provider.FetchUrlAttribute( sFilePathParam,'Length' ) != undefined );
			}
			return bExists;
	"/>
	<file_url_exists_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sFilePathParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'file_url_exists_server', [ RValue( sFilePathParam ) ] );

			if ( ! StrBegins( sFilePathParam, 'x-local://' ) )
				throw 'Only x-local schema.'

			return tools.file_url_exists( sFilePathParam );
	"/>
	<load_url_text_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sFilePathParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'load_url_text_server', [ RValue( sFilePathParam ) ] );

			if ( ! StrBegins( sFilePathParam, 'x-local://' ) )
				throw 'Only x-local schema.'

			return LoadUrlText( sFilePathParam );
	"/>
	<load_url_data_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sFilePathParam" PARAM="iSizeParam" EXPR="
			var iSize=null
			try
			{
				iSize=OptInt(iSizeParam,null) //10485760 - 10MB
			}
			catch(ex)
			{
			}

			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'load_url_data_server', [ RValue( sFilePathParam ), RValue( iSize ) ] );

			if ( ! StrBegins( sFilePathParam, 'x-local://' ) )
				throw 'Only x-local schema.'

			var iLen = UrlFileSize( sFilePathParam );

			if (iSize==null||iLen<iSize)
			{
				return LoadUrlData( sFilePathParam );
			}
			else
			{
				return StrReplace( 'Показано последние {PARAM1} байт файла. Для просмотра всего файла его нужно сохранить.', '{PARAM1}', iSize )+'\r\n'+LoadFileDataRange(  UrlToFilePath(sFilePathParam), iLen-iSize, iLen );
			}

	"/>
	<read_directory_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sFilePathParam" PARAM="bDirParam" EXPR="
			try
			{
				bDirParam = tools_web.is_true( bDirParam );
			}
			catch ( err )
			{
				bDirParam = null;
			}

			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'read_directory_server', [ RValue( sFilePathParam ), bDirParam ] );

			if ( ! StrBegins( sFilePathParam, 'x-local://' ) )
				throw 'Only x-local schema.'

			if ( bDirParam == null )
				return ReadDirectory( sFilePathParam );
			else
				return ArraySelect( ReadDirectory( sFilePathParam ), 'IsDirectory(This)==' + bDirParam );
	"/>
	<delete_directory_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sDirParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'delete_directory_server', [ RValue( sDirParam ) ] );

			if ( ! StrBegins( sDirParam, 'x-local://' ) )
			{
				sTemp = UrlParent( ObtainTempFile() );
				if ( ! StrBegins( sDirParam, sTemp ) )
				{
					throw 'Only x-local schema.'
				}
			}

			if ( IsDirectory( sDirParam ) )
				DeleteDirectory( sDirParam );
			else
				return false;

			return true;
	"/>
	<zip_extract_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sSourceUrlParam" PARAM="sTargetUrlParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'zip_extract_server', [ RValue( sSourceUrlParam ), RValue( sTargetUrlParam ) ] );

			if ( ! StrBegins( sSourceUrlParam, 'x-local://' ) || ! StrBegins( sTargetUrlParam, 'x-local://' ) )
				throw 'Only x-local schema. Source: ' + sSourceUrlParam + ', Target: ' + sTargetUrlParam + '.';

			tools.zip_extract( sSourceUrlParam, sTargetUrlParam );
	"/>
	<delete_trash_url_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sUrlParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'delete_trash_url_server', [ RValue( sUrlParam ) ] );

			if ( ! StrBegins( sUrlParam, 'x-local://trash/' ) )
				throw 'Only x-local://trash/ url.'

			DeleteUrl( sUrlParam );
	"/>
	<alert_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sMessageParam" EXPR="
			if ( LdsIsServer )
				alert( sMessageParam );
			else
				CallServerMethod( 'tools', 'alert_server', [ RValue( sMessageParam ) ] );
	"/>
	<log_event_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sTypeParam" PARAM="sTextParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'log_event_server', [ RValue( sTypeParam ), RValue( sTextParam ) ] );

			LogEvent( sTypeParam, sTextParam );
	"/>
	<replace_cached_doc_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sUrlParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'replace_cached_doc_server', [ RValue( sUrlParam ) ] );

			if ( ! StrBegins( sUrlParam, 'x-local://' ) )
				throw 'Only x-local schema.'

			ReplaceCachedDoc( sUrlParam, OpenDoc( sUrlParam ) );
	"/>
	<copy_url_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sDestUrlParam" PARAM="sSourceUrlParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'copy_url_server', [ RValue( sDestUrlParam ), RValue( sSourceUrlParam ) ] );

			if ( ! StrBegins( sDestUrlParam, 'x-local://' + DefaultDb + '/' ) &amp;&amp; ! StrBegins( sDestUrlParam, 'x-local://trash/temp/' ) )
				throw 'Only x-local://' + DefaultDb + '/ or x-local://trash/temp/ url.'

			return tools.copy_url( sDestUrlParam, sSourceUrlParam );
	"/>
	<url_file_size_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sUrlParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'url_file_size_server', [ RValue( sUrlParam ) ] );

			if ( ! StrBegins( sUrlParam, 'x-local://share/' ) )
				throw 'x-local://share/ url.'

			return UrlFileSize( sUrlParam );
	"/>
	<put_url_text_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sUrlParam" PARAM="sTextParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'put_url_text_server', [ RValue( sUrlParam ), RValue( sTextParam ) ] );

			if ( ! StrBegins( sUrlParam, 'x-local://' ) )
				throw 'Only x-local schema.';

			if ( (tools.sys_db_capability &amp; tools.UNI_CAP_DATA_STORAGE) != 0 )
			{
				try
				{
					return tools.spxml_unibridge.Object.provider.PutUrl( sUrlParam, sTextParam );
				}
				catch ( err )
				{
					alert( err );
				}
			}
			return PutUrlText( sUrlParam, sTextParam );
	"/>
	<load_share_url_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sUrlParam" PARAM="b64encode" EXPR="
			try
			{
				b64flag = tools_web.is_true( b64encode );
			}
			catch( _no64_ )
			{
				b64flag = false;
			}
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'load_share_url_server', [ RValue( sUrlParam ), b64flag ] );
			if ( ! StrBegins( sUrlParam, 'x-local://share/' ) )
				throw 'Only x-local://share schema.';

			if ( b64flag )
			{
				return Base64Encode( LoadUrlData( sUrlParam ) );
			}
			else
			{
				return LoadUrlData( sUrlParam );
			}
	"/>
	<get_hash_server PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sTextParam" PARAM="sTypeParam" EXPR="
			if ( ! LdsIsServer )
			{
				return CallServerMethod( 'tools', 'get_hash_server', [ RValue( sTextParam ), RValue( sTypeParam ) ] );
			}

			switch ( sTypeParam )
			{
				case 'md5':
				{
					return Md5Hex( sTextParam );
					break;
				}

				case 'sha1':
				{
					return HexData( SHA1( sTextParam ) );
					break;
				}

				case 'sha1_base64':
				{
					return SHA1Base64( sTextParam );
					break;
				}

				case 'sha256':
				{
					return SHA256( sTextParam );
					break;
				}

				case 'base64':
				{
					return Base64Encode( sTextParam );
					break;
				}
			}
			return sTextParam;
	"/>


	<sync_catalog PROPERTY="1" PARAM="catalogName" EXPR="
			if ( tools.sys_db_capability & tools.UNI_CAP_SYNC_CATALOG )
			{
				tools.spxml_unibridge.Object.provider.SyncCatalog(catalogName);
			}
	"/>


	<update_commons_event_types PROPERTY="1" PARAM="bUpdateServersParam" PARAM="oTarget" EXPR="
			try
			{
				bUpdateServersParam = bUpdateServersParam == true;
			}
			catch ( err )
			{
				bUpdateServersParam = false;
			}
			bDoDelete = true;
			try
			{
				oTarget.Name;
				bDoDelete = false;
			}
			catch ( err )
			{
				oTarget = common;
			}
			xarrEventTypes = ArraySelectAll( XQuery( 'event_types' ) );
			if ( bDoDelete )
			{
				for ( fldEventTypeElem in ArraySelectAll( oTarget.event_types ) )
				{
					if ( ! fldEventTypeElem.is_std &amp;&amp; ArrayOptFindByKey( xarrEventTypes, fldEventTypeElem.id, 'code' ) == undefined )
					{
						fldEventTypeElem.Delete();
					}
				}
			}
			for ( catEventTypeElem in xarrEventTypes )
			{
				fldEventTypeChild = oTarget.event_types.ObtainChildByKey( catEventTypeElem.code );
				fldEventTypeChild.name = catEventTypeElem.name;
			}

			if ( bUpdateServersParam )
			{
				for ( fldLngElem in lngs )
					if ( fldLngElem.common_url.HasValue )
						try
						{
							tools.replace_cached_doc_server( fldLngElem.common_url.Value );
						}
						catch ( err )
						{
						}
			}
	"/>


	<DigitalVerifyDoc PROPERTY="1" PARAM="iDocIDParam" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'DigitalVerifyDoc', [ RValue( iDocIDParam ),  ] );

		try
		{
			teDigitalSignature = OpenDoc( UrlFromDocID( Int(iDocIDParam) ) ).TopElem;
			verifRes=tools.DigitalVerify(teDigitalSignature.sign_open,teDigitalSignature.sign_encrypted)
			iID=verifRes.id
			strMessage=verifRes.strMessage
		}
		catch(ex)
		{
			iID=1
			strMessage=StrReplace( ms_tools.get_const('elektronnocifr_6'), '{PARAM1}', ex )
		}

		strResultForm = '
		<?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?>
		<SPXML-FORM>
			<result>
				<id TYPE=&quot;integer&quot;/>
				<strMessage TYPE=&quot;string&quot;/>
			</result>
		</SPXML-FORM>
		';

		strForm='digital_signsture_result_form'
		if (GetOptCachedForm (strForm) != undefined)
		{
			DropFormsCache('*'+strForm+'*');
		}
		RegisterFormFromStr(strForm, strResultForm);
		curResult=OpenNewDoc(strForm).TopElem
		curResult.id=iID
		curResult.strMessage=strMessage;
		return curResult.GetXml( { 'tabs': false } )
	"/>


	<DigitalVerify PROPERTY="1" PARAM="strTextParam" PARAM="strSignatureParam" EXPR="
		try
		{

			CAPICOM_STORE_OPEN_READ_ONLY = 0;
			CAPICOM_CURRENT_USER_STORE = 2;
			CAPICOM_SMART_CARD_USER_STORE=4;
			CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;

			CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME = 0;
			CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME = 1;
			CAPICOM_VERIFY_SIGNATURE_ONLY = 0;

			CAPICOM_MY_STORE='MY';

			CAPICOM_ENCODE_BASE64=1

			CADESCOM_BASE64_TO_BINARY= 1
			CADESCOM_CADES_X_LONG_TYPE_1 = 1;
			CADESCOM_CADES_BES=1
			CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE=1

			function GetSerialNumber()
			{

				var strSerialNumber=null;
				return strSerialNumber
			}

			function XMLDigVerify(xml,signature,strSerialNumberParam)
			{
				SerialNumber=null
				try
				{
					SerialNumber=strSerialNumberParam
				}
				catch(ex)
				{
				}
				// instantiate the CAPICOM objects


				if (global_settings.settings.digital_signature_control=='capicom')
				{
					var SignedData = new ActiveXObject('CAPICOM.SignedData');
				}
				else if (global_settings.settings.digital_signature_control=='cadescom')
				{
					var SignedData =  new ActiveXObject('CAdESCOM.CadesSignedData')
				}

				var certificate = new ActiveXObject('CAPICOM.Certificate');

				try
				{
					SignedData.Content=xml;

					if (global_settings.settings.digital_signature_control=='capicom')
					{
						SignedData.Verify(signature, true, CAPICOM_VERIFY_SIGNATURE_ONLY);
					}
					else if (global_settings.settings.digital_signature_control=='cadescom')
					{
						SignedData.VerifyCades(signature, CADESCOM_CADES_X_LONG_TYPE_1, true);
					}
					certificate=SignedData.Certificates(1);
					//certificate.Display();

					msg=''
					if (SerialNumber!=null&&SerialNumber!=undefined)
					{
						if (StrUpperCase(String(certificate.SerialNumber))!=StrUpperCase(String(SerialNumber)))
						{
							msg=msg+'warmsg:';
						}
					}
					var retData=msg+'Certificate: ' + certificate.GetInfo(CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME) + '\n';
					retData+= 'Issuer: ' + certificate.GetInfo(CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME);
					try
					{
						retData+= '\nSignature Time Stamp: ' + SignedData.Signers(1).SignatureTimeStampTime
					}
					catch(ex)
					{
					}
					try
					{
						retData+= '\nSigning Time: ' + SignedData.Signers(1).SigningTime
					}
					catch(ex)
					{
					}
					return retData;
				}
				catch (e)
				{
					alert(e.description+' '+e.number)
					return 'err: '+e.description;
				}
				return true;
			}


			var iID=0;
			var strMessage=ms_tools.get_const('elektronnocifr_7')
			if (Trim(strTextParam)=='')
			{
				iID=3
				strMessage=ms_tools.get_const('tekstpodpisann');
			}
			else if (Trim(strSignatureParam)=='')
			{
				iID=4
				strMessage=ms_tools.get_const('elektronnocifr_8');
			}
			else
			{

				strSigningTime='Signing Time:'
				verifRes=XMLDigVerify(strTextParam,strSignatureParam,GetSerialNumber())
				if (StrContains(verifRes, 'err:', true))
				{
					iID=1
					index=verifRes.indexOf('\n')
					strMessage=ms_tools.get_const('elektronnocifr_9') + ' '+StrReplace(verifRes,'err:','');
				}
				else if (StrContains(verifRes, 'warmsg:', true))
				{
					iID=2
					strMessage=strMessage+'.\n' + ms_tools.get_const('vnimanienomers');
				}
				else if (StrContains(verifRes, strSigningTime, true))
				{
					strMessage=strMessage+'.\n' + ms_tools.get_const('datapodpisaniya') + ': '+StrRightRangePos(verifRes,(verifRes.lastIndexOf(strSigningTime)+StrLen(strSigningTime)))+'.';
				}
			}
		}
		catch(ex)
		{
			iID=1
			strMessage=StrReplace( ms_tools.get_const('elektronnocifr_6'), '{PARAM1}', ex )
		}


		curResult = {
					'id': iID,
					'strMessage': strMessage,
				};
		return curResult
	"/>


	<process_custom_packs PROPERTY="1" PARAM="arrAddPacksParam" EXPR="
		instProcPacksBaseUrl = 'x-local://custom';
		instProcPacksUrl = 'x-local://' + DefaultDb + '/inst_proc_packs.xml';
		try
		{
			docInstProcPacks = OpenDoc( instProcPacksUrl, 'form=x-local://wtv/wtv_form_inst_packs.xmd' );
		}
		catch ( err )
		{
			docInstProcPacks = OpenNewDoc( 'x-local://wtv/wtv_form_inst_packs.xmd' );
			docInstProcPacks.Url = instProcPacksUrl;
		}
		try
		{
			sOldProcPacksUrl = UrlAppendPath( instProcPacksBaseUrl, 'inst_proc_packs.xml' );
			if ( tools.file_url_exists( sOldProcPacksUrl ) )
			{
				for ( fldPackElem in OpenDoc( sOldProcPacksUrl, 'form=x-local://wtv/wtv_form_inst_packs.xmd' ).TopElem )
					try
					{
						curDocInstProcPack = docInstProcPacks.TopElem.ObtainChildByKey( fldPackElem.PrimaryKey );
						curDocInstProcPack.AssignElem( fldPackElem );
					}
					catch ( e )
					{
						alert( e );
					}
				docInstProcPacks.Save();
				DeleteUrl( sOldProcPacksUrl );
			}
		}
		catch ( err )
		{
			alert( err );
		}
		try
		{
			instPacksDoc = OpenDoc( UrlAppendPath( instProcPacksBaseUrl, 'inst_packs.xml' ), 'form=x-local://wtv/wtv_form_inst_packs.xmd' ).TopElem;

			iCounter = 0;
			for ( _pack in instPacksDoc )
				try
				{
					if ( _pack.is_std &amp;&amp; ( ! _pack.lng_id.HasValue || _pack.lng_id == local_settings.ui_lng_id ) )
					{
						curDocInstProcPack = docInstProcPacks.TopElem.GetOptChildByKey( _pack.PrimaryKey );
						if ( curDocInstProcPack == undefined &amp;&amp; ! _pack.lng_id.HasValue )
						{
							curDocInstProcPack = docInstProcPacks.TopElem.GetOptChildByKey( _pack.PrimaryKey + '_rus' );
							if ( curDocInstProcPack == undefined )
								curDocInstProcPack = docInstProcPacks.TopElem.GetOptChildByKey( _pack.PrimaryKey + '_eng' );
						}
						if ( curDocInstProcPack == undefined || curDocInstProcPack.package_date &lt; _pack.package_date )
						{
							curProcPack = docInstProcPacks.TopElem.ObtainChildByKey( _pack.PrimaryKey );
							curProcPack.AssignElem( _pack );

							iCounter++;
							alert( 'Installation proc pack &quot;' + _pack.PrimaryKey + '&quot; added. Package date: ' + _pack.package_date + '.' );
						}
					}
				}
				catch ( e )
				{
					alert( e );
				}
			for ( sAddPackIDElem in arrAddPacksParam )
				try
				{
					fldInstPackChild = instPacksDoc.GetOptChildByKey( sAddPackIDElem );
					if ( fldInstPackChild != undefined )
					{
						curDocInstProcPack = docInstProcPacks.TopElem.GetOptChildByKey( sAddPackIDElem );
						if ( curDocInstProcPack == undefined || curDocInstProcPack.processed )
						{
							curProcPack = docInstProcPacks.TopElem.ObtainChildByKey( sAddPackIDElem );
							curProcPack.AssignElem( fldInstPackChild );

							iCounter++;
							alert( 'Installation proc pack &quot;' + _pack.PrimaryKey + '&quot; added. Package date: ' + _pack.package_date + '.' );
						}
					}
				}
				catch ( e )
				{
					alert( e );
				}
			if ( iCounter != 0 )
			{
				docInstProcPacks.Save();
				alert( 'Installation proc pack list saved.' );
			}
		}
		catch ( err )
		{
			alert( err );
		}
		try
		{
			_temp_flag = global_settings.update_exist_package_obj.Value;
			global_settings.update_exist_package_obj = false;
			iCounter = 0;
			for ( bStdElem in [ true, false ] )
			{
				for ( _pack in docInstProcPacks.TopElem )
					try
					{
						if ( ! _pack.processed &amp;&amp; _pack.is_std == bStdElem )
						{
							alert( 'Installation proc pack &quot;' + _pack.PrimaryKey + '&quot; processing...' );
							if ( _pack.type == 'list' )
								tools.process_package( UrlAppendPath( instProcPacksBaseUrl, _pack.url ), null, _pack.always_update_objects );
							else
								tools.package_process( UrlAppendPath( instProcPacksBaseUrl, _pack.url ), 'std_objects' );

							_pack.processed = true;
							_pack.process_date = Date();
							_pack.process_log = '';
							iCounter++;
							alert( 'Installation proc pack &quot;' + _pack.PrimaryKey + '&quot; processed.' );
						}
					}
					catch ( e )
					{
						alert( e );
					}
			}
			if ( iCounter != 0 )
			{
				docInstProcPacks.Save();
				alert( 'Installation proc pack list saved.' );
			}
			global_settings.update_exist_package_obj.Value = _temp_flag;
		}
		catch ( err )
		{
			alert( err );
		}
	"/>

	<check_resource_size PROPERTY="1" PARAM="iFileSizeParam" PARAM="iPersonIDParam" PARAM="tePerson" EXPR="
		if ( iPersonIDParam == null &amp;&amp; tePerson == null )
		{
			if ( iFileSizeParam &lt; ( 1024 * 1024 ) )
			{
				return 'ok';
			}
			else
			{
				return ms_tools.get_const('vyprevysilimak_1');
			}
		}

		try
		{
			if (tePerson.Name != 'collaborator')
				throw 'fraud';
		}
		catch(err)
		{
			tePerson = OpenDoc(UrlFromDocID(iPersonIDParam)).TopElem;
			if (tePerson.Name != 'collaborator')
			{
				return 'fraud';
			}
		}

		for(fldProfile in tePerson.person_object_profiles)
		{
			if(fldProfile.person_object_profile_id.OptForeignElem != undefined)
			{
				teProfile = OpenDoc(UrlFromDocID(fldProfile.person_object_profile_id)).TopElem;
				for(fldObjectLink in teProfile.person_object_links)
				{
					if(fldObjectLink.object_catalog == 'resource')
					{
						if(fldObjectLink.max_object_size.HasValue)
						{
							if( iFileSizeParam > ( fldObjectLink.max_object_size * 1024 * 1024 ))
							{
								return StrReplace( ms_tools.get_const('razmerzagruzhae'), '{PARAM1}', fldObjectLink.max_object_size );
							}
						}
						xarrResources = XQuery('for $elem in resources where $elem/person_id=' + iPersonIDParam + ' return $elem');
						if(fldObjectLink.max_amount.HasValue && ArrayCount( xarrResources ) >= fldObjectLink.max_amount)
						{
							return ms_tools.get_const('vyprevysilimak');
						}
						if(fldObjectLink.max_total_size.HasValue)
						{
							iTotalSize = 0;
							for(catResource in xarrResources)
							{
								if(catResource.size.HasValue)
									iTotalSize += OptInt(catResource.size, 0);
							}
							if( (iTotalSize + iFileSizeParam) > (fldObjectLink.max_total_size * 1024 * 1024) )
							{
								return ms_tools.get_const('vyprevysilimak_1');
							}
						}
					}
				}
			}
		}
		return 'ok';
	"/>

	<include_person_to_personnel_reserve_position PROPERTY="1" PARAM="iPersonIdParam" PARAM="teRequestParam" PARAM="iCareerReserveTypeIdParam" PARAM="iPositionIdParam" PARAM="strStateParam" PARAM="iPositionCommonIdParam" PARAM="sIncludeDateParam" EXPR="

		iCareerResTypeId = undefined;
		iPositionId = undefined;
		iPositionCommonId = undefined;

		try
		{
			if (teRequestParam != null  && teRequestParam  != '')
			{
				filRequestType = ArrayOptFirstElem(XQuery('for $elem in request_types where $elem/code = \'request_personnel_reserve\' return $elem'));
				fldCustomElems = tools.get_custom_template('request_type',filRequestType.id);
				sNameCustTemplRequestType = '';
				arrFilds = ArraySelect(fldCustomElems.fields, ' This.type == \'foreign_elem\' && This.catalog == \'career_reserve_type\' ');
				if (ArrayOptFirstElem(arrFilds) != undefined)
				{
					sNameCustTemplRequestType = ArrayOptFirstElem(arrFilds).name;
				}

				fldCareerResType = teRequestParam.custom_elems.ObtainChildByKey(sNameCustTemplRequestType);
				iCareerResTypeId = (fldCareerResType != undefined ? Int(fldCareerResType.value) : undefined);
			}
			else
			{
				iCareerResTypeId = (iCareerReserveTypeIdParam != null ? iCareerReserveTypeIdParam : undefined);
			}
		}
		catch(err)
		{
			iCareerResTypeId = undefined;
		}
		//alert('CareerResTypeId: ' + iCareerResTypeId);

		try
		{
			if (iPositionIdParam != null)
			{
				iPositionId = iPositionIdParam;
			}
		}
		catch(err)
		{
			iPositionId = undefined;
		}
		if (iPositionId == undefined && teRequestParam != null  && teRequestParam.type == 'position')
		{
				iPositionId = teRequestParam.object_id;
		}

		//alert('PositionId: ' + iPositionId);

		try
		{
			if (iPositionCommonIdParam != null)
			{
				iPositionCommonId = iPositionCommonIdParam;
			}
		}
		catch(err)
		{
			iPositionCommonId = undefined;
		}
		if (iPositionCommonId == undefined && teRequestParam != null  && teRequestParam.type == 'position_common')
		{
			iPositionCommonId = teRequestParam.object_id;
		}
		//alert('PositionCommonId: ' + iPositionCommonId);

		try
		{
			dIncludeDate = ParseDate(sIncludeDateParam);
		}
		catch(err)
		{
			dIncludeDate = Date();
		}

		try
		{
			strState = Trim(strStateParam);
		}
		catch(err)
		{
			strState = 'candidate';
		}

		fldPerson = undefined;
		tePerson = undefined;

		if (iPersonIdParam != null)
		{
			fldPerson = ArrayOptFirstElem(XQuery('for $elem in collaborators where $elem/id=' + iPersonIdParam + ' return $elem'));
			if (fldPerson != undefined)
			{
				tePerson = OpenDoc(UrlFromDocID(fldPerson.id)).TopElem;
			}
		}

	   strQuery = (iCareerResTypeId != undefined ? ' and $elem/career_reserve_type_id=' + iCareerResTypeId : '');

      fldReserve=ArrayOptFirstElem(XQuery('for $elem in personnel_reserves where $elem/person_id=' + fldPerson.id + strQuery + ' return $elem'));
	   if (fldReserve != undefined)
	   {
	      docReserve = OpenDoc(UrlFromDocID(fldReserve.id))
	   }
	   else
	   {
			docReserve = OpenNewDoc( 'x-local://wtv/wtv_personnel_reserve.xmd' );
			docReserve.BindToDb( DefaultDb );
	   }

	   if (docReserve != undefined)
	   {
		   docReserve.TopElem.name = tePerson.fullname + ', ' + tePerson.position_name;
		   docReserve.TopElem.person_id = fldPerson.id;
		   tools.common_filling( 'collaborator', docReserve.TopElem, fldPerson.id,tePerson  );
		   docReserve.TopElem.start_date = Date();
		   docReserve.TopElem.status = strState;
		   docReserve.TopElem.career_reserve_type_id = (iCareerResTypeId != undefined ? iCareerResTypeId : null);
		   docReserve.TopElem.include_reserve_date = dIncludeDate;

		   if (iCareerResTypeId != undefined)
		   {
				teCareerResType = OpenDoc(UrlFromDocID(iCareerResTypeId)).TopElem;
				if (ArrayOptFirstElem(teCareerResType.tasks) != undefined)
				{
					for (elemTask in teCareerResType.tasks)
					{
						fldCareerResTypeTask = ArrayOptFirstElem(ArraySelect(docReserve.TopElem.tasks, 'This.id == \'' + elemTask.id + '\''));
						if (fldCareerResTypeTask == undefined)
						{
							fldAddTask = docReserve.TopElem.tasks.AddChild();
							fldAddTask.id = elemTask.id;
							fldAddTask.name = elemTask.name;
							fldAddTask.type = elemTask.type;
							fldAddTask.status = 'active';
							fldAddTask.plan_date = dIncludeDate;
							fldAddTask.object_type = elemTask.object_type;
							fldAddTask.object_id = elemTask.object_id;
						}
					}
				}
		   }
		   docReserve.Save();

			fldCareer=ArrayOptFirstElem(XQuery('for $elem in career_reserves where $elem/person_id=' + fldPerson.id + (iPositionId != undefined ? ' and $elem/position_id=' + iPositionId : '') + ' and $elem/personnel_reserve_id=' + docReserve.DocID + ' return $elem'));

			if (fldCareer!=undefined)
			{
				docCareer = OpenDoc(UrlFromDocID(fldCareer.id))
			}
			else
			{
				docCareer = OpenNewDoc( 'x-local://wtv/wtv_career_reserve.xmd' );
				docCareer.BindToDb( DefaultDb );
				docCareer.TopElem.person_id = docReserve.TopElem.person_id;
				tools.common_filling( 'collaborator', docCareer.TopElem.person_id.sd, docCareer.TopElem.person_id,tePerson );
				docCareer.TopElem.start_date = dIncludeDate;
				docCareer.TopElem.personnel_reserve_id = docReserve.DocID;
				if ( iPositionId != undefined)
				{
					docCareer.TopElem.position_type = 'position';
					//alert('Include Position: ' + iPositionId );
					tePosition = OpenDoc(UrlFromDocID(iPositionId)).TopElem;

					docCareer.TopElem.position_id = iPositionId;
					docCareer.TopElem.position_id.sd.basic_collaborator_id = tePosition.basic_collaborator_id;
					docCareer.TopElem.position_id.sd.basic_collaborator_fullname = tePosition.basic_collaborator_id.sd.fullname;
				}
				else if (iPositionCommonId != undefined)
				{
					docCareer.TopElem.position_type = 'position_common';
					tePositionCommon = OpenDoc(UrlFromDocID(iPositionCommonId)).TopElem;

					docCareer.TopElem.position_common_id = iPositionCommonId;
				}
			}
			docCareer.TopElem.status = 'active';

			docCareer.Save();

			return docReserve.DocID;
		}

	"/>

	<extract_bfields_by_list PROPERTY="1" PARAM="fldSPXML" PARAM="sFieldList" PARAM="bNoValidation" EXPR="
		try
		{
			fldSPXML.Name;
		}
		catch(_x_)
		{
			try
			{
				fldSPXML = OpenDoc(UrlFromDocID(Int(fldSPXML))).TopElem;
			}
			catch(_o_)
			{
				return null;
			}
		}

		try
		{
			bNoValidation = (bNoValidation == true);
		}
		catch(_x_)
		{
			bNoValidation = false;
		}

		var sField, aTransferArray, aFields = ArraySort(ArrayExtract(String(sFieldList).split(';'), 'Trim(This)'), 'This', '+');
		var i, oReturn = new Object;

		if (!bNoValidation)
		for (i = 0; i < ArrayCount(aFields); i++)
		{
			sField = aFields[i];
			if (StrEnds(sField, '/')) //No end slash allowed
			{
				sField = sField.slice(0, StrLen(sField) - 1);
				aFields[i] = sField;
			}

			aFields = ArraySelect(aFields, '!StrBegins(This, ' +CodeLiteral(sField + '/')+ ')');
		}

	var oMetaObj = new Object;

	function buildMeta(oM, sFldName)
	{
		if (StrContains(sFldName, '/'))
		{
			var iRootSlash = sFldName.indexOf('/');
			var sRoot = sFldName.slice(0, iRootSlash);
			var sDeeperBranch = sFldName.slice(iRootSlash + 1);
			if (oM.HasProperty(sRoot))
				buildMeta(oM.GetProperty(sRoot), sDeeperBranch);
			else
				oM.SetProperty(sRoot, buildMeta((new Object), sDeeperBranch));
		}
		else
			oM.SetProperty(sFldName, '');
		return oM;
	}
	for (sField in aFields)
		buildMeta(oMetaObj, sField)


		function getValue(sFldName, fldSource)
		{
		var oVal, fldTarget, aT;

			if (sFldName != null)
			{
			oVal = undefined;
			var i = 0;
			for (fldTarget in ArraySelect(fldSource, 'This.Name == ' + CodeLiteral(sFldName)))
			{
				if (i >= 1)
				{
					if (i == 1)
					{
						aT = new Array();
						aT.push(oVal);
						oVal = aT;
					}
					oVal.push(getValue(null, fldTarget));
				}
				else
					oVal = getValue(null, fldTarget);

				i++;
			}
			}
			else
			{
				if (fldSource.HasValue || fldSource.ChildNum == 0)
					oVal = fldSource.Value;
				else
				{
				var fldChild;
					oVal = new Object;
					for (fldChild in fldSource)
					{
						if (oVal.HasProperty(fldChild.Name))
						{
							aT = oVal.GetProperty(fldChild.Name);
							if (!IsArray(aT))
							{
								aT = new Array();
								aT.push(oVal.GetProperty(fldChild.Name));
								oVal.SetProperty(fldChild.Name, aT);
							}
							aT.push(getValue(null, fldChild));
						}
						else
							oVal.SetProperty(fldChild.Name, getValue(null, fldChild));
					}
				}
			}
			return oVal;

		}

	function extractfld(oStore, sFldName, fldSource) //Obsolete (no meta use)
		{
		var fldTarget,aT;
			if (StrContains(sFldName, '/'))
			{
				var iRootSlash = sFldName.indexOf('/');
				var sRoot = sFldName.slice(0, iRootSlash);
				var sDeeperBranch = sFldName.slice(iRootSlash + 1);

				for (fldTarget in ArraySelect(fldSource, 'This.Name == ' + CodeLiteral(sRoot)))
				{
				if (oStore.HasProperty(sRoot))
					{
					aT = oStore.GetProperty(sRoot);
						if (!IsArray(aT))
						{
							aT = new Array();
						aT.push(oStore.GetProperty(sRoot));
						oStore.SetProperty(sRoot, aT);
						}
						aT.push(extractfld((new Object), sDeeperBranch, fldTarget));
					}
					else
					{
					oStore.SetProperty(sRoot, extractfld((new Object), sDeeperBranch, fldTarget));
					}
				}
			}
			else
			{
				oStore.SetProperty(sFldName, getValue(sFldName, fldSource));
			}

		return oStore;
	}

	function extractfldmeta(oStore, oMeta, fldSource)
	{
		var sFldName, oFld;
		for (sFldName in oMeta)
		{
			oFld = oMeta.GetProperty(sFldName);
			if (oFld == '') //no children specified
				oStore.SetProperty(sFldName, getValue(sFldName, fldSource));
			else
			{
				var fldChild, aT;
				for (fldChild in ArraySelect(fldSource, 'This.Name == ' + CodeLiteral(sFldName)))
				{
					if (oStore.HasProperty(sFldName))
					{
						aT = oStore.GetProperty(sFldName);
						if (!IsArray(aT))
						{
							aT = new Array();
							aT.push(oStore.GetProperty(sFldName));
							oStore.SetProperty(sFldName, aT);
						}
						aT.push(extractfldmeta((new Object), oFld, fldChild));
					}
					else
						oStore.SetProperty(sFldName, extractfldmeta((new Object), oFld, fldChild));
				}
			}
		}
			return oStore;
		}
	//for (sField in aFields) extractfld(oReturn, sField, fldSPXML)

	extractfldmeta(oReturn, oMetaObj, fldSPXML);

		return oReturn;
	"/>


	<get_opened_doc PROPERTY="1" PARAM="teObjectParam" EXPR="
			try
			{
				return teObjectParam.Doc;
			}
			catch ( err )
			{
				try
				{
					return OpenDoc( UrlFromDocID( teObjectParam.id ) );
				}
				catch ( err )
				{
					return null;
				}
			}
	"/>

	<html_to_pdf PROPERTY="1" PARAM="sHtmlText" PARAM="sResourcesDirPath" Param="sOutFilePath" Param="iPageOrientation" EXPR="
	var oPdfGenerator = tools.get_object_assembly('PdfGenerator');
	try
	{
		iOrientation = OptInt(iPageOrientation, 0);
	}
	catch (err)
	{
		iOrientation = 0;
	}

	if ( tools.os_type == 'linux' )
	{
		 //Aspose
		oPdfGenerator.CreateDocument();
		oPdfGenerator.ResourcesDirectoryPath = sResourcesDirPath;
		oPdfGenerator.AddHtmlPage(sHtmlText);
		if(oPdfGenerator.Save(sOutFilePath) == 0)
		{
			alert(ms_tools.get_const('oshibkaprisozda_1') + ': ' + oPdfGenerator.GetError());
			return false;
		}
	}
	else
	{
		// SelectPDF

		oPdfGenerator.InitSelectPDF();

		if(oPdfGenerator.SelectPDFfromHTMLString(sHtmlText, sOutFilePath, iOrientation) == 0)
		{
			alert(ms_tools.get_const('oshibkaprisozda_1') + ': ' + oPdfGenerator.GetError());
			return false;
		}
	}
	return true;
"/>

	<set_project_participant_type PROPERTY="1" PARAM="iProjectParticipantIDParam" PARAM="docProjectParticipantParam" PARAM="iBossTypeIDParam" EXPR="

			var bReturn = false
			try
			{
				try
				{
					if ( docProjectParticipantParam == null || docProjectParticipantParam == '' || docProjectParticipantParam == undefined )
						throw 'no_doc';

					docProjectParticipant = docProjectParticipantParam;
				}
				catch ( err )
				{
					docProjectParticipant = OpenDoc( UrlFromDocID( iProjectParticipantIDParam ) );
				}

				docProjectParticipant.TopElem.boss_type_id = OptInt(iBossTypeIDParam,null);
				docProjectParticipant.Save();
				bReturn=true
			}
			catch(ex)
			{
				alert('set_project_participant_type error: '+ex);
			}
			return bReturn;
	"/>

	<create_project_participant PROPERTY="1" PARAM="iObjectIDParam" PARAM="teObjectParam" PARAM="iProjectIDParam" PARAM="iBossTypeIDParam" PARAM="bWithoutAgreement" EXPR="

			var docProjectParticipant=null
			try
			{
				try
				{
					if ( teObjectParam == null || teObjectParam == '' || teObjectParam == undefined )
						throw 'no_doc';

					teObject = teObjectParam;
					iObjectID=teObject.Doc.DocID
				}
				catch ( err )
				{
					iObjectID=OptInt(iObjectIDParam,null)
					teObject = OpenDoc( UrlFromDocID( iObjectID ) ).TopElem;
				}
				iProjectID=OptInt(iProjectIDParam,null)
				try
				{
					iBossTypeIDParam = OptInt(iBossTypeIDParam, null);
				}
				catch(e)
				{
					iBossTypeIDParam = null;
				}
				try
				{
					bWithoutAgreement = tools_web.is_true( bWithoutAgreement );
				}
				catch(e)
				{
					bWithoutAgreement = false;
				}

				if (iProjectID!=null&&iObjectID!=null)
				{
					if (ArrayOptFirstElem(XQuery( 'for $elem in project_participants where $elem/project_id = ' + iProjectID + ' and $elem/object_id = ' +iObjectID + ' return $elem' ))==undefined)
					{
						var bSendNotification = false;
						docProjectParticipant = OpenNewDoc( 'x-local://wtv/wtv_project_participant.xmd' );
						docProjectParticipant.TopElem.project_id = iProjectID;
						tools.common_filling( 'project', docProjectParticipant.TopElem, iProjectID );
						if( docProjectParticipant.TopElem.workflow_id.HasValue && !bWithoutAgreement )
						{
							docProjectParticipant.TopElem.status_id = 'agreement';
							bSendNotification = true;
						}
						docProjectParticipant.TopElem.object_id = iObjectID;
						docProjectParticipant.TopElem.start_date = Date();

						docProjectParticipant.TopElem.catalog=teObject.Name;
						if (docProjectParticipant.TopElem.object_id.HasValue&&docProjectParticipant.TopElem.catalog.HasValue)
						{
							sDispName=common.exchange_object_types.GetChildByKey( docProjectParticipant.TopElem.catalog ).disp_name
							docProjectParticipant.TopElem.object_name = tools.get_foreign_field( docProjectParticipant.TopElem.object_id, sDispName, global_settings.object_deleted_str );
						}
						if (docProjectParticipant.TopElem.catalog == 'collaborator')
						{
							tools.common_filling( 'collaborator', docProjectParticipant.TopElem, iObjectID,teObject);
						}
						if (iBossTypeIDParam != null)
							docProjectParticipant.TopElem.boss_type_id = iBossTypeIDParam;

						docProjectParticipant.TopElem.AssignElem( teObject );
						docProjectParticipant.BindToDb( DefaultDb );
						docProjectParticipant.Save();

						if( bSendNotification )
						{

							catProjectManagerBossType = ArrayOptFirstElem( XQuery( 'for $elem in boss_types where $elem/code = \'project_manager\' return $elem' ) );
							if( catProjectManagerBossType != undefined )
							{
								xarrProjectManagers = XQuery( 'for $elem in project_participants where $elem/catalog = \'collaborator\' and $elem/project_id = ' + iProjectID + ' and $elem/boss_type_id = ' + catProjectManagerBossType.id + ' and ( $elem/status_id = \'active\' or $elem/status_id = null() )  return $elem' );
								for( _project_manager in xarrProjectManagers )
								{
									tools.create_notification( 'agreement_project_participant', _project_manager.object_id, '', docProjectParticipant.DocID, null, docProjectParticipant.TopElem );
								}
							}
						}

						ms_tools.raise_system_event_env( 'common_project_add_participant', {
						'curUser': tools.get_cur_user(),
						'curUserID': tools.cur_user_id,
						'iObjectId': iObjectID,
						'docProjectParticipant': docProjectParticipant,
						'iProjectId': iProjectID
						} );
					}
				}
			}
			catch(ex)
			{
				alert('create_project_participant error: '+ex);
			}
			return docProjectParticipant;
	"/>


	<set_profile_log PROPERTY="1" PARAM="sIDParam" PARAM="Request" PARAM="sTypeParam" EXPR="
			LogEvent( 'profiling', sIDParam + '\t' + GetCurTicks() + '\t' + Request.Session.GetOptProperty( 'sid', '' ) + '\t' + Request.Url + '\t' + sTypeParam );
	"/>


	<clear_good_instance_status PROPERTY="1" PARAM="oSourceGoodInstance" EXPR="
			iGoodInstanceID = OptInt( oSourceGoodInstance );
			try
			{
				if ( iGoodInstanceID != undefined )
					oSourceGoodInstance = OpenDoc( UrlFromDocID( iGoodInstanceID ) );

				oSourceGoodInstance.TopElem.clear_status();
				oSourceGoodInstance.Save();
			}
			catch ( err )
			{
				return false;
			}
			return true;
	"/>


	<get_form_upload_data PROPERTY="1" PARAM="sIDParam" EXPR="
			try
			{
				if ( sIDParam == '' || sIDParam == null || sIDParam == undefined )
					throw 'no_data';
			}
			catch ( err )
			{
				sIDParam = tools.random_string( 10 );
			}
			return OpenDocFromStr( '&lt;data&gt;&lt;basic&gt;&lt;id&gt;' + sIDParam + '&lt;/id&gt;&lt;create_date&gt;' + StrXmlDate( CurDate ) + '&lt;/create_date&gt;&lt;server_version&gt;' + tools.get_version() + '&lt;/server_version&gt;&lt;/basic&gt;&lt;/data&gt;' );
	"/>

	<set_field_to_form_upload_data PROPERTY="1" PARAM="fldFormTarget" PARAM="fldObjParam" PARAM="oObjIDParam" PARAM="oParams" EXPR="
			try
			{
				if ( oObjIDParam == '' || oObjIDParam == undefined )
					throw 'no_data';
			}
			catch ( err )
			{
				oObjIDParam = null;
			}
			try
			{
				if ( oParams == null )
				{
					throw 'no_data';
				}
			}
			catch ( err )
			{
				oParams = new Object;
			}
			bInvariable = oParams.GetOptProperty( 'bInvariable' ) == true;
			bClearLastData = oParams.GetOptProperty( 'bClearLastData' ) == true;
			bClearResourceData = oParams.GetOptProperty( 'bClearResourceData' ) == true;
			bClearDocInfo = oParams.GetOptProperty( 'bClearDocInfo' ) == true;
			bStd = oParams.GetOptProperty( 'bStd' ) == true;

			if ( oObjIDParam == null )
			{
				sObjName = fldObjParam.Name;
				fldFormObj = fldFormTarget;
				fldObjParam = OpenDocFromStr( fldObjParam.GetXml( { 'tabs': false } ), 'ignore-form=1' ).TopElem;
			}
			else
			{
				iID = OptInt( oObjIDParam )
				if ( iID == undefined )
				{
					sObjName = oObjIDParam;
					fldObjParam = OpenDocFromStr( fldObjParam.GetXml( { 'tabs': false } ), 'ignore-form=1' ).TopElem;
				}
				else
				{
					if ( fldObjParam == null )
						fldObjParam = OpenDoc( UrlFromDocID( iID ), 'ignore-form=1' ).TopElem;

					fldID = fldObjParam.OptChild( 'id' );
					if ( fldID == undefined )
						fldID = fldObjParam.AddChild( 'id', 'string' );
					fldID.Value = '0x' + StrHexInt( oObjIDParam, 16 );

					fldDocInfo = fldObjParam.OptChild( 'doc_info' );
					if ( fldDocInfo != undefined &amp;&amp; bClearDocInfo )
					{
						fldDocInfo.Delete();
						fldDocInfo = undefined;
					}
					if ( bInvariable )
					{
						if ( fldDocInfo == undefined )
							fldDocInfo = fldObjParam.AddChild( 'doc_info' );
						fldInvariable = fldDocInfo.OptChild( 'invariable' );
						if ( fldInvariable == undefined )
							fldInvariable = fldDocInfo.AddChild( 'invariable', 'string' );
						fldInvariable.Value = '1';
					}
					if ( bStd )
					{
						fldStd = fldObjParam.OptChild( 'is_std' );
						if ( fldStd == undefined )
							fldStd = fldObjParam.AddChild( 'is_std', 'string' );
						fldStd.Value = '1';
						fldChanged = fldObjParam.OptChild( 'changed' );
						if ( fldChanged == undefined )
							fldChanged = fldObjParam.AddChild( 'changed', 'string' );
						fldChanged.Value = '0';
					}

					sObjName = fldObjParam.Name + 's';
				}

				fldFormObj = fldFormTarget.OptChild( sObjName );
				if ( fldFormObj == undefined )
					fldFormObj = fldFormTarget.AddChild( sObjName );
			}

			switch ( sObjName )
			{
				case 'deleted_objects':
					fldObject = fldFormObj.AddChild( 'object' );
					fldObject.AddChild( 'id', 'string' ).Value = fldObjParam.id.XmlValue;
					fldObject.AddChild( 'del_date', 'string' ).Value = fldObjParam.del_date.XmlValue;
					break;

				case 'resources':
				{
					if ( bClearResourceData )
					{
						fldData = fldObjParam.OptChild( 'data' );
						if ( fldData != undefined )
						{
							fldData.Delete();
						}
					}
					else
					{
						fldFileUrl = fldObjParam.OptChild( 'file_url' );
						if ( fldFileUrl != undefined &amp;&amp; fldFileUrl.HasValue )
						{
							fldData = fldObjParam.OptChild( 'data' );
							if ( fldData == undefined || ! fldData.HasValue )
							{
								if ( fldData != undefined )
									fldData.Delete();
								fldData = fldObjParam.AddChild( 'data', 'string' );
								fldData.Value = Base64Encode( LoadUrlData( fldFileUrl.Value ) );
								fldFileUrl.Clear();
							}
						}
					}

					if ( bClearLastData )
					{
						fldLastData = fldObjParam.OptChild( 'last_data' );
						if ( fldLastData != undefined )
						{
							fldLastData.Delete();
						}
					}
				}

				default:
					fldFormObj.AddChildElem( fldObjParam );
					fldFormObj.Child( fldFormObj.ChildNum - 1 ).DeleteOptAttr( 'SPXML-FORM' );
					break;
			}
	"/>


	<get_default_object_id PROPERTY="1" PARAM="sCatalogNameParam" PARAM="sTypeParam" PARAM="teObjectParam" EXPR="
			switch ( sCatalogNameParam )
			{
				case 'notification_system':
				{
					// CLUSTER CRASH - Stack overflow
					//return global_settings.settings.own_org.default_notification_system_id.HasValue ? global_settings.settings.own_org.default_notification_system_id : 6035867320053143919;
					return 6035867320053143919; //Int('0x53C3B5592328196F')
					break;
				}

				case 'webinar_system':
					var catWS = ArrayOptFirstElem(XQuery('for $elem in webinar_systems where $elem/code = \'vclass3\' return $elem/Fields(\'id\')'));
					if (catWS == undefined)
					{
						catWS = ArrayOptFirstElem(XQuery('for $elem in webinar_systems return $elem/Fields(\'id\')'));
						return (catWS == undefined ? null : catWS.PrimaryKey.Value);
					}
					else
					{
						return catWS.PrimaryKey.Value;
					}
					break;

				case 'boss_type':
				{
					switch ( sTypeParam )
					{
						case 'main':
							return 6148914691236517290; //Int('0x55555555555555AA')
							break;

						case 'talent_pool_curator':
							return 5703809445382982251; //Int('0x4F28007872920A6B')
							break;

						case 'talent_pool_tutor':
							return 5703809445382982252; //Int('0x4F28007872920A6C')
							break;

						case 'project_manager':
							return 5999489724832892650; //Int('0x5342781E3A4546EA')
							break;
					}
					break;
				}

				case 'contact_type':
					return 6189927669611256747; //Int('0x55E70A6B7C8A5BAB')
					break;

				case 'contact_result':
					return 6190276493421777634; //Int('0x55E847AC5BDB12E2')
					break;

				case 'custom_web_template':
				{
					switch ( sTypeParam )
					{
						case 'css':
						{
							switch ( teObjectParam.Name )
							{
								case 'poll':
									return 7016209651270167871;
									break;

								case 'assessment':
									return 6408782421228602543;
									break;
							}
							break;
						}

						case 'placeholder_empty':
							return 6467098219746644259; //Int('0x59BFBF91138F5123')
							break;
					}
					break;
				}

				case 'learning_storage':
					return 5787282851351776364; //Int('0x50508F1749884C6C')
					break;

				case 'remote_security_profile':
				{
					return 6966441800105803551; // Int('0x60ADC5E84BBD3F1F')  code: basic_library
					break;
				}

				case 'object_data_type':
				{
					switch ( sTypeParam )
					{
						case 'fcache':
						{
							return 7120212614610732115; //Int('0x62D013A60320C453')
							break;
						}
					}
					break;
				}
				case 'conversation_type':
				{
					return 7173599699619500453;
					break;
				}
			}
			return null;
	"/>


	<get_notification_system PROPERTY="1" PARAM="oParam" EXPR="
			iNotificationSystemID = OptInt( oParam );
			teNotificationSystem = null;
			if ( iNotificationSystemID == undefined )
				teNotificationSystem = oParam;
			else
				teNotificationSystem = OpenDoc( UrlFromDocID( iNotificationSystemID ) ).TopElem;

			if ( teNotificationSystem.Name != 'notification_system' )
			{
				iNotificationSystemID = teNotificationSystem.notification_system_id.Value;
				teNotificationSystem = OpenDoc( UrlFromDocID( iNotificationSystemID ) ).TopElem;
			}
			return teNotificationSystem;
	"/>

	<call_notification_system_method PROPERTY="1" PARAM="oParam" PARAM="sMethodNameParam" PARAM="oArrParam" EXPR="
			try
			{
				teNotificationSystem = tools.get_notification_system( oParam );
				var oParams = tools.wvars_to_object( teNotificationSystem.parameters );
				try
				{
					for ( sParamNameElem in oArrParam )
						oParams.SetProperty( sParamNameElem, oArrParam.GetProperty( sParamNameElem ) );
				}
				catch ( err )
				{
				}
				oParams.SetProperty( 'iNotificationSystemID', teNotificationSystem.id.Value );
				oParams.SetProperty( 'teNotificationSystem', teNotificationSystem );
				if(teNotificationSystem.library_url.HasValue)
					return CallObjectMethod( OpenCodeLib( teNotificationSystem.library_url ), sMethodNameParam, [ oParams ] );
			}
			catch( err )
			{
				alert( 'call_notification_system_method : ' + err );
			}
	"/>


	<set_event_type_id PROPERTY="1" PARAM="ftTarget" PARAM="sEventTypeParam" EXPR="
			ftTarget.type_id = sEventTypeParam;
			catEventType = ArrayOptFirstElem( XQuery( 'for $elem in event_types where $elem/code = ' + XQueryLiteral( String( sEventTypeParam ) ) + ' return $elem' ) );
			if ( catEventType == undefined )
			{
				ftTarget.event_type_id.Clear();
				return null;
			}

			ftTarget.event_type_id = catEventType.id;
			return catEventType.id.Value;
	"/>

	<add_script_to_queue PROPERTY="1" PARAM="sScriptParam" PARAM="sCodeParam" PARAM="bDeleteAutomaticallyParam" PARAM="iDelayParam" PARAM="dStartDate" EXPR="
		try
		{
			dStartDate = Date( dStartDate );
		}
		catch( ex )
		{
			dStartDate = null;
		}
		docScript = OpenNewDoc('x-local://wtv/wtv_script_queue_elem.xmd');
		docScript.TopElem.run_code = sScriptParam;
		docScript.TopElem.code = sCodeParam;
		docScript.TopElem.delete_automatically = bDeleteAutomaticallyParam;
		docScript.TopElem.delay = iDelayParam;
		docScript.TopElem.start_date = dStartDate;
		docScript.BindToDb();
		docScript.Save();
		return docScript.DocID;
	"/>

	<wait_script_queue PROPERTY="1" PARAM="iScriptIdParam" PARAM="bDeleteScript" EXPR="
		while(true)
		{
			Sleep( 500 );
			xarrScriptInQueue = XQuery('for $elem in script_queue_elems where $elem/id = ' + iScriptIdParam + ' return $elem');
			carFirstScript = ArrayOptFirstElem(xarrScriptInQueue);
			if( carFirstScript == undefined )
			{
				return null;
			}
			else if(carFirstScript.completed)
			{
				oResult = new Object();
				teScript = OpenDoc(UrlFromDocID(carFirstScript.id)).TopElem;
				oResult.result = tools.read_object(teScript.result.Value);
				oResult.error = teScript.error.Value;
				if(bDeleteScript)
				{
					DeleteDoc(UrlFromDocID(carFirstScript.id),true);
				}
				return oResult;
			}
		}

	"/>


	<open_course_version PROPERTY="1" PARAM="iCourseIdParam" PARAM="sBaseUrlParam" EXPR="
			docCourse = OpenDoc( UrlFromDocID( iCourseIdParam ) );
			if ( sBaseUrlParam != '' &amp;&amp; sBaseUrlParam != docCourse.TopElem.base_url )
			{
				catObjectVersion = ArrayOptFirstElem( XQuery( 'for $elem in object_versions where $elem/object_id = ' + iCourseIdParam + ' and $elem/code = ' + XQueryLiteral( String( sBaseUrlParam ) ) + ' return $elem' ) );
				if ( catObjectVersion != undefined )
					return OpenDocFromStr( OpenDoc( UrlFromDocID( catObjectVersion.id ) ).TopElem.object_xml, 'form=x-local://wtv/wtv_course.xmd' );
			}
			return docCourse;
	"/>

	<evalReplace PROPERTY="1" PARAM="strEvalParam" EXPR="
		var strFormula=strEvalParam
		var arrReplace = [
			'ProcessExecute',
			'alert',
			'eval',
			'ShellExecute',
			'Eval'
			];

		for ( i=0; i < ArrayCount( arrReplace );  i++ )
			strFormula = StrReplace(strFormula, arrReplace[ i ], '' )

		return strFormula;
	"/>


	<xquery PROPERTY="1" PARAM="sQueryParam" EXPR="
			sQueryParam = StrReplace( StrReplace( sQueryParam, '  ', ' ' ), '  ', ' ' );
			//sQueryParam = StrReplace( sQueryParam, ' IsHierChildSelf(', ' IsHierChildOrSelf(' );

			if ( (tools.sys_db_capability & tools.UNI_CAP_BASIC) != 0 )
			{
				iIndex = sQueryParam.indexOf( ' IsHierChild(' );
				sDir = '-';
				if ( iIndex &lt; 0 )
				{
					iIndex = sQueryParam.indexOf( ' IsHierChildOrSelf(' );
					sDir = '+';
				}
				if ( iIndex &gt; 0 )
				{
					iCenterIndex = iIndex + 17;
					iDelta = 1;
					iFinishIndex = sQueryParam.indexOf( ') and', iCenterIndex );
					if ( iFinishIndex &lt; 0 )
						iFinishIndex = sQueryParam.indexOf( ')', iCenterIndex );
					else
						iDelta = 5;

					sQueryParam = ( iDelta == 1 ? StrReplace( StrLeftRange( sQueryParam, iIndex ), ' where', '' ) : StrLeftRange( sQueryParam, iIndex ) ) + StrReplace( StrRightRangePos( sQueryParam, iFinishIndex + iDelta ), '/Hier()', '/Hier( ' + StrRangePos( sQueryParam, sQueryParam.indexOf( ',', iCenterIndex ) + 1, iFinishIndex ) + ',\'' + sDir + '\')' );
				}
			}
			else
			{
				iIndex = sQueryParam.indexOf( ' return $elem/' );
				if ( iIndex &gt; 0 )
				{
					sQueryParam = StrRangePos( sQueryParam, 0, iIndex + 13 );
				}
				else
				{
					iIndex = sQueryParam.indexOf( ' return $elem_qc/' );
					if ( iIndex &gt; 0 )
					{
						sQueryParam = StrRangePos( sQueryParam, 0, iIndex + 16 );
					}
				}

				iIndex = sQueryParam.indexOf( ' contains(' );
				while ( iIndex &gt; 0 )
				{
					iIndexEnd = sQueryParam.indexOf( ') ', iIndex );
					if ( iIndexEnd &gt; 0 )
					{
						iIndex1 = sQueryParam.indexOf( ',', iIndex );
						if ( iIndex1 &gt; 0 )
						{
							iIndex2 = sQueryParam.indexOf( ',', iIndex1 + 1 );
							if ( iIndex2 &gt; 0 &amp;&amp; iIndex2 &lt; iIndexEnd )
							{
								sQueryParam = StrReplace( sQueryParam, StrRangePos( sQueryParam, iIndex, iIndexEnd + 2 ), ( StrRangePos( sQueryParam, iIndex, iIndex1 ) + StrRangePos( sQueryParam, iIndex1, iIndex2 ) + ') ' ) );
							}
						}
					}
					iIndex = sQueryParam.indexOf( ' contains(', iIndex + 12 );
				}
			}
			return XQuery( sQueryParam );
	"/>


	<!-- NOT DELETE FOR OLD VERSIONS -->
	<get_catalog_limits PROPERTY="1" EXPR="
			sRes = tools.xml_header() + '&lt;catalogs&gt;';
			for ( fldObjectTypeElem in common.exchange_object_types )
				if ( fldObjectTypeElem.max_records_num.HasValue )
					sRes += '&lt;catalog&gt;&lt;name&gt;' + fldObjectTypeElem.name + '&lt;/name&gt;&lt;max_records_num&gt;' + fldObjectTypeElem.max_records_num + '&lt;/max_records_num&gt;&lt;/catalog&gt;';
			return sRes + '&lt;/catalogs&gt;';
	"/>

	<xhttp_ini TYPE="variant"/>

	<load_xhttp_ini PROPERTY="1" EXPR="
	   xHttpIni = new Array();
	   fileStream = new FileStream( UrlAppendPath( FilePathToUrl( AppDirectoryPath() ), 'xHttp.ini' ) );
	   while ( true )
		   {
				str = fileStream.ReadLine();
				if ( str == undefined )
				   break;
			if (StrBegins(str,'#'))
				continue;

			d = str.indexOf(':');
			if (d > 0)
			{
				varname = Trim(StrLeftRange(str, d ));
				varvalue = Trim(StrRightRangePos(str, d + 1));
				xHttpIni.push({'name':varname,'value':varvalue});
			}
		   }
	   tools.xhttp_ini = xHttpIni;
	"/>

	<get_xhttp_ini PROPERTY="1" PARAM="sIniVarName" EXPR="

	   if (!tools.xhttp_ini.HasValue)
	   {
		tools.load_xhttp_ini();
	   }

	   value = ArrayOptFindByKey(tools.xhttp_ini.Object, sIniVarName,'name' );
	   return (value!=undefined) ? value.value : undefined;
	"/>



	<resource_pic_envelope ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="sMode" PARAM="vParam1" PARAM="vParam2" PARAM="vParam3" PARAM="vParam4" PARAM="iResourceID" EXPR="
		var sResult, oCodeLib = OpenCodeLib('x-local://wtv/wtv_resource.js');
		try
		{
			iResourceID;
		}
		catch( ex )
		{
			iResourceID = null;
		}
		switch(sMode)
		{
			case 'get_pic_path':
				sResult = oCodeLib.getFilePath(vParam1, vParam2);
				break;
			case 'get_size':
				sResult = oCodeLib.getSize( vParam1, iResourceID );
				break;
			case 'resize':
				sResult = oCodeLib.reSize(vParam1, vParam2, vParam3, vParam4, iResourceID );
				break;

		}
		return sResult;
	"/>


	<!------------------------------------ Работа с ресурсами ---------------------------------->
	<file_source_get_upload_file_url ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="iFileSourceIdParam" PARAM="sFileNameParam" EXPR="
		teFileSource = tools.get_file_sources( iFileSourceIdParam );
		var sResult, oCodeLib;
		var g_sFileNameParam = sFileNameParam;
		if(teFileSource.url.HasValue)
		{
			oCodeLib = OpenCodeLib('x-local://wtv/' + teFileSource.url);
			sTempFileUrl = oCodeLib.getUploadFileUrl(g_sFileNameParam, teFileSource);
		}
		else
		{
			InPlaceEval(teFileSource.run_code);
			sTempFileUrl = getUploadFileUrl(g_sFileNameParam, teFileSource);
		}

		return sTempFileUrl;
	"/>

	<file_source_upload_file ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="iFileSourceIdParam" PARAM="sFileUrlParam" PARAM="sTempFileUrlParam" EXPR="
		teFileSource = tools.get_file_sources( iFileSourceIdParam );
		var sTempFileUrl = '';
		var g_sTempFileUrl = sTempFileUrlParam;
		var g_sFileUrl = sFileUrlParam;
		if(teFileSource.url.HasValue)
		{
			var oCodeLib = OpenCodeLib('x-local://wtv/' + teFileSource.url);
			sTempFileUrl = oCodeLib.uploadFile(g_sFileUrl, g_sTempFileUrl, teFileSource);
		}
		else
		{
			InPlaceEval(teFileSource.run_code);
			sTempFileUrl = uploadFile(g_sFileUrl, g_sTempFileUrl, teFileSource);
		}
		return sTempFileUrl;
	"/>

	<file_source_get_file_to_save_url ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="iFileSourceIdParam" PARAM="iResourceIdParam" PARAM="sUidPARAM" EXPR="
		teFileSource = tools.get_file_sources( iFileSourceIdParam );
		if(teFileSource.url.HasValue)
		{
			var oCodeLib = OpenCodeLib('x-local://wtv/' + teFileSource.url);
			sTempFileUrl = oCodeLib.getSaveFileUrl(sUidPARAM,iResourceIdParam, teFileSource);
		}
		else
		{
			InPlaceEval(teFileSource.run_code);
			sTempFileUrl = getSaveFileUrl(sUidPARAM,iResourceIdParam, teFileSource);
		}
		return sTempFileUrl;
	"/>

	<file_source_get_files_list ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="iFileSourceIdParam" EXPR="
		teFileSource = tools.get_file_sources( iFileSourceIdParam );
		if(teFileSource.url.HasValue)
		{
			var oCodeLib = OpenCodeLib('x-local://wtv/' + teFileSource.url);
			return oCodeLib.getFilesList( teFileSource );
		}
		else
		{
			InPlaceEval(teFileSource.run_code);
			return getFilesList( teFileSource );
		}
	"/>

	<file_source_download_file ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="iFileSourceIdParam" PARAM="sUidPARAM" PARAM="oRequestPARAM" PARAM="oResponsePARAM" EXPR="
		teFileSource = tools.get_file_sources( iFileSourceIdParam );
		var g_sUid = sUidPARAM;
		var g_oRequest = oRequestPARAM;
		var g_oResponse = oResponsePARAM;
		if(teFileSource.url.HasValue)
		{
			var oCodeLib = OpenCodeLib('x-local://wtv/' + teFileSource.url);
			oCodeLib.downloadFile(g_sUid, g_oRequest,g_oResponse, teFileSource);
		}
		else
		{
			InPlaceEval(teFileSource.run_code);
			downloadFile(g_sUid, g_oRequest,g_oResponse, teFileSource);
		}
	"/>

	<file_source_get_file_url ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="iFileSourceIdParam" PARAM="sUidPARAM" EXPR="
		var teFileSource = tools.get_file_sources( iFileSourceIdParam );
		var g_sUid = sUidPARAM;
		if(teFileSource.url.HasValue)
		{
			var oCodeLib = OpenCodeLib('x-local://wtv/' + teFileSource.url);
			return oCodeLib.getFileUrl(g_sUid, teFileSource);
		}
		else
		{
			InPlaceEval(teFileSource.run_code);
			return getFileUrl(g_sUid, teFileSource);
		}
	"/>
	<!------------------------------------ Конец работы с ресурсами ---------------------------------->
	<call_webinar_system_method ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="iWebinarSystemIdParam" PARAM="sMethodNameParam" PARAM="oParams" EXPR="

		var docEventParam = null;
		var teEventParam = null;
		var iEventIDParam = undefined;
		try
		{
			docEventParam = oParams.GetOptProperty( 'docEvent' );
			teEventParam = docEventParam.TopElem;
		}
		catch( ex )
		{
			docEventParam = null;
		}
		if( teEventParam == null )
		{
			try
			{
				teEventParam = oParams.GetOptProperty( 'teEvent' );
				teEventParam.Name;
			}
			catch( ex )
			{
				teEventParam = null;
			}
			if( teEventParam == null )
			{
				try
				{
					iEventIDParam = Int( oParams.GetOptProperty( 'iEventID' ) );
				}
				catch( ex )
				{
					try
					{
						iEventIDParam = Int( oParams.GetOptProperty( 'iEventId' ) );
					}
					catch( ex )
					{
						iEventIDParam = undefined;
					}
				}
				if( iEventIDParam != undefined )
				{
					docEventParam = tools.open_doc( iEventIDParam );
					if( docEventParam != undefined )
					{
						teEventParam = docEventParam.TopElem;
					}
				}
			}
		}
		var oResult = new Object();
		oResult.error = 0;
		oResult.message = '';
		if( teEventParam != null && teEventParam.is_model )
		{
			return oResult;
		}
		if( teEventParam != null )
		{
			var feEventType = teEventParam.event_type_id.OptForeignElem;
			if( feEventType == undefined || !feEventType.online )
			{
				return oResult;
			}
		}
		try
		{
			teWebinarSystem = OpenDoc(UrlFromDocID(iWebinarSystemIdParam)).TopElem;
			var sCodeToEval;

			if(teWebinarSystem.library_url.HasValue)
			{
				if(StrBegins(teWebinarSystem.library_url, 'x-local:/', true))
				{
					sCodeToEval = LoadUrlText(teWebinarSystem.library_url);
				}
				else
				{
					sCodeToEval = LoadUrlText('x-local://wtv/' + teWebinarSystem.library_url);
				}
			}
			else
			{
				sCodeToEval = teWebinarSystem.library_code;
			}
			InPlaceEval(sCodeToEval + ' ' + sMethodNameParam + '()');
		}
		catch( err )
		{
			tools.alert_server( 'call_webinar_system_method ' + err );
			oResult.error = 1;
			oResult.message = 'При выполнении метода произошла ошибка. Обратитесь к администратору.';
		}
		return oResult;
	"/>

	<call_library_system_method ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="iLibrarySystemIdParam" PARAM="sMethodNameParam" PARAM="oParams" EXPR="
		teLibrarySystem = OpenDoc(UrlFromDocID(iLibrarySystemIdParam)).TopElem;
		oParams.SetProperty('teLibrarySystem', teLibrarySystem);
		oResult = CallObjectMethod( OpenCodeLib( 'x-local://wtv/' + teLibrarySystem.library_url ), sMethodNameParam, [ oParams ] );
		return oResult;
	"/>

	<calculate_statistic_rec ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="iStatisticRecId" PARAM="iObjectIdParam" PARAM="bIgnorePeriodSettingsParam" PARAM="bCalculateCatalogsParam" EXPR="
		try{
			iObjectIdParam;
		}
		catch(x)
		{
			iObjectIdParam = null;
		}
		try{
			bIgnorePeriodSettingsParam;
		}
		catch(x)
		{
			bIgnorePeriodSettingsParam = null;
		}
		try
		{
			bCalculateCatalogsParam = bCalculateCatalogsParam == true;
		}
		catch ( err )
		{
			bCalculateCatalogsParam = false;
		}
		docStat = OpenDoc(UrlFromDocID(iStatisticRecId));

		var sTaskID = ms_tools.init_task( ({
			'title': docStat.TopElem.name.Value,
			'progress_title': 'Инициализация расчета',
			'progress_max': 1
		}), 10 );

		var oRes = new Object;
		var teTaskInfo = ms_tools.check_task( sTaskID, oRes );
		if ( teTaskInfo == null )
			return null;

		teTaskInfo.start_date = CurDate;
		teTaskInfo.status = 'process';

		var vResult = docStat.TopElem.calculate(iObjectIdParam, null, null, null, ({'task_id': sTaskID, 'calculate_catalogs': bCalculateCatalogsParam }));

		ms_tools.return_progress_info( sTaskID, ({
			'status': ( oRes.error &gt; 0 ? 'cancel' : 'complete' ),
			'progress_text': 'Расчет завершен',
			'result': vResult,
			'error': 0,
			'error_text': ''
		}) );

		return vResult;
	"/>

	<get_statistic_data ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="iStatisticRecId" PARAM="iObjectIdParam" PARAM="sPeriodTypeParam" PARAM="dDateStartParam" PARAM="dDateEndParam" EXPR="

		docStatistic = OpenDoc(UrlFromDocID(iStatisticRecId));
		teStatistic = docStatistic.TopElem;
		try{
			iObjectIdParam;
		}
		catch(x)
		{
			iObjectIdParam = null;
		}
		try{
			sPeriodTypeParam;
		}
		catch(x)
		{
			sPeriodTypeParam = null;
		}

		try{
			dDateStartParam;
		}
		catch(x)
		{
			dDateStartParam = null;
		}
		try{
			dDateEndParam;
		}
		catch(x)
		{
			dDateEndParam = null;
		}

		if(teStatistic.calc_period == 0 || !teStatistic.last_calculate_date.HasValue || DateOffset(teStatistic.last_calculate_date,teStatistic.calc_period * 60) < Date())
		{
			docStatistic.TopElem.calculate(iObjectIdParam);
		}
		sQuery = 'for $elem in statistic_datas where $elem/statistic_rec_id=' + iStatisticRecId;

		if(iObjectIdParam != null)
		{
			sQuery += ' and $elem/object_id=' + iObjectIdParam;
		}

		if(sPeriodTypeParam != null)
		{
			sQuery += ' and $elem/period_type = \'' + sPeriodTypeParam + '\'';
		}

		if(dDateStartParam != null)
		{
			sQuery += ' and $elem/statistic_date > date(\'' + dDateStartParam + '\')';
		}
		if(dDateEndParam != null)
		{
			sQuery += ' and $elem/statistic_date < date(\'' + dDateEndParam + '\')';
		}
		sQuery += ' order by $elem/statistic_date descending return $elem';
		return XQuery(sQuery);
	"/>

	<obtain_statistic_data ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="StatisticRec" PARAM="iObjectIdParam" PARAM="sPeriodTypeParam" PARAM="dDateStartParam" PARAM="dDateEndParam" PARAM="bVirtual" PARAM="bForceRedo" EXPR="
		function recovery(xarrSource)
		{
			var aDocData = ArrayExtract(xarrSource, 'OpenDoc(UrlFromDocID(This.id)).TopElem');

			if (ArrayCount(aDocData) > 0)
			{
				 aDocData = docStatistic.TopElem.calculate(iObjectIdParam, dDateStartParam, dDateEndParam, sPeriodTypeParam,  ({'return_data': true, 'virtual': false, 'trycomplete': aDocData, 'task_id': sTaskID}));
			}
			else
				aDocData = docStatistic.TopElem.calculate(iObjectIdParam, dDateStartParam, dDateEndParam, sPeriodTypeParam,  ({'return_data': true, 'virtual': false, 'backcheck': false, 'task_id': sTaskID}));

			return aDocData;
		}

		var docStatistic;
		try
		{
			try
			{
				StatisticRec = Int(StatisticRec);
				docStatistic = OpenDoc(UrlFromDocID(Int(StatisticRec)));
			}
			catch(q)
			{
				docStatistic = StatisticRec;
			}
			if (docStatistic.TopElem.Name != 'statistic_rec')
				throw 'bad';
		}
		catch(x)
		{
			alert('obtain_statistic_data Error: Invalid statistic rec id');
			return null;
		}

		try{
			iObjectIdParam = Int(iObjectIdParam);
		}
		catch(x)
		{
			iObjectIdParam = null;
		}
		try{
			sPeriodTypeParam;
		}
		catch(x)
		{
			sPeriodTypeParam = null;
		}
		if (sPeriodTypeParam != null)
		{
			sPeriodTypeParam = common.perioditys.GetOptChildByKey(sPeriodTypeParam);
			if (sPeriodTypeParam != undefined)
				sPeriodTypeParam = sPeriodTypeParam.PrimaryKey;
			else
			{
				alert('obtain_statistic_data Error: Invalid period type');
				return null;
			}
		}

		try{
			if (DataType(RValue(dDateStartParam)) != 'date')
				throw 'bad';
		}
		catch(x)
		{
			dDateStartParam = null;
		}
		try{
			if (DataType(RValue(dDateEndParam)) != 'date')
				throw 'bad';
		}
		catch(x)
		{
			dDateEndParam = null;
		}

		try{
			bVirtual = (bVirtual == true);
		}
		catch(x)
		{
			bVirtual = false;
		}

		try{
			bForceRedo = (bForceRedo == true);
		}
		catch(x)
		{
			bForceRedo = false;
		}
		var aDatas;

		var sTaskID = ms_tools.init_task( ({
			'title': docStatistic.TopElem.name.Value,
			'progress_title': 'Инициализация расчета',
			'progress_max': 1
		}), 10 );

		var teTaskInfo = ms_tools.get_task( sTaskID );
		if ( teTaskInfo == null )
			return null;

		teTaskInfo.start_date = CurDate;
		teTaskInfo.status = 'process';

		if (bVirtual)
		{
			aDatas = docStatistic.TopElem.calculate(iObjectIdParam, dDateStartParam, dDateEndParam, sPeriodTypeParam, ({'return_data': true, 'virtual': true, 'backcheck': false, 'task_id': sTaskID}));
		}
		else
		{
			var sXQuery = 'for $elem in statistic_datas where $elem/statistic_rec_id = ' + XQueryLiteral(docStatistic.DocID);

			if(iObjectIdParam != null)
			{
				sXQuery += ' and $elem/object_id=' + iObjectIdParam;
			}

			if(sPeriodTypeParam != null)
			{
				sXQuery += ' and $elem/period_type = ' + XQueryLiteral(sPeriodTypeParam);
			}

			if(dDateStartParam != null)
			{
				sXQuery += ' and $elem/statistic_date >= ' + XQueryLiteral(dDateStartParam);
			}
			if(dDateEndParam != null)
			{
				sXQuery += ' and $elem/statistic_date <= ' + XQueryLiteral(dDateEndParam);
			}

			sXQuery += ' return $elem/id';
			if (!bForceRedo)
				sXQuery += ',$elem/__data';

			var statData;

			aDatas = tools.xquery(sXQuery);
			if (bForceRedo)
			{
				for (statData in aDatas)
				{
					DeleteDoc(UrlFromDocID(statData.id));
				}
				aDatas = docStatistic.TopElem.calculate(iObjectIdParam, dDateStartParam, dDateEndParam, sPeriodTypeParam,  ({'return_data': true, 'virtual': false, 'backcheck': false, 'task_id': sTaskID}));
			}
			else
			{
				aDatas = recovery(aDatas);
			}
		}

		ms_tools.return_progress_info( sTaskID, ({
			'status': ( teTaskInfo.error &gt; 0 ? 'cancel' : 'complete' ),
			'progress_text': 'Расчет завершен',
			'result': '',
			'error': 0,
			'error_text': ''
		}) );

		return aDatas;
	"/>



	<assign_from_object PROPERTY="1" PARAM="fldTarget" PARAM="oSourceParam" EXPR="
			function assignObject( fldTargetParam, oParam )
			{
				if ( IsArray( oParam ) )
				{
					for ( oElem in oParam )
					{
						fldChild = fldTargetParam.AddChild();
						assignObject( fldChild, oElem );
					}
				}
				else
				{
					for ( sParamNameElem in oParam )
					{
						oElem = oParam.GetProperty( sParamNameElem );
						fldField = fldTargetParam.OptChild( sParamNameElem );
						if ( fldField == undefined )
							return;

						if ( IsArray( oElem ) )
						{
							assignObject( fldField, oElem );
						}
						else
						{
							fldField.Value = oElem;
						}
					}
				}
			}

			assignObject( fldTarget, oSourceParam );
			return true;
	"/>

	<open_doc PROPERTY="1" PARAM="iDocID" EXPR="
		var doc;
		try
		{
			doc = OpenDoc(UrlFromDocID(Int(iDocID)));
		}
		catch(___)
		{
			doc = undefined;
		}

		return doc;
	"/>


	<filling_learning_parts PROPERTY="1" PARAM="TopElem" EXPR="
			for ( fldPartElem in TopElem.parts )
			{
				if ( ! fldPartElem.core_lesson_changed || ! fldPartElem.learning_part_id.HasValue )
					continue;

				try
				{
					docLearningPart = OpenDoc( UrlFromDocID( fldPartElem.learning_part_id ) );
					docLearningPart.TopElem.AssignElem( fldPartElem );
					docLearningPart.Save();

					for ( fldNameElem in [ 'core_lesson', 'lesson_report', 'data_lesson', 'objects' ] )
						fldPartElem.Child( fldNameElem ).Clear();

					fldPartElem.core_lesson_changed = false;
				}
				catch ( err )
				{
					alert( err );
				}
			}
	"/>


	<parse_email_address PROPERTY="1" PARAM="sAddressParam" EXPR="
			oRes = ({ 'name': '', 'address': '' });

			sAddressParam = Trim( sAddressParam );
			iAddressIndex = sAddressParam.lastIndexOf( '&lt;' );
			if ( iAddressIndex &gt;= 0 )
			{
				oRes.address = StrRangePos( sAddressParam, iAddressIndex + 1, StrLen( sAddressParam ) - 1 );
				if ( iAddressIndex &gt; 0 )
				{
					oRes.name = Trim( StrRangePos( sAddressParam, 0, iAddressIndex ) );
					if ( StrBegins( oRes.name, '&quot;' ) &amp;&amp; StrEnds( oRes.name, '&quot;' ) )
						oRes.name = StrRangePos( oRes.name, 1, StrLen( oRes.name ) - 1 );
				}
			}
			else
			{
				oRes.address = sAddressParam;
			}
			return oRes;
	"/>



	<safe_execution PROPERTY="1" CALLER-ENV="1" PARAM="sCodeSaveExecutionParam" PARAM="oEnvParam" EXPR="
			if ( sCodeSaveExecutionParam == '' )
				return true;

			temp_arrCodeSaveExecution = [
				{ 'name': 'file function', 'arr': ['CreateDirectory','CreateShellLink','DeleteDirectory','DeleteFile','GetShellFolderPath','MoveFile','ObtainDirectory','ObtainSessionTempFile','ObtainTempFile','PutFileData','PutFileText','AddUrlMapping','CopyUrl','DeleteUrl','PutUrlData','PutUrlText'] },
				{ 'name': 'function', 'arr': ['RemoveEmptySysRegKey','RemoveSysRegKey','SetSysRegIntegerValue','SetSysRegStrValue','SysRegKeyExists','ProcessExecute','ShellExecute','DllWrapper','ActiveXObject'] },
				{ 'name': 'execution function', 'arr': ['EvalCodeUrl','EvalCodePage','EvalCodePageUrl','EvalCs','InPlaceEval','OptEval','ServerEval','EvalAsync','EvalSync','EvalCode'] },
				{ 'name': 'tools function', 'arr': [] }
			];
			for ( temp_arrCodeSaveExecutionElem in temp_arrCodeSaveExecution )
			{
				for ( sCodeSaveExecutionElem in temp_arrCodeSaveExecutionElem.arr )
				{
					if ( StrContains( sCodeSaveExecutionParam, sCodeSaveExecutionElem ) )
					{
						throw 'Error code execution. Invalid ' + temp_arrCodeSaveExecutionElem.name + ' ' + sCodeSaveExecutionElem + '.';
						return;
					}
				}
			}
			for ( sCodeSaveExecutionElem in [' ','=','(',';',',','\t','\n'] )
			{
				for ( sPostCodeSaveExecutionElem in ['(',' ('] )
				{
					if ( StrContains( sCodeSaveExecutionParam, sCodeSaveExecutionElem + 'eval' + sPostCodeSaveExecutionElem ) )
					{
						throw 'Error code execution. Invalid Eval function.';
						return;
					}
				}
			}

			bSafeEval = false;
			try
			{
				if ( oEnvParam == undefined )
				{
					throw 'no_data';
				}
				bSafeEval = true;
			}
			catch ( err )
			{
			}
			if ( bSafeEval )
			{
				return SafeEval( sCodeSaveExecutionParam, oEnvParam );
			}
			else
			{
				return eval( sCodeSaveExecutionParam );
			}
	"/>


	<get_content_access PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="iPersonID" PARAM="tePerson" EXPR="

		if ( ! LdsIsServer )
		{
			return CallServerMethod( 'tools', 'get_content_access', [ null, null ] );
		}

		if ( iPersonID == null )
		{
			iPersonID = CurAuthObject.id;
		}

		try
		{
			if ( tePerson == null )
				tePerson = CurAuthObject;
			if (tePerson.Name != 'collaborator')
				throw '?';
		}
		catch(_x_)
		{
			tePerson = tools.open_doc(iPersonID).TopElem;
			if (tePerson.Name != 'collaborator')
				throw 'Not a person id';
		}
		if (tePerson.id != iPersonID)
		{
			throw 'person ID not match person doc';
		}
		var catContent, teContent, aContentItems;
		var i = 0;
		var elContent,fldObject, aRefinedContent = new Array();

		/// VERSION 2 START /////

		/*
			1) Access rules summing (or) from person_object_link elements (both person and groups)
			2) Checking all profiles (both person and groups). Matching by catalog: if there is NO CATALOG ENTRY from previous step then add, otherwise skip (no matter what details).
		*/


		var sTargetItems = ArrayMerge(XQuery('for $elem in group_collaborators where $elem/collaborator_id = ' + XQueryLiteral(iPersonID) + ' return $elem/Fields(\'group_id\')'), 'This.group_id', ',');

		aContentItems = tools.xquery('for $elem in person_object_links where MatchSome($elem/subject_id, (' + (iPersonID + (sTargetItems != '' ? ',' : '') + sTargetItems) + ')) return $elem/id,$elem/__data');

		var oObject;

		for (catContent in aContentItems)
		{
			docContent = tools.open_doc( catContent.PrimaryKey );
			if ( docContent == undefined )
			{
				continue;
			}
			teContent = docContent.TopElem;
			elContent = ArrayOptFindByKey(aRefinedContent, teContent.object_catalog.Value, 'catalog');
			if (elContent == undefined)
			{
				elContent = ({'catalog': teContent.object_catalog.Value, 'create': false, 'edit': false, 'delete': false});
				aRefinedContent.push(elContent);
			}

			if (teContent.all_can_create.Value)
				elContent.create = true;
			if (teContent.all_can_edit.Value)
				elContent.edit = true;
			if (teContent.all_can_delete.Value)
				elContent.SetProperty('delete', true);

			for (fldObject in teContent.objects)
			{
				if (elContent.HasProperty('objects'))
					oObject = ArrayOptFindByKey(elContent.objects, fldObject.PrimaryKey.Value, 'id');
				else
				{
					elContent.objects = new Array();
					oObject = undefined;
				}

				if (oObject == undefined)
				{
					oObject = ({'id': fldObject.object_id.Value, 'edit': fldObject.can_edit.Value, 'delete': fldObject.can_delete.Value, 'access_level': fldObject.access_level.Value});
					elContent.objects.push(oObject);
				}
				else
				{
					oObject.edit = fldObject.can_edit.Value;
					oObject.SetProperty('delete', fldObject.can_delete.Value);
				}
			}
		}

		aContentItems = ArrayExtract(tePerson.person_object_profiles, 'This.PrimaryKey.Value');
		for (catContent in tools.xquery('for $elem in groups where MatchSome($elem/id, (' + sTargetItems + ')) return $elem/id,$elem/__data'))
		{
			teContent = OpenDoc(UrlFromDocID(catContent.PrimaryKey)).TopElem;
			if (teContent.person_object_profiles.ChildNum &gt; 0)
			{
				aContentItems = ArrayUnion(aContentItems, ArrayExtract(teContent.person_object_profiles, 'This.PrimaryKey.Value'));
			}
		}

		aContentItems = tools.xquery('for $elem in person_object_profiles where MatchSome($elem/id, (' +ArrayMerge(ArraySelectDistinct(aContentItems, 'This'),'This',',')+ ')) return $elem/id,$elem/__data');
		var fldPOL;
		for (catContent in aContentItems)
		{
			teContent = OpenDoc(UrlFromDocID(catContent.PrimaryKey)).TopElem;
			for (fldPOL in teContent.person_object_links)
			{
				elContent = ArrayOptFindByKey(aRefinedContent, fldPOL.object_catalog.Value, 'catalog');
				if (elContent == undefined)
				{
					elContent = ({'catalog': fldPOL.object_catalog.Value, 'create': fldPOL.all_can_create.Value, 'edit': fldPOL.all_can_edit.Value, 'delete': fldPOL.all_can_delete.Value});

					aRefinedContent.push(elContent);
				}

				if (fldPOL.objects.ChildNum &gt; 0)
				{
					if (elContent.HasProperty('objects'))
					{
						for (fldObject in fldPOL.objects)
						{
							oObject = ArrayOptFindByKey(elContent.objects, fldObject.object_id.Value, 'id');
							if (oObject != undefined)
							{
								if (fldObject.can_edit.Value)
									oObject.edit = true;
								if (fldObject.can_delete.Value)
									oObject.SetProperty('delete', true);
								if (fldObject.access_level.Value > oObject.access_level)
									oObject.access_level = fldObject.access_level.Value;
							}
							else
							{
								oObject = ({'id': fldObject.object_id.Value, 'edit': fldObject.can_edit.Value, 'delete': fldObject.can_delete.Value, 'access_level': fldObject.access_level.Value});
								elContent.objects.push(oObject);
							}
						}
					}
					else
					{
						elContent.objects = new Array();
						for (fldObject in fldPOL.objects)
						{
							oObject = ({'id': fldObject.object_id.Value, 'edit': fldObject.can_edit.Value, 'delete': fldObject.can_delete.Value, 'access_level': fldObject.access_level.Value});
							elContent.objects.push(oObject);
						}
					}
				}


				if (fldPOL.max_amount.HasValue)
					elContent.max_amount = fldPOL.max_amount.Value;
			}
		}


		/// VERSION 2 END /////

/*
		/// VERSION 1 START /////
		aContentItems = XQuery('for $elem in person_object_links where $elem/subject_id = ' + XQueryLiteral(iPersonID) + ' return $elem/Fields(\'id\',\'object_catalog\')');

		var xarrGroups = XQuery('for $elem in group_collaborators where $elem/collaborator_id = ' + XQueryLiteral(iPersonID) + ' return $elem/Fields(\'group_id\')');
		if (ArrayCount(xarrGroups) &gt; 0)
		{
			xarrGroups = XQuery('for $elem in person_object_links where MatchSome($elem/subject_id, (' +ArrayMerge(xarrGroups, 'This.group_id', ',')+ ')) return $elem/Fields(\'id\',\'object_catalog\')');

			if (ArrayCount(xarrGroups) &gt; 0)
				aContentItems = ArrayUnion(aContentItems, xarrGroups);
		}

		if (ArrayCount(aContentItems) &gt; 0)
		{
			aContentItems = ArrayExtract(ArraySelectDistinct(aContentItems, 'This.object_catalog.Value'), 'OpenDoc(UrlFromDocID(This.PrimaryKey)).TopElem')
			i++;
		}
		else
			aContentItems = new Array();



		if (tePerson != undefined && tePerson.Name == 'collaborator')
		{
			for (catContent in tools.xquery('for $elem in person_object_profiles where MatchSome($elem/id, (' + ArrayMerge(tePerson.person_object_profiles, 'This.PrimaryKey', ',') + ')) return $elem/id,$elem/__data'))
			{
				teContent = OpenDoc(UrlFromDocID(catContent.PrimaryKey)).TopElem;
				if (ArrayOptFirstElem(teContent.person_object_links))
				{
					aContentItems = ArrayUnion(aContentItems, teContent.person_object_links);
					i++;
				}
			};
		}
		if (i > 1)
			aContentItems = ArraySelectDistinct(aContentItems, 'This.object_catalog.Value');


		var elContent,fldObject, aRefinedContent = new Array();
		for (teContent in aContentItems)
		{
			elContent = new Object;
			elContent.catalog = teContent.object_catalog.Value;
			elContent.create = teContent.all_can_create.Value;
			elContent.edit = teContent.all_can_edit.Value;
			elContent.SetProperty('delete', teContent.all_can_delete.Value);
			i = 0;
			for (fldObject in teContent.objects)
			{
				if (i == 0)
					elContent.objects = new Array();

				elContent.objects.push(({'id': fldObject.object_id.Value, 'edit': fldObject.can_edit.Value, 'delete': fldObject.can_delete.Value}));
			}
			aRefinedContent.push(elContent);
		}
		/// VERSION 1 END /////
*/

		return aRefinedContent;
	"/>

	<update_content_access PROPERTY="1" PARAM="idOrTE_UserPARAM" PARAM="sCatalogPARAM" PARAM="idOrTE_ObjectID" PARAM="bCanEditPARAM" PARAM="bCanDeletePARAM" EXPR="
			var iPersonID = OptInt(idOrTE_UserPARAM);
			var tePerson = undefined;
			if (iPersonID == undefined)
			{
				iPersonID = idOrTE_UserPARAM.id.Value;
				tePerson = idOrTE_UserPARAM;
			}
			var teObject, iObjectID = OptInt(idOrTE_ObjectID);
			if (iObjectID != undefined)
				teObject = XQuery('for $elem in ' +sCatalogPARAM + 's where $elem/id = ' +iObjectID+ ' return $elem');
			else
			{
				teObject = idOrTE_ObjectID;
				iObjectID = teObject.id.Value;
				if (sCatalogPARAM == null || sCatalogPARAM == undefined)
					sCatalogPARAM = teObject.Name;
			}

			try {bCanEditPARAM = (bCanEditPARAM == true);} catch(_x_) {bCanEditPARAM = false}
			try {bCanDeletePARAM = (bCanDeletePARAM == true);} catch(_x_) {bCanDeletePARAM = false}

			var sContentTargets = ArrayMerge(XQuery('for $elem in group_collaborators where $elem/collaborator_id = ' + XQueryLiteral(iPersonID) + ' return $elem/Fields(\'group_id\')'), 'This.group_id.Value', ',');
			if (sContentTargets != '')
				sContentTargets += ',';
			sContentTargets += iPersonID;

			var catContentItem, xarrContentItems = tools.xquery('for $elem in person_object_links where MatchSome($elem/subject_id, (' + sContentTargets + ')) and $elem/object_catalog = ' +XQueryLiteral(sCatalogPARAM)+ ' return $elem/id,$elem/__data');

			var docCard, fldObject, bHasPersonal = false;

			var sObjectName = tools.get_object_name_field_value(teObject);

			for (catContentItem in xarrContentItems)
			{
				docCard = OpenDoc(UrlFromDocID(catContentItem.PrimaryKey));

				if (docCard.TopElem.subject_type == 'collaborator')
					bHasPersonal = true;

				fldObject = docCard.TopElem.objects.GetOptChildByKey(iObjectID);
				if (fldObject == undefined)
				{
					fldObject = docCard.TopElem.objects.ObtainChildByKey(iObjectID);
					fldObject.object_name = sObjectName;
					fldObject.can_edit = bCanEditPARAM;
					fldObject.can_delete = bCanDeletePARAM;
					docCard.Save();
				}
			}

			if (!bHasPersonal)
			{
				docCard = OpenNewDoc('x-local://wtv/wtv_person_object_link.xmd');
				docCard.BindToDb(DefaultDb);

				docCard.TopElem.subject_id = iPersonID;
				docCard.TopElem.subject_type = 'collaborator';
				docCard.TopElem.object_catalog = sCatalogPARAM;

				tools.set_default_content(docCard.TopElem, tePerson);

				fldObject = docCard.TopElem.objects.ObtainChildByKey(iObjectID);
				fldObject.object_name = sObjectName;
				fldObject.can_edit = bCanDeletePARAM;
				fldObject.can_delete = bCanDeletePARAM;

				docCard.Save();
			}


	"/>
	<set_default_content PROPERTY="1" PARAM="teContentPARAM" PARAM="teSubjectPARAM" EXPR="
		var iSubjectID = teContentPARAM.person_id.HasValue ? teContentPARAM.person_id.Value : teContentPARAM.subject_id.Value;
		var sCatalog = teContentPARAM.object_catalog.Value;
		if (iSubjectID != null && sCatalog != '')
		{
			var catContent, teContent, fldObject, contentObject;
			try
			{
				teSubjectPARAM.Name;
			}
			catch(_x_)
			{
				teSubjectPARAM = OpenDoc(UrlFromDocID(iSubjectID)).TopElem;
			}

			if (teSubjectPARAM.ChildExists('person_object_profiles'))
			{
				for (catContent in tools.xquery('for $elem in person_object_profiles where MatchSome($elem/id, (' + ArrayMerge(teSubjectPARAM.person_object_profiles, 'This.PrimaryKey', ',') + ')) return $elem/id,$elem/__data'))
				{
					teContent = OpenDoc(UrlFromDocID(catContent.PrimaryKey)).TopElem.person_object_links.GetOptChildByKey(sCatalog);
					if (teContent != undefined)
					{
						if (teContent.all_can_create.Value) teContentPARAM.all_can_create = true;
						if (teContent.all_can_edit.Value) teContentPARAM.all_can_edit = true;
						if (teContent.all_can_delete.Value) teContentPARAM.all_can_delete = true;

						for (fldObject in teContent.objects)
						{
							contentObject = teContentPARAM.objects.ObtainChildByKey(fldObject.PrimaryKey);
							if (contentObject.object_name == '')
								contentObject.AssignElem(fldObject);
							else
							{
								if (fldObject.can_edit.Value) contentObject.can_edit = true;
								if (fldObject.can_delete.Value) contentObject.can_delete = true;
							}
						}
					}
				};
			}
		}
	"/>



	<upgrade_locked TYPE="bool" NOT-NULL="1" DEFAULT="false"/>
	<in_place_upgrade TYPE="bool" DEFAULT="false"/>

	<set_upgrade_locked PROPERTY="1" PARAM="bParam" EXPR="
			oProvider = tools.spxml_unibridge.Object.provider;
			oProvider.SetProviderConfigValue( 'UpgradeLocked', ( bParam ? 'True' : 'False' ), false );

			upgrate_locked = bParam;
	"/>

	<os_type TYPE="string" EXPR-INIT="
			if ( LdsIsServer || System.IsWebClient )
			{
				var datexAssembly = tools.get_object_assembly( 'DatexCore' );
				var OSPlatform = datexAssembly.CallClassStaticMethod( 'Datex.Core.StaticPrime', 'GetOSPlatformRunning' );
				if ( OSPlatform == 1 )
				{
					return 'linux';
				}
			}
			return 'windows';
	"/>
	<dotnet_host TYPE="variant" EXPR-INIT="
			try
			{
				var oDotnetHost = new DotNetCoreHost();
			}
			catch ( err )
			{
				return null;
			}
			return oDotnetHost;
	"/>
	<object_assembly TYPE="variant" EXPR-INIT="({})"/>
	<get_object_assembly PROPERTY="1" PARAM="sLibNameParam" EXPR="
			var arrAssemblyObjects = [
				{ 'name': 'Zip', 'dotnet_lib': 'Websoft.Zip.dll', 'dotnet_object': 'Websoft.Zip.Zip' },
				{ 'name': 'Image', 'dotnet_lib': 'Websoft.Imaging.dll', 'dotnet_object': 'Websoft.Imaging.Image' },
				{ 'name': 'ImageUtils', 'dotnet_lib': 'Websoft.Imaging.dll', 'dotnet_object': 'Websoft.Imaging.ImageUtils' },
				{ 'name': 'PdfGenerator', 'dotnet_lib': 'Websoft.Office.Pdf.dll', 'dotnet_object': 'Websoft.Office.Pdf.Generator' },
				{ 'name': 'Pdf', 'dotnet_lib': 'Websoft.Office.Pdf.dll', 'dotnet_object': 'Websoft.Office.Pdf.Document' },
				{ 'name': 'Powerpoint', 'dotnet_lib': 'Websoft.Office.Powerpoint.dll', 'dotnet_object': 'Websoft.Office.Powerpoint.Presentation' },
				{ 'name': 'Excel', 'dotnet_lib': 'Websoft.Office.Excel.dll', 'dotnet_object': 'Websoft.Office.Excel.Document' },
				{ 'name': 'Word', 'dotnet_lib': 'Websoft.Office.Word.dll', 'dotnet_object': 'Websoft.Office.Word.Document' },
				{ 'name': 'Crypto', 'dotnet_lib': 'Websoft.Utils.dll', 'dotnet_object': 'Websoft.Utils.Crypto' },
				{ 'name': 'CryptoStore', 'dotnet_lib': 'Websoft.CryptoStore.dll', 'dotnet_object': null },
				{ 'name': 'CryptoPro', 'dotnet_lib': 'Websoft.CryptoPro.dll', 'dotnet_object': null },
				{ 'name': 'FileUtils', 'dotnet_lib': 'Websoft.Utils.dll', 'dotnet_object': 'Websoft.Utils.FileUtils' },
				{ 'name': 'WebUtils', 'dotnet_lib': 'Websoft.Utils.dll', 'dotnet_object': 'Websoft.Utils.WebUtils' },
				{ 'name': 'RegExp', 'dotnet_lib': 'WebSoft.RegExp.dll', 'dotnet_object': 'Websoft.RegExp.RegExp' },
		    { 'name': 'DatexCore', 'dotnet_lib': 'Datex.Core.dll', 'dotnet_object': null },
				{ 'name': 'UniBridgeSettings', 'dotnet_lib': 'Websoft.com_spxml_unibridge_core.dll', 'dotnet_object': 'wft.spxml.unibridge.UniBridgeSettings' },
				{ 'name': 'HttpRequest', 'dotnet_lib': 'Websoft.HttpRequest.dll', 'dotnet_object': 'Websoft.HttpRequest.HttpRequest' },
				{ 'name': 'Authorization', 'dotnet_lib': 'Websoft.Authorization.dll', 'dotnet_object': 'Websoft.Authorization.Authorization' },
				{ 'name': 'XHTTPMiddleware', 'dotnet_lib': 'Datex.XHTTP.dll', 'dotnet_object': 'Datex.XHTTP.Middleware' },
				{ 'name': 'XHTTPMiddlewareStatic', 'dotnet_lib': 'Datex.XHTTP.dll', 'dotnet_object': null },
				{ 'name': 'FaceRecognition', 'dotnet_lib': 'Websoft.OpenCV.dll', 'dotnet_object': 'Websoft.OpenCV.FaceRecognition' },
				{ 'name': 'PKeyGenerator', 'dotnet_lib': 'Websoft.PKeyGenerator.dll', 'dotnet_object': 'Websoft.PKeyGenerator.PKeyGenerator' },
				{ 'name': 'Code', 'dotnet_lib': 'Websoft.Code.dll', 'dotnet_object': null },
				{ 'name': 'RecordingClient', 'dotnet_lib': 'Websoft.Recording.Client.dll', 'dotnet_object': 'Websoft.Recording.Client' },
				{ 'name': 'MediaPostStreamHandler', 'dotnet_lib': 'Websoft.MediaHandler.dll', 'dotnet_object': 'Websoft.MediaHandler.MediaPostStreamHandler' },
				{ 'name': 'VideoNeuralHandler', 'dotnet_lib': 'Websoft.VideoNeuralHandler.dll', 'dotnet_object': 'Websoft.VideoNeuralHandler.VideoNeuralHandler' },
				{ 'name': 'NeuralHandlerAssembly', 'dotnet_lib': 'Websoft.NeuralHandler.dll', 'dotnet_object': null },
				{ 'name': 'VFSStatic', 'dotnet_lib': 'Datex.VFS.dll', 'dotnet_object': null }
			];
			var psTools = Child(0).Parent;

			if ( ! psTools.object_assembly.Object.HasProperty( sLibNameParam ) )
			{
				EvalCs( '
					try
					{
						var oAssemblyObject = ArrayOptFindByKey( arrAssemblyObjects, sLibNameParam, \'name\' );
						var oTempAssembly = psTools.object_assembly.Object;
						var oAssembly = psTools.dotnet_host.Object.GetAssembly( oAssemblyObject.dotnet_lib );
						if ( oAssemblyObject.dotnet_object != null )
						{
							var oLib = oAssembly.CreateClassObject( oAssemblyObject.dotnet_object );
						}
						else
						{
							var oLib = oAssembly;
						}
						oTempAssembly.SetProperty( oAssemblyObject.name, oLib );
						psTools.object_assembly = oTempAssembly;
					}
					catch ( err )
					{
						alert( err );
						throw err;
					}
				' );
			}

			return psTools.object_assembly.Object.GetProperty( sLibNameParam );
	"/>


	<create_committee_member PROPERTY="1" PARAM="iObjectIDParam" PARAM="teObjectParam" PARAM="iPersonnelCommitteeIDParam" PARAM="strCommitteeMemberTypeParam" EXPR="

			var docPersonnelCommitteeParticipant=null
			var strCommitteeMemberType=null
			try
			{
				try
				{
					if ( teObjectParam == null || teObjectParam == '' || teObjectParam == undefined )
						throw 'no_doc';

					teObject = teObjectParam;
					iObjectID=teObject.Doc.DocID
				}
				catch ( err )
				{
					iObjectID=OptInt(iObjectIDParam,null)
					teObject = OpenDoc( UrlFromDocID( iObjectID ) ).TopElem;
				}

				try
				{
					if ( strCommitteeMemberTypeParam != null  && strCommitteeMemberTypeParam != undefined && strCommitteeMemberTypeParam != '')
					{
						strCommitteeMemberType=String(strCommitteeMemberTypeParam)
					}
				}
				catch ( err )
				{
				}

				iPersonnelCommitteeID=OptInt(iPersonnelCommitteeIDParam,null)

				if (iPersonnelCommitteeID!=null&&iObjectID!=null)
				{
					if (ArrayOptFirstElem(XQuery( 'for $elem in committee_members where $elem/personnel_committee_id = ' + iPersonnelCommitteeID + ' and $elem/object_id = ' +iObjectID + ' return $elem' ))==undefined)
					{
						docPersonnelCommitteeParticipant = OpenNewDoc( 'x-local://wtv/wtv_committee_member.xmd' );
						docPersonnelCommitteeParticipant.TopElem.personnel_committee_id = iPersonnelCommitteeID;
						docPersonnelCommitteeParticipant.TopElem.object_id = iObjectID;
						strPersonnelCommitteeParticipantStatus=docPersonnelCommitteeParticipant.TopElem.status.Value

						docPersonnelCommitteeParticipant.TopElem.catalog=teObject.Name;
						if (docPersonnelCommitteeParticipant.TopElem.object_id.HasValue&&docPersonnelCommitteeParticipant.TopElem.catalog.HasValue)
						{
							sDispName=common.exchange_object_types.GetChildByKey( docPersonnelCommitteeParticipant.TopElem.catalog ).disp_name
							docPersonnelCommitteeParticipant.TopElem.object_name = tools.get_foreign_field( docPersonnelCommitteeParticipant.TopElem.object_id, sDispName, global_settings.object_deleted_str );
						}

						docPersonnelCommitteeParticipant.TopElem.AssignElem( teObject );
						if (strCommitteeMemberType!=null)
						{
							fldCommitteeMemberType=common.committee_member_types.GetOptChildByKey( strCommitteeMemberType)

							if (fldCommitteeMemberType!=undefined)
							{
								docPersonnelCommitteeParticipant.TopElem.committee_member_type=fldCommitteeMemberType.PrimaryKey.Value
							}
						}
						docPersonnelCommitteeParticipant.TopElem.status=strPersonnelCommitteeParticipantStatus
						docPersonnelCommitteeParticipant.BindToDb( DefaultDb );
						docPersonnelCommitteeParticipant.Save();

						ms_tools.raise_system_event_env( 'common_personnel_committee_add_participant', {
						'curUser': tools.get_cur_user(),
						'curUserID': tools.cur_user_id,
						'iObjectId': iObjectID,
						'docPersonnelCommitteeParticipant': docPersonnelCommitteeParticipant,
						'iPersonnelCommitteeId': iPersonnelCommitteeID
						} );
					}
				}
			}
			catch(ex)
			{
				alert('create_committee_member error: '+ex);
			}
			return docPersonnelCommitteeParticipant;
	"/>



	<activate_poll_to_person PROPERTY="1" PARAM="oPersonID" PARAM="oPollID" PARAM="iPollProcedureID" PARAM="iEducationPlanID" EXPR="

			try{
				iEducationPlanID = OptInt( iEducationPlanID, null );
			}
			catch( ex )
			{
				iEducationPlanID = null;
			}
			docPollResult = OpenNewDoc( 'x-local://wtv/wtv_poll_result.xmd' );

			iPollID = OptInt( oPollID );
			tePoll = null;
			if ( iPollID == undefined )
			{
				tePoll = oPollID;
				iPollID = tePoll.id.Value;
			}
			docPollResult.TopElem.poll_id = iPollID;

			if ( oPersonID != null )
			{
				if ( tePoll == null )
					tePoll = OpenDoc( UrlFromDocID( iPollID ) ).TopElem;

				if ( ! tePoll.is_anonymous )
				{
					iPersonID = OptInt( oPersonID );
					if ( iPersonID == undefined )
					{
						tePerson = oPersonID;
						iPersonID = tePerson.id.Value;
					}
					else
					{
						tePerson = OpenDoc( UrlFromDocID( iPersonID ) ).TopElem;
					}

					docPollResult.TopElem.person_id = iPersonID;
					tools.common_filling( 'collaborator', docPollResult.TopElem, iPersonID, tePerson );
				}
				docPollResult.TopElem.use_proctoring = tePoll.use_proctoring;
			}

			try
			{
				if ( iPollProcedureID == undefined || iPollProcedureID == '' )
					throw 'no_data';
			}
			catch ( err )
			{
				iPollProcedureID = null;
			}
			docPollResult.TopElem.poll_procedure_id = iPollProcedureID;
			docPollResult.TopElem.education_plan_id = iEducationPlanID;


			docPollResult.BindToDb( DefaultDb );
			docPollResult.Save();

			ms_tools.raise_system_event( 'common_create_poll_result', null, docPollResult.DocID, docPollResult );

			return docPollResult;
	"/>


	<delete_poll_result PROPERTY="1" PARAM="oPollResultParam" PARAM="tePollParam" EXPR="
			iPollResultID = OptInt( oPollResultParam );
			if ( iPollResultID == undefined )
			{
				tePollResult = oPollResultParam;
				iPollResultID = tePollResult.id.Value;
			}
			else
			{
				tePollResult = OpenDoc( UrlFromDocID( iPollResultID ) ).TopElem;
			}
			try
			{
				if ( tePollParam == null || iPollProcedureID == undefined )
					throw 'no_data';
			}
			catch ( err )
			{
				tePollParam = OpenDoc( UrlFromDocID( tePollResult.poll_id ) ).TopElem;
			}

			for ( fldQuestionElem in tePollParam.questions )
			{
				if ( fldQuestionElem.type == 'file' )
				{
					fldResultQuestion = tePollResult.questions.GetOptChildByKey( fldQuestionElem.PrimaryKey );
					if ( fldResultQuestion == undefined )
						continue;

					for ( sIDElem in fldResultQuestion.value.Value.split( ';' ) )
					{
						iResourceID = OptInt( sIDElem );
						if ( iResourceID == undefined )
							continue;
						try
						{
							DeleteDoc( UrlFromDocID( iPollResultID ) );
						}
						catch ( err )
						{
						}
					}
				}
			}

			DeleteDoc( UrlFromDocID( iPollResultID ) );
			return true;
	"/>


	<array_opt_find_by_key PROPERTY="1" PARAM="arrParam" PARAM="sKeyParam" PARAM="oValueParam" EXPR="
			var oFoundValue;
			var bThis = sKeyParam == 'This';
			if ( bThis )
			{
				arrParam = ArrayExtract( arrParam, '{\'v\':This}' );
				sKeyParam = 'v';
			}

			arrParam = ArraySort( arrParam, 'This.' + sKeyParam, '+' );
			oFoundValue = ArrayOptFindBySortedKey( arrParam, oValueParam, sKeyParam );
			if ( oFoundValue == undefined )
				return undefined;
			else
				return bThis ? oFoundValue.v : oFoundValue;
	"/>

	<crypto_obj TYPE="variant"/>
	<crypto_obj_init PROPERTY="1" EXPR="
			if ( tools.crypto_obj.HasValue &amp;&amp; crypto_obj.Object != null )
				return crypto_obj.Object;

			try
			{
				oLib = tools.get_object_assembly('Crypto');
				tools.crypto_obj = oLib;
				return oLib;
			}
			catch ( err )
			{
				return null;
			}
	"/>


	<get_default_proctoring_system_id PROPERTY="1" EXPR="
			return 6729767194009546182;
	"/>


	<data_type PROPERTY="1" PARAM="v" PARAM="detailed" wsDesc="{'author':'serg','level':0,'desc':'get data type','private':false}" EXPR="

		/************
			not detailed:
				xmlobject
				array
				object
				integer
				real
				bool
				null
				undefined
				string
		************/

		try
		{
			detailed = detailed == true;
		}
		catch(_x_)
		{
			detailed = false;
		}

		var result, _d = DataType(v);

		if (_d == 'object')
		{
			_d = ObjectType(v);
			switch(_d)
			{
				case 'XmElem':
					result = 'xmlobject';
					if (detailed)
					{
						try
						{
							v.Name;

							try
							{
								v.Form;
								result += ':form';
							}
							catch(_o_)
							{
								result += ':';
							}

							if (v.IsTopElem)
								result += 'topnode';
							else if (v.IsMultiple)
								result += 'multinode';
							else
								result += 'node';
						}
						catch(_x_)
						{
							try
							{
								v.TopElem.Form;
								result += ':formdocument';
							}
							catch(_o_)
							{
								result += ':document';
							}

						}

					}
					break;
				case 'JsArray':
					result = 'array';
					if (detailed)
						result += ':object';
					break;
				case 'JsObject':
					result = 'object';
					if (detailed)
						result += ':object';
					break;
				case 'BmObject':
					result = 'string';
					if (detailed)
						result += ':object';
					break;
				default:
					result = 'unknown';
					if (detailed)
						result += ':object';
					break;

			}
		}
		else
		{
			result = _d;
			if (detailed)
				result += ':primitive';
		}

		return result;

	"/>


	<get_list_lngs PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'get_list_lngs', [] );

			teForm = OpenNewDoc( 'x-local://wtv/wtv_form_list_lngs.xmd' ).TopElem;
			teForm.AssignElem( lngs );
			return teForm;
	"/>


	<check_periodity PROPERTY="1" PARAM="fldPeriodityParam" PARAM="_cur_date" PARAM="iSleepSecParam" EXPR="
			if ( fldPeriodityParam.trigger_type == 'never' )
				return false;
			if ( fldPeriodityParam.trigger_type != 'yearly' )
			{
				if ( _cur_date &lt; fldPeriodityParam.start_date )
					return false;
				if ( fldPeriodityParam.finish_date.HasValue &amp;&amp; _cur_date &gt; fldPeriodityParam.finish_date )
					return false;
			}

			if ( fldPeriodityParam.trigger_type == 'period' )
			{
				iCurHour = Hour( _cur_date );
				iCurMinute = Minute( _cur_date );
				if ( fldPeriodityParam.all_day == false )
				{
					try
					{
						_time_array = String( fldPeriodityParam.start_time ).split( ':' );
						_hour = Int( _time_array[0] );
						if ( iCurHour &lt; _hour )
						{
							return false;
						}
						else if ( _hour == iCurHour )
						{
							if ( iCurMinute &lt; Int( _time_array[1] ) )
									return false;
						}
					}
					catch ( err )
					{
					}
					try
					{
						_time_array = String( fldPeriodityParam.finish_time ).split( ':' );
						_hour = Int( _time_array[0] );
						if ( iCurHour &gt; _hour )
						{
							return false;
						}
						else if ( _hour == iCurHour )
						{
							if ( iCurMinute &gt; Int( _time_array[1] ) )
								return false;
						}
					}
					catch ( err )
					{
					}
				}

				if ( fldPeriodityParam.last_run_date.HasValue &amp;&amp; DateDiff( DateOffset( fldPeriodityParam.last_run_date, ( fldPeriodityParam.period * 60 ) - iSleepSecParam ), _cur_date ) &gt; 0 )
						return false;
			}
			else
			{
				if ( fldPeriodityParam.last_run_date.HasValue &amp;&amp; DateNewTime( fldPeriodityParam.last_run_date ) == DateNewTime( _cur_date ) )
					return false;

				switch ( fldPeriodityParam.trigger_type )
				{
					case 'weekly':
						if ( WeekDay( _cur_date ) != fldPeriodityParam.start_week_day )
							return false;
						break;

					case 'monthly':
						if ( Day( _cur_date ) != fldPeriodityParam.start_day )
							return false;
						break;

					case 'quarterly':
						if ( Day( _cur_date ) != fldPeriodityParam.start_day || ( ( Month( _cur_date ) - 1 ) % 3 ) != 0 )
							return false;
						break;

					case 'yearly':
						if ( Day( _cur_date ) != Day( fldPeriodityParam.start_date ) || Month( _cur_date ) != Month( fldPeriodityParam.start_date ) )
							return false;
						break;
				}

				try
				{
					_time_array = String( fldPeriodityParam.start_time ).split( ':' );
					_hour = Int( _time_array[0] );
					if ( Hour( _cur_date ) &lt; _hour )
					{
						return false;
					}
					_minute = ArrayCount( _time_array ) &gt; 1 ? OptInt( _time_array[1], 0 ) : 0;
					if ( Minute( _cur_date ) &lt; _minute )
					{
						return false;
					}

					if ( global_settings.settings.server_agent_time_start )
					{
						if ( _cur_date &gt; DateOffset( DateNewTime( _cur_date, _hour, _minute ), 600 ) )
							return false;
					}
				}
				catch ( err )
				{
					return false;
				}
			}
			return true;
	"/>



	<upload_begin PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sUrlParam" PARAM="iLenghtParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'upload_begin', [ RValue( sUrlParam ), RValue( iLenghtParam ) ] );

			var sTempUrl = '';
			if ( StrContains( sUrlParam, '/wt_data/' ) || StrContains( sUrlParam, '/trash/' ) )
			{
				sTempUrl = ObtainTempFile( UrlPathSuffix( sUrlParam ) );
				PutUrlData( sTempUrl, '' );
			}
			else
			{
				PutUrlData( sUrlParam, '' );
			}
			var sID = 'upload_file_' + tools.random_string( 10 );
			tools_web.set_user_data( sID, ({ 'url': sUrlParam, 'lenght': iLenghtParam, 'temp_url': sTempUrl }), 600 );
			return sID;
	"/>
	<upload_range PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sIDParam" PARAM="iStartIndexParam" PARAM="iFinishIndexParam" PARAM="sDataParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'upload_range', [ RValue( sIDParam ), RValue( iStartIndexParam ), RValue( iFinishIndexParam ), Base64Encode( sDataParam ) ] );

			oData = tools_web.get_user_data( sIDParam );
			if ( oData == null )
				throw 'Upload session is lost.';

			var sUploadUrl = oData.temp_url == '' ? oData.url : oData.temp_url;
			sDataParam = Base64Decode( sDataParam );
			PutFileDataRange( UrlToFilePath( sUploadUrl ), iStartIndexParam, iFinishIndexParam, sDataParam );
			return true;
	"/>
	<upload_end PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sIDParam" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools', 'upload_end', [ RValue( sIDParam ) ] );

			oData = tools_web.get_user_data( sIDParam );
			if ( oData == null )
				throw 'Upload session is lost.';

			if ( oData.temp_url != '' )
			{
				CopyUrl( oData.url, oData.temp_url );
				try
				{
					DeleteUrl( oData.temp_url );
				}
				catch ( err )
				{
					alert( err );
				}
				tools_web.remove_user_data( sIDParam );
			}
			return true;
	"/>

	<get_oapi_schemas ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" EXPR="
			var aProfiles = ArrayExtract(tools.read_directory_server('x-local://wtv/oapi/profiles'), 'StrRangePos(This, This.lastIndexOf(\'/\') + 1, This.lastIndexOf(\'.\'))');

			var sAddUrl = tools.get_xhttp_ini('OAPI-SCHEMAS-DIR-PATH');
			if (sAddUrl != undefined)
			{
				sAddUrl = FilePathToUrl(sAddUrl);
				if (IsDirectory(sAddUrl))
				{
					aProfiles = ArraySelectDistinct(ArrayUnion(aProfiles, ArrayExtract(ArraySelect(ReadDirectory(sAddUrl), 'UrlPathSuffix(This) == \'.xml\''), 'StrRangePos(This, This.lastIndexOf(\'/\') + 1, This.lastIndexOf(\'.\'))')), 'This');
				}
			}
			return aProfiles;
	"/>

	<dotnet_xhttp_middleware TYPE="variant" EXPR-INIT="
			var oDotnetXHTTPMiddlewareObject = null;
			var psTools = Child(0).Parent;
			if ( psTools.dotnet_host.HasValue &amp;&amp; psTools.dotnet_host != null &amp;&amp; psTools.dotnet_host.Object != null &amp;&amp; AppConfig.GetProperty( 'DOTNETCORE-XHTTP' ) == '1' )
			{
				try
				{
					oDotnetXHTTPMiddlewareObject = psTools.get_object_assembly( 'XHTTPMiddleware' );

					contentroot = AppDirectoryPath()+'/'+AppConfig.GetProperty( 'WEB-DIR' );
					debug_mode = AppConfig.GetOptProperty( 'DOTNETCORE-XHTTP-DEBUG' )=='1';

					//urls = [];
					//urls.push('http://*:'+AppConfig.GetProperty( 'PORT' ));
					//var kestrel_options = oDotnetXHTTPMiddlewareObject.KestrelServerOptions;
					//kestrel_options.Limits.MaxRequestBufferSize = 1048578;
					//var ok = oDotnetXHTTPMiddlewareObject.Init(AppDirectoryPath(),contentroot,urls,debug_mode,kestrel_options);

					//json_conf_filename = 'file:///'+AppDirectoryPath()+'/xhttp_config.json';
                                        //json_conf = LoadUrlText(json_conf_filename);
					//json_conf = StrReplace( json_conf, '[PORT]', AppConfig.GetProperty( 'PORT' ) );

					var ok = oDotnetXHTTPMiddlewareObject.Init(AppDirectoryPath(),contentroot,null,debug_mode);

					if (!ok)
					{
						throw 'Unable to init XHTTP Middleware Object, inspect log for details.';
					}

					SetGlobalXHTTPMiddlewareObject(oDotnetXHTTPMiddlewareObject);

				}
				catch(e)
				{
					alert(e);
					throw e;
				}
			}
			return oDotnetXHTTPMiddlewareObject;
	"/>



	<is_simple_array_field PROPERTY="1" PARAM="fldParam" EXPR="
		var fldFormField = fldParam.FormElem;
		return ( ArrayCount( fldFormField ) == 1 &amp;&amp; ArrayFirstElem( fldFormField ).IsMultiple );
	"/>


	<restore_doc PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="iObjectIDParam" EXPR="
			return MoveDoc( UrlFromDocID( iObjectIDParam, 'trash' ), UrlFromDocID( iObjectIDParam, DefaultDb ) );
	"/>

	<ValidateName PROPERTY="1" PARAM="str" PARAM="is_var" EXPR="

		is_var = is_var == true;
		var c, i = 0;
		for (c in StrToCharCodesArray(str))
		{
			if ((c &gt; 90 &amp;&amp; c &lt; 97 &amp;&amp; c != 95) || c &gt; 122 ||  (c &gt; 57 &amp;&amp; c &lt; 65) || is_var &amp;&amp; i==0 &amp;&amp; c &lt;= 57 || c &lt; 48)
			{
				return false;
			}
			i++;
		}

		return i > 0;
	"/>

	<check_event_fields PROPERTY="1" PARAM="iEventID" PARAM="docEvent" PARAM="teEvent" EXPR="

		/*
			проверка данных мероприятия
			iEventID - ID мероприятия
			docEvent - документ мероприятия
		*/
		oRes = new Object();
		oRes.error = 0;
		oRes.message = '';
		try
		{
			iEventID = Int( iEventID );
		}
		catch( ex )
		{
			oRes.error = 2;
			return oRes;
		}
		try
		{
			docEvent.TopElem;
		}
		catch( ex )
		{
			oRes.error = 2;
			return oRes;
		}
		try
		{
			teEvent.Name;
		}
		catch( ex )
		{
			oRes.error = 2;
			return oRes;
		}
		oSkipCheckFields = CallServerMethod( 'tools_web', 'get_user_data', [ RValue( 'skip_check_fields_' + iEventID ) ] );
		if( oSkipCheckFields != null && tools_web.is_true( CallServerMethod( 'tools', 'read_object', [ oSkipCheckFields ] ).GetOptProperty( 'checked', false ) ) )
			return oRes;

		var feEventType = teEvent.event_type_id.OptForeignElem;
		if( ( feEventType != undefined &amp;&amp; feEventType.online ) &amp;&amp; teEvent.webinar_system_id.HasValue &amp;&amp; teEvent.webinar_system_id.OptForeignElem != undefined)
			try
			{
				oRes = tools.call_webinar_system_method( teEvent.webinar_system_id, 'CheckFields', { iEventId: iEventID, docEvent: docEvent, teEvent: teEvent } );
				if( oRes.GetOptProperty( 'teEvent' ) != undefined )
					teEvent.AssignElem( oRes.GetOptProperty( 'teEvent' ) );
			}
			catch( ex ){
				tools.alert_server(ex)
			}
		CallServerMethod( 'tools_web', 'set_user_data', [ RValue( 'skip_check_fields_' + iEventID ), '{ checked: true }', 10 ] )
		if( oRes.GetOptProperty( 'error' ) == undefined )
			oRes.SetProperty( 'error', 0 )
		if( oRes.GetOptProperty( 'message' ) == undefined )
			oRes.SetProperty( 'message', '' )
		return oRes;
	"/>

	<get_code_library PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oLibraryParam" EXPR="
			var teCodeLibrary = undefined;
			try
			{
				oLibraryParam.Name;
				teCodeLibrary = oLibraryParam
			}
			catch( ex )
			{
				teCodeLibrary = tools.get_cache_code_librarys( oLibraryParam );
			}
			return teCodeLibrary;
	"/>

	<call_code_library_method PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oLibraryParam" PARAM="sMethodNameParam" PARAM="arrParams" EXPR="
			var teCodeLibrary = undefined;
			try
			{
				oLibraryParam.Name;
				teCodeLibrary = oLibraryParam
			}
			catch( ex )
			{
				teCodeLibrary = tools.get_cache_code_librarys( oLibraryParam );
			}


			if ( teCodeLibrary.exec_code.code_type == 'cs' ) //С#
			{
				var wait = true;
				var single = true;
				var max_run_time = 0;

				var oAssembly = tools.get_object_assembly( 'DatexCore' );
				var sCodeText = teCodeLibrary.exec_code.code_url.HasValue ? LoadUrlText( teCodeLibrary.exec_code.code_url ) : teCodeLibrary.exec_code.code_text.Value;
				var oParseResult = oAssembly.CallClassStaticMethod( 'Datex.Core.CSharp', 'ParseFunction', [ sMethodNameParam, teCodeLibrary.id.Value, teCodeLibrary.code.Value, teCodeLibrary.Name, sCodeText ] );
				if ( oParseResult.Success )
				{
					var oAssemblyResult = tools.dotnet_host.Object.GetAssembly( oParseResult.AssemblyName );
					return oAssemblyResult.CallClassStaticMethod( oParseResult.EntryPointMemberFullName, '', arrParams, single, wait, max_run_time );
				}
				else
				{
					throw 'CodeLibrary ' + teCodeLibrary.code + ' parse error.';
				}
			}
			else
			{
				/*
				if ( global_settings.debug )
				{
					DropFormsCache( '*' + teCodeLibrary.exec_code.code_url + '*' );
				}
				*/
				var oLib = OpenCodeLib( teCodeLibrary.exec_code.code_url );
				return CallObjectMethod( oLib, sMethodNameParam, arrParams );
			}
	"/>

	<get_params_code_library PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oLibraryParam" EXPR="
			var teCodeLibrary = undefined;
			try
			{
				oLibraryParam.Name;
				teCodeLibrary = oLibraryParam
			}
			catch( ex )
			{
				teCodeLibrary = tools.get_cache_code_librarys( oLibraryParam );
			}
			return tools.wvars_to_object( teCodeLibrary.wvars );
	"/>

	<get_code_library_error_message PROPERTY="1" PARAM="oLibResParam" PARAM="oEnvParam" EXPR="
			var sLibResError = '';
			var iLibResError = 0;
			if ( ObjectType( oLibResParam ) == 'JsObject' )
			{
				sLibResError = Trim( oLibResParam.errorText );
				iLibResError = oLibResParam.error;
			}
			else
			{
				sLibResError = Trim( oLibResParam );
				iLibResError = sLibResError == '' ? 0 : 1;
				oLibResParam = new Object;
			}
			var sParamName = oLibResParam.GetOptProperty( 'param_name', '' );

			switch ( iLibResError )
			{
				case 0:
				{
					sLibResError = '';
					break;
				}

				case 501:
				{
					sLibResError = 'Недопустимый параметр' + ( sParamName == '' ? '' : ': ' + sParamName ) + '.';
					break;
				}

				case 502:
				{
					sLibResError = 'Неверное окружение' + ( sParamName == '' ? '' : ': ' + sParamName ) + '.';
					break;
				}
			}
			return sLibResError;
	"/>

	<parse_throw_error PROPERTY="1" PARAM="sErrorStr" PARAM="oError" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		sErrorStr = Trim(sErrorStr);

		try
		{
			if(oError == undefined || oError == null || ObjectType(oError) != 'JsObject')
			{
				oError = tools.get_code_library_result_object();
			}
		}
		catch(e)
		{
			oError = tools.get_code_library_result_object();
		}

		if(StrContains(sErrorStr, '::'))
		{
			var aError = RValue(sErrorStr).split('::');
			oError.error = OptInt(aError[0], 501);
			oError.errorText = aError[1];
		}
		else
		{
			oError.error = 1;
			oError.errorText = sErrorStr;
		}

		return oError;
	"/>

	<get_code_library_result_object PROPERTY="1" PARAM="oLibResParam" PARAM="oEnvParam" EXPR="
			return {
				error: 0,
				errorText: '',
				data: ({}),
				paging: ({})
			};
	"/>




	<amgr_get_agent_list_json PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" EXPR="
			if ( ! LdsIsServer )
			{
				return CallServerMethod( 'tools', 'amgr_get_agent_list_json' );
			}

			try
			{
				var ag_running_id = null;
				if ( LdsIsServer ) //&amp;&amp; (tools.sys_db_capability & tools.UNI_CAP_BASIC) != 0
				{
					ag_infos_json = '[';
					idx=0;
					var ag_running_ids = tools.spxml_unibridge.Object.provider.PeekMessagesFromQueue('ag_running');
					if ( ag_running_ids != undefined )
					{
						for(ag_running_id in ag_running_ids)
						{
							try
							{
								ag_info_json = tools.spxml_unibridge.Object.provider.GetUserData('ag_info_'+ag_running_id);
								if ( ag_info_json == undefined )
								{
									//alert( 'Error getting agent {' + ag_running_id + '} info: GetUserData is undefined' );
									continue;
								}
								if (idx>0)
								{
									ag_infos_json += ','+ag_info_json;
								}
								else
								{
									ag_infos_json += ag_info_json;
								}
								idx++;
							}
							catch(e)
							{
								alert('Error getting agent {'+ag_running_id+'} info: '+e);
							}
						}
					}

					var ag_finished_list_json = tools.spxml_unibridge.Object.provider.PeekMessagesFromQueue('ag_finished');
					if ( ag_finished_list_json != undefined )
					{
						for(ag_finished_json in ag_finished_list_json)
						{
							if (idx>0)
							{
								ag_infos_json += ','+ag_finished_json;
							}
							else
							{
								ag_infos_json += ag_finished_json;
							}
							idx++;
						}
					}

					ag_infos_json += ']';
					return ag_infos_json;
				}
			}
			catch(e)
			{
				alert('Error getting agent {'+ag_running_id+'} info: '+e);
				throw e;
			}
			return null;
	"/>

	<amgr_cancel_agent PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="roleUID"  PARAM="threadID" EXPR="
			if ( ! LdsIsServer )
			{
				return CallServerMethod( 'tools', 'amgr_cancel_agent', [ RValue( roleUID ), RValue( threadID ) ] );
			}

			tools.spxml_unibridge.Object.provider.PutMessageInQueue( 'ag_cancel_' + roleUID , threadID );
			return true;
	"/>

	<amgr_kill_role PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="nodeId"  PARAM="roleUID" EXPR="
			if ( ! LdsIsServer )
			{
				return CallServerMethod( 'tools', 'amgr_kill_role', [ RValue( nodeId ), RValue( roleUID ) ] );
			}

			tools.spxml_unibridge.Object.provider.PutMessageInQueue( 'inv_node_' + nodeId, '{nodeId:' + CodeLiteral( nodeId ) + ',roleUID:' + CodeLiteral( roleUID ) + ',command:&quot;Kill&quot;}' );
			return true;
	"/>


	<get_doc_desc PROPERTY="1" PARAM="teObjectParam" EXPR="
			var fldObjectType = common.exchange_object_types.GetOptChildByKey( teObjectParam.Name );
			var sDesc = fldObjectType.title + ': ';
			switch ( teObjectParam.Name )
			{
				case 'course':
				{
					sDesc += teObjectParam.code + ' ' + teObjectParam.name;
					break;
				}

				case 'assessment':
				{
					sDesc += teObjectParam.code + ' ' + teObjectParam.title;
					break;
				}

				default:
				{
					sDesc += GetObjectProperty( teObjectParam, fldObjectType.disp_name );
					break;
				}
			}
			return sDesc;
	"/>
	<get_client_data PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sLogin"  PARAM="sPassword" EXPR="

			try
			{
				SetHttpDefaultAuth( sLogin, sPassword );
				sHeaders = 'Ignore-Errors: 1\nContent-type: text/xml; charset=utf-8';

				respBody = HttpRequest( 'https://about.websoft.ru/get_client_data.xml', 'post', sHeaders ).Body;
				return respBody;
			}
			catch( ex )
			{
				alert(ex)
				return null;
			}
	"/>
	<webinar_conversation_participants_obj TYPE="variant"/>
	<get_webinar_conversation_participants PROPERTY="1" PARAM="iWebinarSystemId" EXPR="
			if ( ! tools.webinar_conversation_participants_obj.HasValue )
			{
				arrWeninarConversationParticipants = new Array();
				for( _webinar_system in webinar_systems )
				try
				{
					oResult = CallServerMethod( 'tools', 'call_webinar_system_method',[ _webinar_system.id, 'GetWeninarConversationParticipants', {} ]);
					if( oResult.GetOptProperty( 'persons' ) != undefined )
					{
						arrPersons = oResult.persons;
						if( ArrayOptFirstElem( arrPersons ) != undefined )
							arrWeninarConversationParticipants.push( { webinar_system_id: _webinar_system.id.Value, persons: arrPersons } );
					}
				}
				catch( ex ){}
				tools.webinar_conversation_participants_obj = arrWeninarConversationParticipants;
			}

			return tools.webinar_conversation_participants_obj.Object;
	"/>
	<system_event_handlers_obj TYPE="variant"/>
	<get_system_event_handlers PROPERTY="1" PARAM="iSystemEventId" EXPR="
			if ( ! tools.system_event_handlers_obj.HasValue )
			{
				oSystemEventHandler = new Object();
			}
			else
			{
				oSystemEventHandler = tools.system_event_handlers_obj.Object;
			}
			if( oSystemEventHandler.GetOptProperty( String( iSystemEventId ) ) == undefined )
			{

				arrSystemEventHandlers = new Array();
				for( _se in XQuery( 'for $elem in system_event_handlers where $elem/system_event_id = ' + iSystemEventId + ' and $elem/is_enabled = true() return $elem/Fields( \'id\' )' ) )
					try
					{
						obj = new Object();
						obj.id = _se.id.Value;
						obj.top_elem = OpenDoc( UrlFromDocID( _se.id ) ).TopElem;
						arrSystemEventHandlers.push( obj );
					}
					catch( ex )
					{
						alert( 'get_system_event_handlers ' + ex )
					}
				oSystemEventHandler.SetProperty( String( iSystemEventId ), arrSystemEventHandlers );
				tools.system_event_handlers_obj = oSystemEventHandler;
			}
			return oSystemEventHandler.GetProperty( String( iSystemEventId ) )
	"/>
	<add_system_event_handlers_to_obj PROPERTY="1" PARAM="iSystemEventId" PARAM="iSystemEventHandlerId" PARAM="teSystemEventHandler" EXPR="
			if ( ! tools.system_event_handlers_obj.HasValue )
			{
				oSystemEventHandler = new Object();
			}
			else
			{
				oSystemEventHandler = tools.system_event_handlers_obj.Object;
			}

			arrSystemEventHandler = oSystemEventHandler.GetOptProperty( String( iSystemEventId ) );
			if( arrSystemEventHandler == undefined )
			{
				arrSystemEventHandler = new Array();
				oSystemEventHandler.SetProperty( String( iSystemEventId ), arrSystemEventHandler );
			}
			catSystemEventHandler = ArrayOptFind( arrSystemEventHandler, 'This.id == iSystemEventHandlerId' );
			if( catSystemEventHandler == undefined )
			{
				catSystemEventHandler = new Object();
				catSystemEventHandler.id = Int( iSystemEventHandlerId );
				catSystemEventHandler.top_elem = null;
				arrSystemEventHandler.push( catSystemEventHandler );
			}
			try
			{
				teSystemEventHandler.Name;
			}
			catch( ex )
			{
				teSystemEventHandler = OpenDoc( UrlFromDocID( Int( iSystemEventHandlerId ) ) ).TopElem;
			}
			catSystemEventHandler.top_elem = teSystemEventHandler;
			tools.system_event_handlers_obj = oSystemEventHandler;
			return true;
	"/>
	<del_system_event_handlers_from_obj PROPERTY="1" PARAM="iSystemEventId" PARAM="iSystemEventHandlerId" EXPR="
			if ( ! tools.system_event_handlers_obj.HasValue )
			{
				oSystemEventHandler = new Object();
			}
			else
			{
				oSystemEventHandler = tools.system_event_handlers_obj.Object;
			}

			arrSystemEventHandler = oSystemEventHandler.GetOptProperty( String( iSystemEventId ) );
			if( arrSystemEventHandler == undefined )
			{
				return true;
			}
			catSystemEventHandler = ArrayOptFind( arrSystemEventHandler, 'This.id == iSystemEventHandlerId' );
			if( catSystemEventHandler == undefined )
			{
				return true;
			}
			else
			{
				oSystemEventHandler.SetProperty( String( iSystemEventId ), ArraySelect( arrSystemEventHandler, 'This.id != iSystemEventHandlerId' ) )
				tools.system_event_handlers_obj = oSystemEventHandler;
				return true;
			}
	"/>
	<add_object_to_package PROPERTY="1" PARAM="docObject" PARAM="iObjectID" PARAM="Screen" PARAM="fldPackage" PARAM="oParam" EXPR="

				oRes = new Object();
				oRes.error = 0;
				oRes.message = '';
				oRes.params = new Object();
				try
				{
					iObjectID = Int( iObjectID );
				}
				catch( ex )
				{
					oRes.error = 1;
					oRes.message = ex;
					return oRes;
				}
				try
				{
					docObject.TopElem;
				}
				catch( ex )
				{
					docObject = OpenDoc( UrlFromDocID( iObjectID ) )
				}
				bSavePackage = false;
				try
				{
					fldPackage;
				}
				catch( ex )
				{
					fldPackage = package_objects.GetChildByKey( local_settings.package_id );
					bSavePackage = true;
				}
				_child = fldPackage.objects.ObtainChildByKey( iObjectID );

				try
				{
					_child.name = tools.get_disp_name_value( docObject.TopElem );
				}
				catch ( ewr )
				{
				}
				try
				{
					oParam
				}
				catch ( ewr )
				{
					oParam = new Object();
				}
				_files_flag = docObject.TopElem.ChildExists( 'files' );
				fRoleExists = false;
				try
				{
					fRoleExists = docObject.TopElem.ChildExists( 'role_id' );
				}
				catch ( err )
				{
				}
				var bApplyToAll = oParam.GetOptProperty( 'apply_to_all', false );
				var bAddFiles = oParam.GetOptProperty( 'add_files', _files_flag );
				var bAddRoles = oParam.GetOptProperty( 'add_roles', fRoleExists );
				var bAddForeignElemObjects = oParam.GetOptProperty( 'add_foreign_elem_objects', false );
				var bAddSections = oParam.GetOptProperty( 'add_sections', docObject.TopElem.Name == 'assessment' );
				if( !bApplyToAll && ( bAddFiles || bAddRoles || bAddSections || true ) )
				{
					dlgOptionDoc = OpenDoc( 'x-local://wtv/dlg_select_add_to_package_option.xml' );
					dlgOptionDoc.TopElem.object_id = iObjectID;
					dlgOptionDoc.TopElem.multi_select = oParam.GetOptProperty( 'multi_select', false );

					ActiveScreen.ModalDlg( dlgOptionDoc );
					bApplyToAll = dlgOptionDoc.TopElem.apply_for_all_objects;
					bAddFiles = dlgOptionDoc.TopElem.add_files;
					bAddRoles = dlgOptionDoc.TopElem.add_role_id;
					bAddSections = dlgOptionDoc.TopElem.add_sections;
					bAddForeignElemObjects = dlgOptionDoc.TopElem.add_foreign_elem_objects;
					oParam.SetProperty( 'apply_to_all', bApplyToAll );
					oParam.SetProperty( 'add_files', bAddFiles );
					oParam.SetProperty( 'add_roles', bAddRoles );
					oParam.SetProperty( 'add_sections', bAddSections );
					oParam.SetProperty( 'add_foreign_elem_objects', bAddForeignElemObjects );
				}


				_child.type = docObject.TopElem.Name;

				_retry_flag = true;
				if ( bAddFiles )
					for ( _file in docObject.TopElem.files )
					{
						/*if ( _retry_flag )
						{
							_retry_flag = false;
							if ( ! Screen.MsgBox( ms_tools.get_const('6l1ufem8j0'), ms_tools.get_const('c_question'), 'question', 'yes,no' ) )
								break;
						}*/

						_child = fldPackage.objects.ObtainChildByKey( _file.PrimaryKey );
						try
						{
							_child.name = _file.PrimaryKey.ForeignElem.name;
						}
						catch ( err )
						{
						}
						_child.type = 'resource';
					}

				_retry_flag = true;
				if ( bAddRoles )
				{
					for ( fldRole in docObject.TopElem.role_id )
					{
						/*if ( _retry_flag )
						{
							_retry_flag = false;
							if ( ! Screen.MsgBox( ms_tools.get_const('vklyuchatvpaketk'), ms_tools.get_const('c_question'), 'question', 'yes,no' ) )
								break;
						}*/

						_child = fldPackage.objects.ObtainChildByKey( fldRole.Value );
						try
						{
							_child.name = fldRole.ForeignElem.name;
						}
						catch ( err )
						{
						}
						_child.type = 'role';
					}
				}

				_retry_flag = true;
				if ( bAddSections && docObject.TopElem.Name == 'assessment' )
					for ( _section in docObject.TopElem.sections )
						for ( _item in _section.items )
						{
							/*if ( _retry_flag )
							{
								_retry_flag = false;
								if ( ! Screen.MsgBox( ms_tools.get_const('nkbplb90my'), ms_tools.get_const('c_question'), 'question', 'yes,no' ) )
									break;
								bAddCategory = true;
							}*/

							_child = fldPackage.objects.ObtainChildByKey( _item.PrimaryKey );
							_child.type = 'item';
							try
							{
								_fe = _item.PrimaryKey.ForeignElem;
								_child.name = _fe.title.HasValue ? _fe.title : _fe.question_text;

								if ( bAddCategory )
								{
									for ( fldRole in _fe.role_id )
									{
										_chi = fldPackage.objects.ObtainChildByKey( fldRole.Value );
										_chi.type = 'role';
									try
									{
											_chi.name = fldRole.ForeignElem.name;
									}
									catch ( e )
									{
									}
									}
								}
							}
							catch ( err )
							{
							}
						}
			if ( bAddForeignElemObjects )
			{
				function add_foreign_elem_objects( fldElem )
				{
					try
					{
						if( fldElem.Name == 'files' || fldElem.Name == 'role_id' || fldElem.Name == 'sections' )
						{
							return;
						}
						for( _elem in fldElem )
						{
							if( _elem.IsMultiElem )
							{
								for( _child in _elem )
								{
									add_foreign_elem_objects( _child )
								}
								return;
							}
							sForeignElem = _elem.ForeignArrayCodeStr;

							if( _elem.HasValue && sForeignElem != '' && ( StrContains( sForeignElem, 'DefaultDb.GetOptCatalog' ) || !StrContains( sForeignElem, '.' ) ) )
							{
								tools.add_object_to_package( null, _elem.Value, Screen, fldPackage, { 'add_files': false, 'add_roles': false, 'add_sections': false, 'add_foreign_elem_objects': false, 'apply_to_all': true } );
							}
							add_foreign_elem_objects( _elem )
						}
					}
					catch( err )
					{
						return;
					}
				}
				add_foreign_elem_objects( docObject.TopElem );
			}
			oRes.params = oParam;
			if( bSavePackage )
			{
				package_objects.Doc.Save();
			}
			return oRes;
	"/>

	<generate_qr PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="text" PARAM="options" EXPR="
		try
		{
			options = OptInt(options, 0);
		}
		catch(_x_)
		{
			options = 0;
		}

		if (LdsIsServer)
		{
			var resLink;
			try
			{
				var webUtil = tools.get_object_assembly('WebUtils');

				var sTempUrl = (options & 1) == 1 ? ('x-local://trash/temp/QR' + tools.random_string(10) + '.png') : ObtainSessionTempFile( '.png' );

				webUtil.QrGen(text, UrlToFilePath(sTempUrl));

				if (webUtil.IsError)
				{
					alert('generate_qr error: ' +  webUtil.GetError());
					return null;
				}
				else
					return sTempUrl;

			}
			catch(_x_)
			{
				alert('generate_qr error: ' +  _x_);
				return null;
			}
		}
		else
			return CallServerMethod( 'tools', 'generate_qr', ([RValue( text ), options]));
	"/>


	<repeate_learning_activation PROPERTY="1" PARAM="oLeartningParam" EXPR="
			iLearningID = OptInt( oLeartningParam );
			if ( iLearningID == undefined )
			{
				teLearning = oLeartningParam;
				//iLearningID = teLearning.id.Value;
			}
			else
			{
				teLearning = OpenDoc( UrlFromDocID( iLearningID ) ).TopElem;
			}

			docLearning = null;
			switch ( teLearning.Name )
			{
				case 'learning':
				{
					docLearning = tools.activate_course_to_person( {
						'iPersonID': teLearning.person_id.Value,
						'iCourseID': teLearning.course_id.Value
						//'iEventID': iEventID,
						//'iDuration': oDuration,
						//'iGroupID': iGroupID,
						//'bCommenting':  fldOptionChild.commenting.Value,
						//'bLogging': fldOptionChild.logging.Value,
						//'bUseProctoring': fldOptionChild.use_proctoring.Value,
					} );
					break;
				}

				case 'test_learning':
				{
					docLearning = tools.activate_test_to_person( {
						'iPersonID': teLearning.person_id.Value,
						'iAssessmentID': teLearning.assessment_id.Value
						//'iEventID': iEventID,
						//'iDuration': oDuration,
						//'iGroupID': iGroupID,
						//'bUseProctoring': fldOptionChild.use_proctoring.Value,
					} );
					break;
				}
			}
			return docLearning;
	"/>


	<!-- /*PERSON_HIERARHY*/ -->
	<person_hierarchy_build PROPERTY="1" PARAM="aInstructions" EXPR="
		function get_hier_line(parent_id, _monitorLine)
		{
			var subLine = ArrayOptFindBySortedKey(line, parent_id, 'id');
			if (subLine == undefined)
			{
				subLine = ({'id': parent_id, 'line': null});
				var cat = ArrayOptFirstElem(XQuery('for $elem in subdivisions where $elem/id = ' + parent_id + ' return $elem/Fields(\'parent_object_id\')'));
				if (cat != undefined)
				{
					if (cat.parent_object_id.HasValue && !StrContains(_monitorLine, cat.parent_object_id.Value))
					{
						var granddad_id = cat.parent_object_id.Value;
						var dadline = get_hier_line(granddad_id, _monitorLine + ',' + granddad_id);
						subLine.line = ArrayUnion(dadline, ([parent_id]));
					}
					else
						subLine.line = ([parent_id]);

					line.push(subLine);
					line = ArraySort(line, 'id', '+');
				}
				else
					subLine.line = new Array();
			}

			return subLine.line;
		}

		var time = GetCurTicks() / 1000;

		var i, newSpot, pos, sl, elem, c = ArrayCount(aInstructions);

		if (c > 0)
		{
			var	line = new Array();

			LogEvent('agent', 'wtv_global_person_hierarchy_update.js: updating ' + c + ' entries');

			i = 0;
			var DestCatalog = person_hierarchys;
			for (elem in aInstructions)
			{
				newSpot = AddCatalogEntry();
				newSpot.collaborator_id = elem[0];
				newSpot.position_id = elem[1];
				pos = elem[2];
				if (pos != null)
				{
					newSpot.parent_sub_id = pos;
					for (sl in get_hier_line(pos, null))
					{
						newSpot.subdivision_id.Add().Value = sl;
					}
				}
				newSpot.ready = true;
				StoreCatalogEntry( newSpot );

				i++;
				if ((i % 1000) == 0)
					LogEvent('agent', 'wtv_global_person_hierarchy_update.js: updating subdivision processed ' + i + '/' + c);
			}
			LogEvent('agent', 'wtv_global_person_hierarchy_update.js: updating subdivision chain END (' + ((GetCurTicks() / 1000) - time)+ 's)');
		}
	"/>

	<person_hierarchy_build_all PROPERTY="1" EXPR="
			function cleanup()
			{
				var DestCatalog = person_hierarchys;
				if ((tools.sys_db_capability & tools.UNI_CAP_BASIC) != 0)
					DeleteCatalogEntries();
				else
				{
					DeleteCatalogEntries( false, 'ready' );
					DeleteCatalogEntries( true, 'ready' );
				}
				/*
				var elem;
				for (elem in ArraySelectDistinct(XQuery('for $elem in person_hierarchys return $elem/Fields(\'collaborator_id\')'), 'This.collaborator_id.Value'))
					DeleteCatalogEntries( elem.collaborator_id.Value, 'collaborator_id' )
				*/
			}
			var lock;
			var MULTIPOSSUPPORT = true;

			try
			{
				lock = (tools_web.get_user_data('person_hierarchy_lock') == '1');
			}
			catch(_x_)
			{
				lock = false;
			}

			if (lock)
			{
				alert('PERSON_HIERARCHY: locked. Skipping.');
			}
			else
			{
				try
				{
					tools_web.set_user_data('person_hierarchy_lock', '1', 86400);
					alert('PERSON_HIERARCHY: initial gen START');

					var xq, time = GetCurTicks() / 1000;

					cleanup();

					alert('PERSON_HIERARCHY: initial gen Cleanup done (' +((GetCurTicks() / 1000) - time)+ 's)');

					time = GetCurTicks() / 1000;
					if (MULTIPOSSUPPORT)
						xq = ArrayExtract(XQuery('for $elem in positions where $elem/basic_collaborator_id != null() return $elem/Fields(\'id\',\'basic_collaborator_id\',\'parent_object_id\')'), '([This.basic_collaborator_id.Value, This.id.Value, This.parent_object_id.Value])');
					else
						xq = ArrayExtract(XQuery('for $elem in collaborators where $elem/position_id != null() return $elem/Fields(\'id\',\'position_id\',\'position_parent_id\')'), '([This.id.Value, This.position_id.Value, This.position_parent_id.Value])');
					var xqCount = ArrayCount( xq );
					tools.person_hierarchy_build(xq);

					alert('PERSON_HIERARCHY: initial gen END (' + xqCount + 'pers ' +((GetCurTicks() / 1000) - time)+ 's)');
					tools_web.remove_user_data('person_hierarchy_lock');
				}
				catch(err)
				{
					alert('PERSON_HIERARCHY: initial gen error: ' + err);
					tools_web.remove_user_data('person_hierarchy_lock');
				}
			}
	"/>

	<put_message_in_queue PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sQueueName" PARAM="sCommandXml" EXPR="
			try
			{
				sQueueName;
			}
			catch(_x_)
			{
				return false;
			}
			try
			{
				sCommandXml;
			}
			catch(_x_)
			{
				return false;
			}
			if ( ! LdsIsServer )
			{
				return CallServerMethod( 'tools', 'put_message_in_queue', [ sQueueName, sCommandXml ] );
			}
			if( tools.spxml_unibridge.HasValue )
			{
				tools.spxml_unibridge.Object.provider.PutMessageInQueue( sQueueName, sCommandXml );
			}
			return true;
	"/>

	<file_sources_obj TYPE="variant"/>
	<get_file_sources PROPERTY="1" PARAM="iFileSourceId" EXPR="
			try
			{
				iFileSourceId = Int( iFileSourceId );
			}
			catch( ex )
			{
				return undefined;
			}
			if ( ! tools.file_sources_obj.HasValue )
			{

				tools.update_file_sources();
			}

			oFileSources = tools.file_sources_obj.Object;

			catFileSource = ArrayOptFind( oFileSources, 'This.id == iFileSourceId' );
			if( catFileSource != undefined )
			{
				return catFileSource.top_elem;
			}
			return undefined;

	"/>
	<update_file_sources PROPERTY="1" PARAM="iFileSourceId" PARAM="teFileSource"  EXPR="
			try
			{
				iFileSourceId = Int( iFileSourceId )
			}
			catch( ex )
			{
				iFileSourceId = undefined;
			}
			if( iFileSourceId == undefined  )
			{
				arrFileSources = new Array();
				for( _fs in XQuery( 'for $elem in file_sources return $elem/Fields( \'id\' )' ) )
					try
					{
						obj = new Object();
						obj.id = _fs.id.Value;
						obj.top_elem = OpenDoc( UrlFromDocID( _fs.id ) ).TopElem;
						arrFileSources.push( obj );
					}
					catch( ex )
					{
						alert( 'update_file_sources ' + ex )
					}
			}
			else
			{
				try
				{
					teFileSource.Name;
				}
				catch( ex )
				{
					teFileSource = OpenDoc( UrlFromDocID( iFileSourceId ) ).TopElem;
				}
				if( tools.file_sources_obj.HasValue )
				{
					arrFileSources = tools.file_sources_obj.Object;
				}
				else
				{
					arrFileSources = new Array();
				}
				catFileSource = ArrayOptFindByKey( arrFileSources, iFileSourceId, 'id' );
				if( catFileSource == undefined )
				{
					catFileSource = new Object();
					catFileSource.id = iFileSourceId;
					catFileSource.top_elem = teFileSource;
					arrFileSources.push( catFileSource );
				}
				else
				{
					catFileSource.top_elem = teFileSource;
				}
			}
			tools.file_sources_obj = arrFileSources;
			return true;
	"/>
	<cache_code_librarys_obj TYPE="variant"/>
	<init_cache_code_librarys PROPERTY="1" PARAM="iCodeLibraryId" EXPR="
		tools.cache_code_librarys_obj = new Dictionary();
"/>
	<get_cache_code_librarys PROPERTY="1" PARAM="iCodeLibraryId" EXPR="
			var sCodeLibraryCode;
			var teCodeLibrary = undefined;
			try
			{
				iCodeLibraryId = Int( iCodeLibraryId );
			}
			catch( ex )
			{
				try
				{
					sCodeLibraryCode = iCodeLibraryId;
					iCodeLibraryId = undefined;
					if( sCodeLibraryCode == null || sCodeLibraryCode == undefined || sCodeLibraryCode == '' )
					{
						throw 'error';
					}
				}
				catch( err )
				{
					return undefined;
				}
			}
			if ( ! tools.cache_code_librarys_obj.HasValue )
			{

				tools.update_cache_code_librarys();
			}

			var catCodeLibrary, oCodeLibrarys = tools.cache_code_librarys_obj.Object;
			if( iCodeLibraryId != undefined )
			{
				catCodeLibrary = ArrayOptFindByKey(oCodeLibrarys.SelectAll(), iCodeLibraryId, 'id');
			}
			else
			{
				catCodeLibrary = oCodeLibrarys.FindByKey(sCodeLibraryCode);
			}
			if( catCodeLibrary == undefined )
			{
				if( iCodeLibraryId == undefined )
				{
					iCodeLibraryId = ArrayOptFirstElem(XQuery('for $elem in code_librarys where $elem/code = ' + XQueryLiteral( String( sCodeLibraryCode ) ) + ' return $elem/Fields(\'id\')')).id.Value;
				}
				teCodeLibrary = OpenDoc( UrlFromDocID( iCodeLibraryId ) ).TopElem;
				tools.update_cache_code_librarys( iCodeLibraryId, teCodeLibrary );
				return teCodeLibrary;
			}
			if( catCodeLibrary != undefined )
			{
				return catCodeLibrary.top_elem;
			}
			return undefined;

	"/>
	<update_cache_code_librarys PROPERTY="1" PARAM="iCodeLibraryId" PARAM="teParamCodeLibrary"  EXPR="
			var teCodeLibrary = undefined;
			try
			{
				iCodeLibraryId = Int( iCodeLibraryId )
			}
			catch( ex )
			{
				iCodeLibraryId = undefined;
			}

			var d, bOld = tools.cache_code_librarys_obj.HasValue;

			if (bOld)
				d = tools.cache_code_librarys_obj.Object;
			else
			{
				d = new Dictionary();
				tools.cache_code_librarys_obj = d;
			}

			if( iCodeLibraryId == undefined  )
			{
				var _fs, obj;
				for( _fs in XQuery( 'for $elem in code_librarys return $elem/Fields( \'id\',\'code\' )' ) )
					try
					{
						obj = new Object();
						obj.id = _fs.id.Value;
						obj.code = _fs.code.Value;
						obj.top_elem = OpenDoc( UrlFromDocID( _fs.id ) ).TopElem;
						if (bOld)
							d.DeleteByKey(obj.code);
						d.ObtainByKey(obj.code, 'obj');
					}
					catch( ex )
					{
						alert( 'update_code_librarys ' + ex )
					}
			}
			else
			{
				try
				{
					if ( teParamCodeLibrary.Name == 'code_library' )
					{
						teCodeLibrary = teParamCodeLibrary;
					}
				}
				catch( ex )
				{
					teCodeLibrary = OpenDoc( UrlFromDocID( iCodeLibraryId ) ).TopElem;
				}

				var catCodeLibrary = ArrayOptFindByKey( d.SelectAll(), iCodeLibraryId, 'id' );
				if( catCodeLibrary == undefined )
				{
					catCodeLibrary = new Object();
					catCodeLibrary.id = iCodeLibraryId;
					catCodeLibrary.code = teCodeLibrary.code.Value;
					catCodeLibrary.top_elem = teCodeLibrary;
					if (bOld)
						d.DeleteByKey(catCodeLibrary.code);
					d.ObtainByKey(catCodeLibrary.code, 'catCodeLibrary');
				}
				else
				{
					catCodeLibrary.top_elem = teCodeLibrary;
				}
			}

			return true;
	"/>
	<get_file_from_data PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oSource" EXPR="

		var oRes = new Object();
		oRes.error = 0;
		oRes.error_text = '';

		_url = 'x-local://share/' + oSource.file_name;
		try
		{
			ObtainSessionTempFile( _url );
		}
		catch( ex ){}
		try
		{
			PutUrlData( _url, ( oSource.data ) );
		}
		catch( ex )
		{
			oRes.error = 1;
			oRes.error_text = RValue(ex);
			return oRes;
		}
		oRes.SetProperty( 'file_url', _url )
		return oRes;
	"/>

	<getDayYear PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="dDate" EXPR="
		dDate = OptDate(dDate)
		if(dDate == undefined)
			return null;

		var dBeginYear = OptDate(Year(dDate), 1, 1)
		var iDiffSec = DateToRawSeconds(dDate) - DateToRawSeconds(dBeginYear);

		return iDiffSec/86400 + 1;
	"/>

	<getWeekYear PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="dDate" EXPR="
		var iDayInYear = getDayYear(dDate);
		if(iDayInYear == null)
			return null;

		var dBeginYear = OptDate(Year(dDate), 1, 1);
		var iBeginYearDayInWeek = WeekDay(dBeginYear);
		if(iBeginYearDayInWeek == 0)
			iBeginYearDayInWeek = 7;

		var iDayInYearFullWeek = iDayInYear - (8 - iBeginYearDayInWeek)

		return (iDayInYearFullWeek <= 0 )? 1 : iDayInYearFullWeek/7 + ( iDayInYearFullWeek % 7 == 0 ? 1 : 2);
	"/>


	<get_access_role_claims PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="dUpdateParam" EXPR="
			if ( ! LdsIsServer )
			{
				try
				{
					dUpdateParam = dUpdateParam == true;
				}
				catch ( err )
				{
					dUpdateParam = false;
				}
				if ( dUpdateParam || ! tools.cur_user_access_claims.HasValue )
				{
					var oRes = CallServerMethod( 'tools', 'get_access_role_claims', [ dUpdateParam ] );
					tools.cur_user_access_claims = oRes;
				}
				if ( tools.cur_user_access_claims == null )
				{
					return null;
				}
				return tools.cur_user_access_claims.Object;
			}

			var arrClaims = [];
			var oAssembly = tools.get_object_assembly( 'XHTTPMiddlewareStatic' );
			try
			{
				arrClaims = oAssembly.CallClassStaticMethod( 'Datex.XHTTP.Context', 'GetIdentityClaims', [] );
			}
			catch ( err )
			{
				return null;
			}
			if ( arrClaims == null || arrClaims == undefined )
			{
				return null;
			}
/*
alert(EncodeJson(arrClaims))
return [
{type:'module',name:'pers',value:'full'},
{type:'module',name:'dist',value:'full'}
];
for ( oClaimElem in arrClaims )
{
alert(oClaimElem.Type+' == '+oClaimElem.Value)
}
*/
			if ( ArrayOptFindByKey( arrClaims, 'sub', 'Type' ) == undefined )
			{
				return null;
			}

			var arrRoles = [];
			for ( oClaimElem in arrClaims )
			{
				if ( oClaimElem.Type != 'role' || ! StrContains( oClaimElem.Value, '\\' ) )
				{
					continue;
				}
				arrValue = String( oClaimElem.Value ).split( '\\' );
				arrRoleValue = arrValue[ 1 ].split( ':' );
				if ( ArrayCount( arrRoleValue ) &lt; 2 )
				{
					continue;
				}
				arrRoles.push( {
					type:  arrValue[ 0 ],
					name: arrRoleValue[ 0 ],
					value: arrRoleValue[ 1 ]
				} );
			}
			return arrRoles;
	"/>


	<remove_fetch_doc PROPERTY="1" PARAM="iObjectIDParam" EXPR="
			var oProvider = tools.spxml_unibridge.Object.provider;
			var sNodeUIDs = oProvider.GetRunningInfo( 'uids' );
			var iNodeCounter = 0;
			if ( sNodeUIDs != null &amp;&amp; sNodeUIDs != undefined &amp;&amp; sNodeUIDs != '' )
			{
				for ( sUIDElem in String( sNodeUIDs ).split( ',' ) )
				{
					if ( sUIDElem != '' )
					{
						sQueueName = 'fetch-doc-queue_' + sUIDElem;
						sData = '{object_id:' + OptInt( iObjectIDParam, 'null' ) + '}';
						oProvider.PutMessageInQueue( sQueueName, sData );
						iNodeCounter++;
					}
				}
			}
			return iNodeCounter;
	"/>


	<open_excel PROPERTY="1" PARAM="sFileUrlParam" EXPR="
			//arrRows = OpenDoc( sFileUrlParam, 'format=excel' ).TopElem.worksheet;

			var arrLiters = [
				'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
				'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'AZ',
				'BA', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'BX', 'BY', 'BZ',
				'CA', 'CB', 'CC', 'CD', 'CE', 'CF', 'CG', 'CH', 'CI', 'CJ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ'
			];
			var oXmlWorkbook = CreateDynamicElem( 'workbook', 'string' );

			var oXLS_X = tools.get_object_assembly( 'Excel' );
			if ( !FilePathExists( UrlToFilePath( sFileUrlParam ) ) )
			{
				PutFileData( UrlToFilePath( sFileUrlParam ), LoadUrlData( sFileUrlParam ) );
			}
			oXLS_X.Open( UrlToFilePath( sFileUrlParam ) );
			var iWSCount = 0;

			try
			{
				iWSCount = oXLS_X.WorkSheetsCount;
			}
			catch( _nows_ )
			{
				iWSCount = 1;
			}

			for ( i=0; i < iWSCount; i++ )
			{
				oWorksheet = oXLS_X.GetWorksheet( i );
				oXmlWorksheet = oXmlWorkbook.AddDynamicChild( 'worksheet', 'string' );

				iMaxColumnCout = 0;
				for ( j=0; j < arrLiters.length; j++ )
				{
					sCell = String( oWorksheet.Cells.GetCell( arrLiters[ j ] + '1' ).Value );
					if ( sCell != 'undefined' && sCell != '' )
					{
						iMaxColumnCout = j;
					}
				}

				for ( row=1; row < 1000000; row++ )
				{
					sCell = String( oWorksheet.Cells.GetCell( 'A' + row ).Value );
					bEmpty = true;
					oXmlRow = oXmlWorksheet.AddDynamicChild( 'row', 'string' );
					for ( j=0; j <= iMaxColumnCout; j++ )
					{
						sCell = String( oWorksheet.Cells.GetCell( arrLiters[ j ] + row ).Value );
						if ( sCell == 'undefined' )
						{
							sCell = '';
						}
						oXmlCell = oXmlRow.AddDynamicChild( 'cell', 'string' );
						oXmlCell.Value = sCell;
						if ( sCell != '' )
						{
							bEmpty = false;
						}
					}
					if ( bEmpty )
					{
						oXmlRow.Delete();
						break;
					}
				}
			}
			return oXmlWorkbook;
	"/>

</tools>

</SPXML-INLINE-FORM>